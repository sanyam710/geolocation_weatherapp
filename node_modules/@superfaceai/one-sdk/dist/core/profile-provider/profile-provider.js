"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfileProvider = exports.bindProfileProvider = void 0;
var ast_1 = require("@superfaceai/ast");
var lib_1 = require("../../lib");
var schema_tools_1 = require("../../schema-tools");
var errors_1 = require("../errors");
var provider_1 = require("../provider");
var registry_1 = require("../registry");
var services_1 = require("../services");
var bound_profile_provider_1 = require("./bound-profile-provider");
var parameters_1 = require("./parameters");
var resolve_map_ast_1 = require("./resolve-map-ast");
var security_1 = require("./security");
var DEBUG_NAMESPACE = 'profile-provider';
function bindProfileProvider(profile, profileProviderConfig, providerConfig, superJson, config, sandbox, events, timers, fileSystem, crypto, fetchInstance, logger) {
    return __awaiter(this, void 0, void 0, function () {
        var profileProvider, boundProfileProvider, expiresAt;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    profileProvider = new ProfileProvider(superJson, profile, providerConfig, profileProviderConfig, config, sandbox, events, fileSystem, crypto, fetchInstance, logger);
                    return [4 /*yield*/, profileProvider.bind()];
                case 1:
                    boundProfileProvider = _a.sent();
                    expiresAt = Math.floor(timers.now() / 1000) + config.superfaceCacheTimeout;
                    return [2 /*return*/, { provider: boundProfileProvider, expiresAt: expiresAt }];
            }
        });
    });
}
exports.bindProfileProvider = bindProfileProvider;
var ProfileProvider = /** @class */ (function () {
    function ProfileProvider(
    // TODO: Use superJson from events/Client?
    superJson, 
    /** profile ast node */
    profile, 
    /** provider configuration instance */
    providerConfig, profileProviderConfig, config, sandbox, events, fileSystem, crypto, fetchInstance, logger) {
        this.superJson = superJson;
        this.profile = profile;
        this.providerConfig = providerConfig;
        this.profileProviderConfig = profileProviderConfig;
        this.config = config;
        this.sandbox = sandbox;
        this.events = events;
        this.fileSystem = fileSystem;
        this.crypto = crypto;
        this.fetchInstance = fetchInstance;
        this.logger = logger;
        this.profileId = lib_1.profileAstId(this.profile);
        this.providersCachePath = fileSystem.path.join(config.cachePath, 'providers');
        this.log = logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE);
    }
    /**
     * Binds the provider.
     *
     * This fetches the unspecified data (provider information and map ast) from registry.
     */
    ProfileProvider.prototype.bind = function (configuration) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        return __awaiter(this, void 0, void 0, function () {
            var profileId, providerName, providerInfo, securityValues, thisProviderName, mapAst, fetchResponse, securityConfiguration;
            return __generator(this, function (_j) {
                switch (_j.label) {
                    case 0:
                        profileId = lib_1.profileAstId(this.profile);
                        providerName = this.providerConfig.name;
                        return [4 /*yield*/, provider_1.resolveProviderJson({
                                providerName: this.providerConfig.name,
                                superJson: this.superJson,
                                fileSystem: this.fileSystem,
                                config: this.config,
                                logger: this.logger,
                            })];
                    case 1:
                        providerInfo = _j.sent();
                        securityValues = this.resolveSecurityValues(providerName, (_a = configuration === null || configuration === void 0 ? void 0 : configuration.security) !== null && _a !== void 0 ? _a : this.providerConfig.security);
                        thisProviderName = this.providerConfig.name;
                        if (providerName !== thisProviderName) {
                            throw errors_1.providersDoNotMatchError(providerName, thisProviderName, 'provider.json');
                        }
                        return [4 /*yield*/, resolve_map_ast_1.resolveMapAst({
                                profileId: profileId,
                                providerName: providerName,
                                variant: this.profileProviderConfig.variant,
                                superJson: this.superJson,
                                fileSystem: this.fileSystem,
                                config: this.config,
                                logger: this.logger,
                            })];
                    case 2:
                        mapAst = _j.sent();
                        if (!(mapAst === undefined)) return [3 /*break*/, 5];
                        (_b = this.log) === null || _b === void 0 ? void 0 : _b.call(this, 'Fetching map from store');
                        // throw error when we have remote map and local provider
                        if (providerInfo) {
                            throw errors_1.localProviderAndRemoteMapError(providerName, this.profileId);
                        }
                        return [4 /*yield*/, registry_1.fetchBind({
                                profileId: profileId +
                                    ("@" + this.profile.header.version.major + "." + this.profile.header.version.minor + "." + this.profile.header.version.patch),
                                provider: providerName,
                                mapVariant: this.profileProviderConfig.variant,
                                mapRevision: this.profileProviderConfig.revision,
                            }, this.config, this.crypto, this.fetchInstance, this.logger)];
                    case 3:
                        fetchResponse = _j.sent();
                        providerInfo !== null && providerInfo !== void 0 ? providerInfo : (providerInfo = fetchResponse.provider);
                        return [4 /*yield*/, this.writeProviderCache(providerInfo)];
                    case 4:
                        _j.sent();
                        this.providerJson = providerInfo;
                        mapAst = fetchResponse.mapAst;
                        if (!mapAst) {
                            throw errors_1.invalidMapASTResponseError();
                        }
                        return [3 /*break*/, 7];
                    case 5:
                        if (!(providerInfo === undefined)) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.cacheProviderInfo(providerName)];
                    case 6:
                        // resolve only provider info if map is specified locally
                        providerInfo = _j.sent();
                        _j.label = 7;
                    case 7:
                        if (providerName !== mapAst.header.provider) {
                            throw errors_1.providersDoNotMatchError(mapAst.header.provider, providerName, 'map');
                        }
                        securityConfiguration = security_1.resolveSecurityConfiguration((_c = providerInfo.securitySchemes) !== null && _c !== void 0 ? _c : [], securityValues, providerName);
                        return [2 /*return*/, new bound_profile_provider_1.BoundProfileProvider(this.profile, mapAst, providerInfo, this.config, this.sandbox, {
                                services: new services_1.ServiceSelector(providerInfo.services, providerInfo.defaultService),
                                profileProviderSettings: (_e = (_d = this.superJson) === null || _d === void 0 ? void 0 : _d.profiles[profileId]) === null || _e === void 0 ? void 0 : _e.providers[providerInfo.name],
                                security: securityConfiguration,
                                parameters: parameters_1.resolveIntegrationParameters(providerInfo, (_f = this.providerConfig.parameters) !== null && _f !== void 0 ? _f : (_h = (_g = this.superJson) === null || _g === void 0 ? void 0 : _g.providers[providerInfo.name]) === null || _h === void 0 ? void 0 : _h.parameters),
                            }, this.crypto, this.fetchInstance, this.logger, this.events)];
                }
            });
        });
    };
    ProfileProvider.prototype.cacheProviderInfo = function (providerName) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var errors, providerCachePath, _c, error_1, providerJsonFile;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        errors = [];
                        if (!(this.providerJson === undefined)) return [3 /*break*/, 7];
                        providerCachePath = this.fileSystem.path.join(this.providersCachePath, providerName);
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 4, , 5]);
                        _c = this;
                        return [4 /*yield*/, registry_1.fetchProviderInfo(providerName, this.config, this.crypto, this.fetchInstance, this.logger)];
                    case 2:
                        _c.providerJson = _d.sent();
                        return [4 /*yield*/, this.writeProviderCache(this.providerJson)];
                    case 3:
                        _d.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        error_1 = _d.sent();
                        (_a = this.log) === null || _a === void 0 ? void 0 : _a.call(this, "Failed to fetch provider.json for " + providerName + ": %O", error_1);
                        errors.push(error_1);
                        return [3 /*break*/, 5];
                    case 5:
                        if (!(this.providerJson === undefined)) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.fileSystem.readFile(providerCachePath)];
                    case 6:
                        providerJsonFile = _d.sent();
                        if (providerJsonFile.isErr()) {
                            (_b = this.log) === null || _b === void 0 ? void 0 : _b.call(this, "Failed to read cached provider.json for " + providerName, providerJsonFile.error);
                            errors.push(providerJsonFile.error);
                        }
                        else {
                            this.providerJson = ast_1.assertProviderJson(JSON.parse(providerJsonFile.value));
                        }
                        _d.label = 7;
                    case 7:
                        if (this.providerJson === undefined) {
                            throw new lib_1.UnexpectedError('Failed to fetch provider.json or load it from cache.', errors);
                        }
                        return [2 /*return*/, this.providerJson];
                }
            });
        });
    };
    ProfileProvider.prototype.writeProviderCache = function (providerJson) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var providerCachePath, error_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        providerCachePath = this.fileSystem.path.join(this.providersCachePath, providerJson.name + ".json");
                        if (!(this.config.cache === true)) return [3 /*break*/, 5];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, this.fileSystem.mkdir(this.providersCachePath, {
                                recursive: true,
                            })];
                    case 2:
                        _b.sent();
                        return [4 /*yield*/, this.fileSystem.writeFile(providerCachePath, JSON.stringify(providerJson, undefined, 2))];
                    case 3:
                        _b.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        error_2 = _b.sent();
                        (_a = this.log) === null || _a === void 0 ? void 0 : _a.call(this, "Failed to cache provider.json for " + providerJson.name + ": %O", error_2);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Resolves auth variables by applying the provided overlay over the base variables.
     *
     * The base variables come from super.json
     */
    ProfileProvider.prototype.resolveSecurityValues = function (providerName, overlay) {
        var _a, _b, _c;
        var base = (_c = (_b = (_a = this.superJson) === null || _a === void 0 ? void 0 : _a.providers[providerName]) === null || _b === void 0 ? void 0 : _b.security) !== null && _c !== void 0 ? _c : [];
        if (overlay !== undefined) {
            return schema_tools_1.mergeSecurity(base, overlay);
        }
        return base;
    };
    return ProfileProvider;
}());
exports.ProfileProvider = ProfileProvider;
//# sourceMappingURL=profile-provider.js.map