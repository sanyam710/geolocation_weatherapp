import { AssignmentNode, CallStatementNode, ConditionAtomNode, HttpCallStatementNode, HttpRequestNode, HttpResponseHandlerNode, InlineCallNode, IterationAtomNode, JessieExpressionNode, MapASTNode, MapDefinitionNode, MapDocumentNode, MapHeaderNode, ObjectLiteralNode, OperationDefinitionNode, OutcomeStatementNode, PrimitiveLiteralNode, SetStatementNode } from './map-ast';
export declare const isMapDocumentNode: (node: unknown) => node is MapDocumentNode;
export declare const isAssignmentNode: (node: MapASTNode) => node is AssignmentNode;
export declare const isCallStatementNode: (node: MapASTNode) => node is CallStatementNode;
export declare const isConditionAtomNode: (node: MapASTNode) => node is ConditionAtomNode;
export declare const isHttpCallStatementNode: (node: MapASTNode) => node is HttpCallStatementNode;
export declare const isHttpRequestNode: (node: MapASTNode) => node is HttpRequestNode;
export declare const isHttpResponseHandlerNode: (node: MapASTNode) => node is HttpResponseHandlerNode;
export declare const isInlineCallNode: (node: MapASTNode) => node is InlineCallNode;
export declare const isIterationAtomNode: (node: MapASTNode) => node is IterationAtomNode;
export declare const isJessieExpressionNode: (node: MapASTNode) => node is JessieExpressionNode;
export declare const isMapDefinitionNode: (node: MapASTNode) => node is MapDefinitionNode;
export declare const isMapHeaderNode: (node: MapASTNode) => node is MapHeaderNode;
export declare const isObjectLiteralNode: (node: MapASTNode) => node is ObjectLiteralNode;
export declare const isOperationDefinitionNode: (node: MapASTNode) => node is OperationDefinitionNode;
export declare const isOutcomeStatementNode: (node: MapASTNode) => node is OutcomeStatementNode;
export declare const isPrimitiveLiteralNode: (node: MapASTNode) => node is PrimitiveLiteralNode;
export declare const isSetStatementNode: (node: MapASTNode) => node is SetStatementNode;
export declare function assertMapDocumentNode(node: unknown): MapDocumentNode;
export interface MapAstVisitor<R = unknown> {
    visit(node: MapASTNode): R;
    visitPrimitiveLiteralNode(node: PrimitiveLiteralNode): R;
    visitObjectLiteralNode(node: ObjectLiteralNode): R;
    visitJessieExpressionNode(node: JessieExpressionNode): R;
    visitAssignmentNode(node: AssignmentNode): R;
    visitConditionAtomNode(node: ConditionAtomNode): R;
    visitIterationAtomNode(node: IterationAtomNode): R;
    visitSetStatementNode(node: SetStatementNode): R;
    visitCallStatementNode(node: CallStatementNode): R;
    visitHttpResponseHandlerNode(node: HttpResponseHandlerNode): R;
    visitHttpCallStatementNode(node: HttpCallStatementNode): R;
    visitMapDefinitionNode(node: MapDefinitionNode): R;
    visitMapHeaderNode(node: MapHeaderNode): R;
    visitOperationDefinitionNode(node: OperationDefinitionNode): R;
    visitOutcomeStatementNode(node: OutcomeStatementNode): R;
    visitInlineCallNode(node: InlineCallNode): R;
    visitMapDocumentNode(node: MapDocumentNode): R;
}
