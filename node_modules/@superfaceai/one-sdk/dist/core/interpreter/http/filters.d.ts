import type { ILogger } from '../../../interfaces';
import type { MaybePromise } from '../../../lib';
import type { IFetch } from './interfaces';
import type { AuthCache, HttpRequest, ISecurityHandler, RequestParameters } from './security';
import type { HttpResponse } from './types';
/**
 * Represents input of pipe filter which works with http response
 */
export declare type FilterInputOutput = {
    parameters: RequestParameters;
    request?: Partial<HttpRequest>;
    response?: HttpResponse;
};
export declare type FilterInputWithResponse = FilterInputOutput & {
    response: HttpResponse;
};
export declare type FilterInputWithRequest = FilterInputOutput & {
    request: HttpRequest;
};
/**
 * Represents pipe filter which works with http response
 */
export declare type Filter = (input: FilterInputOutput) => MaybePromise<FilterInputOutput>;
export declare type FilterWithResponse = (input: FilterInputWithResponse) => MaybePromise<FilterInputOutput>;
export declare type FilterWithRequest = (input: FilterInputWithRequest) => MaybePromise<FilterInputOutput>;
/**
 * Represents pipe input
 */
export declare type PipeInput = {
    filters: Filter[];
    initial: FilterInputOutput;
};
/**
 * Asserts that given filter gets called with request present in input
 */
export declare const withRequest: (filter: FilterWithRequest) => Filter;
/**
 * Asserts that given filter gets called with response present in input
 */
export declare const withResponse: (filter: FilterWithResponse) => Filter;
export declare const fetchFilter: (fetchInstance: IFetch & AuthCache, logger?: ILogger) => FilterWithRequest;
export declare const authenticateFilter: (handler?: ISecurityHandler) => Filter;
export declare const handleResponseFilter: (fetchInstance: IFetch & AuthCache, logger?: ILogger, handler?: ISecurityHandler) => FilterWithResponse;
export declare const urlFilter: Filter;
export declare const bodyFilter: Filter;
export declare const queryParametersFilter: Filter;
export declare const methodFilter: Filter;
export declare const headersFilter: Filter;
export declare const prepareRequestFilter: Filter;
export declare function isCompleteHttpRequest(input: Partial<HttpRequest>): input is HttpRequest;
