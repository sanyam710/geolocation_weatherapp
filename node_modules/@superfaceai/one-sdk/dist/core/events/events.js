"use strict";
/* eslint-disable @typescript-eslint/no-unsafe-argument */
/* eslint-disable @typescript-eslint/no-unsafe-return */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-explicit-any */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.eventInterceptor = exports.Events = void 0;
var lib_1 = require("../../lib");
var DEBUG_NAMESPACE = 'events';
function priorityCallbackTuple(priority, callback, filter) {
    return [priority, callback, filter];
}
var Events = /** @class */ (function () {
    function Events(timers, logger) {
        this.timers = timers;
        this.hookContext = {};
        this.listeners = {};
        this.log = logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE);
    }
    Events.prototype.on = function (event, options, callback) {
        var _a, _b;
        (_a = this.log) === null || _a === void 0 ? void 0 : _a.call(this, "Attaching listener for event \"" + event + "\" with priority " + options.priority);
        this.listeners[event] = __spreadArray(__spreadArray([], __read(((_b = this.listeners[event]) !== null && _b !== void 0 ? _b : []))), [
            priorityCallbackTuple(options.priority, callback, options.filter),
        ]).sort(function (_a, _b) {
            var _c = __read(_a, 1), priority1 = _c[0];
            var _d = __read(_b, 1), priority2 = _d[0];
            return priority1 - priority2;
        });
    };
    Events.prototype.emit = function (event, parameters) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var listeners, _d, context, params, subresult, i, _e, callback, filter, hookResult;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        (_a = this.log) === null || _a === void 0 ? void 0 : _a.call(this, "Emitting event \"" + event + "\"");
                        listeners = this.listeners[event];
                        _d = __read(parameters, 1), context = _d[0];
                        params = parameters;
                        subresult = { kind: 'continue' };
                        if (!(listeners !== undefined && listeners.length > 0)) return [3 /*break*/, 4];
                        i = 0;
                        _f.label = 1;
                    case 1:
                        if (!(i < listeners.length)) return [3 /*break*/, 4];
                        _e = __read(listeners[i], 3), callback = _e[1], filter = _e[2];
                        if ((filter === null || filter === void 0 ? void 0 : filter.profile) !== undefined &&
                            (filter === null || filter === void 0 ? void 0 : filter.profile) !== context.profile) {
                            return [3 /*break*/, 3];
                        }
                        if ((filter === null || filter === void 0 ? void 0 : filter.usecase) !== undefined &&
                            (filter === null || filter === void 0 ? void 0 : filter.usecase) !== context.usecase) {
                            return [3 /*break*/, 3];
                        }
                        return [4 /*yield*/, callback.apply(void 0, __spreadArray([], __read(params)))];
                    case 2:
                        hookResult = _f.sent();
                        (_b = this.log) === null || _b === void 0 ? void 0 : _b.call(this, "Event \"" + event + "\" listener " + i + " result: " + ((_c = hookResult === null || hookResult === void 0 ? void 0 : hookResult.kind) !== null && _c !== void 0 ? _c : 'continue'));
                        if (hookResult === undefined || hookResult.kind === 'continue') {
                            // DO NOTHING YAY!
                        }
                        else if (hookResult.kind === 'modify') {
                            params = [context, hookResult.newArgs];
                            subresult = hookResult;
                        }
                        else if (hookResult.kind === 'abort' || hookResult.kind === 'retry') {
                            return [2 /*return*/, hookResult];
                        }
                        _f.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, subresult];
                }
            });
        });
    };
    return Events;
}());
exports.Events = Events;
var eventInterceptorMetadataDefaults = {
    placement: 'around',
};
function replacementFunction(originalFunction, metadata) {
    return function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var metadataString, eventsString, events, functionArgs, retry, maybeResult, hookResult, result, _q, _r, err_1, hookResult;
            return __generator(this, function (_s) {
                switch (_s.label) {
                    case 0:
                        if (((_b = (_a = this.events) === null || _a === void 0 ? void 0 : _a.log) === null || _b === void 0 ? void 0 : _b.enabled) === true) {
                            metadataString = 'undefined';
                            if (this.metadata !== undefined) {
                                metadataString = "{ profile: " + ((_c = this.metadata.profile) !== null && _c !== void 0 ? _c : 'undefined') + ", provider: " + ((_d = this.metadata.provider) !== null && _d !== void 0 ? _d : 'undefined') + ", usecase: " + ((_e = this.metadata.usecase) !== null && _e !== void 0 ? _e : 'undefined') + " }";
                            }
                            eventsString = 'undefined';
                            if (this.events !== undefined) {
                                eventsString = 'defined';
                            }
                            (_g = (_f = this.events) === null || _f === void 0 ? void 0 : _f.log) === null || _g === void 0 ? void 0 : _g.call(_f, "Intercepted function for \"" + metadata.eventName + "\" (placement: " + ((_h = metadata.placement) !== null && _h !== void 0 ? _h : '') + ") with context: { metadata: " + metadataString + ", events: " + eventsString + " }");
                        }
                        events = this.events;
                        if (!events) {
                            return [2 /*return*/, originalFunction.apply(this, args)];
                        }
                        functionArgs = args;
                        retry = true;
                        _s.label = 1;
                    case 1:
                        if (!retry) return [3 /*break*/, 10];
                        maybeResult = void 0;
                        if (!(metadata.placement === 'before' || metadata.placement === 'around')) return [3 /*break*/, 3];
                        return [4 /*yield*/, events.emit("pre-" + metadata.eventName, [
                                {
                                    time: new Date(events.timers.now()),
                                    profile: (_j = this.metadata) === null || _j === void 0 ? void 0 : _j.profile,
                                    usecase: (_k = this.metadata) === null || _k === void 0 ? void 0 : _k.usecase,
                                    provider: (_l = this.metadata) === null || _l === void 0 ? void 0 : _l.provider,
                                },
                                functionArgs,
                            ])];
                    case 2:
                        hookResult = _s.sent();
                        if (hookResult === undefined || hookResult.kind === 'continue') {
                            // DO NOTHING YAY!
                        }
                        else if (hookResult.kind === 'modify') {
                            functionArgs = hookResult.newArgs;
                        }
                        else if (hookResult.kind === 'abort') {
                            maybeResult = hookResult.newResult;
                        }
                        _s.label = 3;
                    case 3:
                        if (maybeResult === undefined) {
                            maybeResult = originalFunction.apply(this, functionArgs);
                        }
                        result = void 0;
                        _s.label = 4;
                    case 4:
                        _s.trys.push([4, 6, , 7]);
                        _r = (_q = Promise).resolve;
                        return [4 /*yield*/, maybeResult];
                    case 5:
                        result = _r.apply(_q, [_s.sent()]);
                        return [3 /*break*/, 7];
                    case 6:
                        err_1 = _s.sent();
                        result = Promise.reject(err_1);
                        return [3 /*break*/, 7];
                    case 7:
                        if (!(metadata.placement === 'after' || metadata.placement === 'around')) return [3 /*break*/, 9];
                        return [4 /*yield*/, events.emit("post-" + metadata.eventName, [
                                {
                                    time: new Date(events.timers.now()),
                                    profile: (_m = this.metadata) === null || _m === void 0 ? void 0 : _m.profile,
                                    usecase: (_o = this.metadata) === null || _o === void 0 ? void 0 : _o.usecase,
                                    provider: (_p = this.metadata) === null || _p === void 0 ? void 0 : _p.provider,
                                },
                                functionArgs,
                                result,
                            ])];
                    case 8:
                        hookResult = _s.sent();
                        if (hookResult === undefined || hookResult.kind === 'continue') {
                            return [2 /*return*/, result];
                        }
                        if (hookResult.kind === 'modify') {
                            return [2 /*return*/, hookResult.newResult];
                        }
                        if (hookResult.kind === 'retry') {
                            if (hookResult.newArgs !== undefined) {
                                functionArgs = hookResult.newArgs;
                            }
                            return [3 /*break*/, 1];
                        }
                        // This should be unreachable, but let's not do infinite loops in case something goes terribly wrong
                        retry = false;
                        _s.label = 9;
                    case 9: return [2 /*return*/, result];
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
}
function eventInterceptor(eventMetadata) {
    return function (target, propertyKey, descriptor) {
        var _a, _b;
        var metadata = __assign(__assign({}, eventInterceptorMetadataDefaults), eventMetadata);
        (_b = (_a = target.events) === null || _a === void 0 ? void 0 : _a.log) === null || _b === void 0 ? void 0 : _b.call(_a, "Attaching interceptor for event \"" + metadata.eventName + "\" (placement: " + metadata.placement + ") onto " + target.constructor.name + "::" + propertyKey);
        if (descriptor.value === undefined) {
            throw new lib_1.UnexpectedError('Something went horribly wrong, Godzilla might be involved!');
        }
        var originalFunction = descriptor.value;
        descriptor.value = replacementFunction(originalFunction, metadata);
        return descriptor;
    };
}
exports.eventInterceptor = eventInterceptor;
//# sourceMappingURL=events.js.map