"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertProfileDocumentNode = exports.isDocumentDefinition = exports.isComlinkAssignmentNode = exports.isComlinkLiteralNode = exports.isComlinkListLiteralNode = exports.isComlinkObjectLiteralNode = exports.isComlinkPrimitiveLiteralNode = exports.isComlinkNoneLiteralNode = exports.isUseCaseExampleNode = exports.isUseCaseSlotDefinitionNode = exports.isUseCaseSlotDefinitionNodeObjectDefinitionNode = exports.isUseCaseSlotDefinitionNodeComlinkLiteralNode = exports.isUseCaseSlotDefinitionNodeUseCaseExampleNode = exports.isUseCaseSlotDefinitionNodeType = exports.isUseCaseDefinitionNode = exports.isUnionDefinitionNode = exports.isType = exports.isTypeName = exports.isTypeDefinition = exports.isProfileHeaderNode = exports.isPrimitiveTypeNameNode = exports.isObjectDefinitionNode = exports.isNonNullDefinitionNode = exports.isNamedModelDefinitionNode = exports.isNamedFieldDefinitionNode = exports.isModelTypeNameNode = exports.isListDefinitionNode = exports.isFieldDefinitionNode = exports.isEnumValueNode = exports.isEnumDefinitionNode = exports.isProfileDocumentNode = void 0;
var validation_1 = require("../../validation");
var schema = __importStar(require("./profile-ast.schema.json"));
var assertProfileDocument = (0, validation_1.prepareAssert)(schema, 'profile-ast');
var isProfileDocumentNode = function (node) {
    try {
        assertProfileDocument(node);
        return true;
    }
    catch (_a) {
        return false;
    }
};
exports.isProfileDocumentNode = isProfileDocumentNode;
// We don't need to do JSON Schema validation on these, as they should be already validated
var isEnumDefinitionNode = function (node) { return node.kind === 'EnumDefinition'; };
exports.isEnumDefinitionNode = isEnumDefinitionNode;
var isEnumValueNode = function (node) {
    return node.kind === 'EnumValue';
};
exports.isEnumValueNode = isEnumValueNode;
var isFieldDefinitionNode = function (node) { return node.kind === 'FieldDefinition'; };
exports.isFieldDefinitionNode = isFieldDefinitionNode;
var isListDefinitionNode = function (node) { return node.kind === 'ListDefinition'; };
exports.isListDefinitionNode = isListDefinitionNode;
var isModelTypeNameNode = function (node) { return node.kind === 'ModelTypeName'; };
exports.isModelTypeNameNode = isModelTypeNameNode;
var isNamedFieldDefinitionNode = function (node) { return node.kind === 'NamedFieldDefinition'; };
exports.isNamedFieldDefinitionNode = isNamedFieldDefinitionNode;
var isNamedModelDefinitionNode = function (node) { return node.kind === 'NamedModelDefinition'; };
exports.isNamedModelDefinitionNode = isNamedModelDefinitionNode;
var isNonNullDefinitionNode = function (node) { return node.kind === 'NonNullDefinition'; };
exports.isNonNullDefinitionNode = isNonNullDefinitionNode;
var isObjectDefinitionNode = function (node) { return node.kind === 'ObjectDefinition'; };
exports.isObjectDefinitionNode = isObjectDefinitionNode;
var isPrimitiveTypeNameNode = function (node) { return node.kind === 'PrimitiveTypeName'; };
exports.isPrimitiveTypeNameNode = isPrimitiveTypeNameNode;
var isProfileHeaderNode = function (node) { return node.kind === 'ProfileHeader'; };
exports.isProfileHeaderNode = isProfileHeaderNode;
var isTypeDefinition = function (input) {
    return (0, exports.isObjectDefinitionNode)(input) ||
        (0, exports.isEnumDefinitionNode)(input) ||
        (0, exports.isUnionDefinitionNode)(input) ||
        (0, exports.isNonNullDefinitionNode)(input) ||
        (0, exports.isUseCaseExampleNode)(input) ||
        (0, exports.isComlinkListLiteralNode)(input);
};
exports.isTypeDefinition = isTypeDefinition;
var isTypeName = function (input) {
    return (0, exports.isPrimitiveTypeNameNode)(input) || (0, exports.isModelTypeNameNode)(input);
};
exports.isTypeName = isTypeName;
var isType = function (input) {
    return (0, exports.isTypeDefinition)(input) || (0, exports.isTypeName)(input);
};
exports.isType = isType;
var isUnionDefinitionNode = function (node) { return node.kind === 'UnionDefinition'; };
exports.isUnionDefinitionNode = isUnionDefinitionNode;
var isUseCaseDefinitionNode = function (node) { return node.kind === 'UseCaseDefinition'; };
exports.isUseCaseDefinitionNode = isUseCaseDefinitionNode;
var isUseCaseSlotDefinitionNodeType = function (node) {
    return node.kind === 'UseCaseSlotDefinition' && (0, exports.isType)(node.value);
};
exports.isUseCaseSlotDefinitionNodeType = isUseCaseSlotDefinitionNodeType;
var isUseCaseSlotDefinitionNodeUseCaseExampleNode = function (node) {
    return node.kind === 'UseCaseSlotDefinition' && (0, exports.isUseCaseExampleNode)(node.value);
};
exports.isUseCaseSlotDefinitionNodeUseCaseExampleNode = isUseCaseSlotDefinitionNodeUseCaseExampleNode;
var isUseCaseSlotDefinitionNodeComlinkLiteralNode = function (node) {
    return node.kind === 'UseCaseSlotDefinition' && (0, exports.isComlinkLiteralNode)(node.value);
};
exports.isUseCaseSlotDefinitionNodeComlinkLiteralNode = isUseCaseSlotDefinitionNodeComlinkLiteralNode;
var isUseCaseSlotDefinitionNodeObjectDefinitionNode = function (node) {
    return node.kind === 'UseCaseSlotDefinition' && (0, exports.isObjectDefinitionNode)(node.value);
};
exports.isUseCaseSlotDefinitionNodeObjectDefinitionNode = isUseCaseSlotDefinitionNodeObjectDefinitionNode;
var isUseCaseSlotDefinitionNode = function (input) {
    return (0, exports.isUseCaseSlotDefinitionNodeType)(input) ||
        (0, exports.isUseCaseSlotDefinitionNodeUseCaseExampleNode)(input) ||
        (0, exports.isUseCaseSlotDefinitionNodeComlinkLiteralNode)(input) ||
        (0, exports.isUseCaseSlotDefinitionNodeObjectDefinitionNode)(input);
};
exports.isUseCaseSlotDefinitionNode = isUseCaseSlotDefinitionNode;
var isUseCaseExampleNode = function (node) { return node.kind === 'UseCaseExample'; };
exports.isUseCaseExampleNode = isUseCaseExampleNode;
var isComlinkNoneLiteralNode = function (node) {
    return node.kind === 'ComlinkNoneLiteral';
};
exports.isComlinkNoneLiteralNode = isComlinkNoneLiteralNode;
var isComlinkPrimitiveLiteralNode = function (node) {
    return node.kind === 'ComlinkPrimitiveLiteral';
};
exports.isComlinkPrimitiveLiteralNode = isComlinkPrimitiveLiteralNode;
var isComlinkObjectLiteralNode = function (node) { return node.kind === 'ComlinkObjectLiteral'; };
exports.isComlinkObjectLiteralNode = isComlinkObjectLiteralNode;
var isComlinkListLiteralNode = function (node) { return node.kind === 'ComlinkListLiteral'; };
exports.isComlinkListLiteralNode = isComlinkListLiteralNode;
var isComlinkLiteralNode = function (node) {
    return (0, exports.isComlinkNoneLiteralNode)(node) ||
        (0, exports.isComlinkPrimitiveLiteralNode)(node) ||
        (0, exports.isComlinkListLiteralNode)(node) ||
        (0, exports.isComlinkObjectLiteralNode)(node);
};
exports.isComlinkLiteralNode = isComlinkLiteralNode;
var isComlinkAssignmentNode = function (node) { return node.kind === 'ComlinkAssignment'; };
exports.isComlinkAssignmentNode = isComlinkAssignmentNode;
var isDocumentDefinition = function (input) {
    return (0, exports.isUseCaseDefinitionNode)(input) ||
        (0, exports.isNamedModelDefinitionNode)(input) ||
        (0, exports.isNamedFieldDefinitionNode)(input);
};
exports.isDocumentDefinition = isDocumentDefinition;
function assertProfileDocumentNode(node) {
    assertProfileDocument(node);
    return node;
}
exports.assertProfileDocumentNode = assertProfileDocumentNode;
//# sourceMappingURL=profile-ast.utils.js.map