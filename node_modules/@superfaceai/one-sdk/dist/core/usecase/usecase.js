"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UseCase = exports.UseCaseBase = exports.resolveSecurityValues = void 0;
var ast_1 = require("@superfaceai/ast");
var lib_1 = require("../../lib");
var events_1 = require("../events");
var profile_provider_1 = require("../profile-provider");
var provider_1 = require("../provider");
var DEBUG_NAMESPACE = 'usecase';
function resolveSecurityValues(security, logFunction) {
    var e_1, _a;
    if (security === undefined) {
        return;
    }
    if (Array.isArray(security)) {
        return security;
    }
    var securityValues = [];
    try {
        for (var _b = __values(Object.entries(security)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = __read(_c.value, 2), id = _d[0], value = _d[1];
            var securityValue = __assign(__assign({}, value), { id: id });
            if (ast_1.isBasicAuthSecurityValues(securityValue) ||
                ast_1.isBearerTokenSecurityValues(securityValue) ||
                ast_1.isApiKeySecurityValues(securityValue) ||
                ast_1.isDigestSecurityValues(securityValue)) {
                securityValues.push(securityValue);
            }
            else {
                logFunction === null || logFunction === void 0 ? void 0 : logFunction('Security: %O is not supported', securityValue);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return securityValues;
}
exports.resolveSecurityValues = resolveSecurityValues;
var UseCaseBase = /** @class */ (function () {
    function UseCaseBase(profile, name, events, config, sandbox, superJson, timers, fileSystem, crypto, boundProfileProviderCache, fetchInstance, logger) {
        this.profile = profile;
        this.name = name;
        this.events = events;
        this.config = config;
        this.sandbox = sandbox;
        this.superJson = superJson;
        this.timers = timers;
        this.fileSystem = fileSystem;
        this.crypto = crypto;
        this.boundProfileProviderCache = boundProfileProviderCache;
        this.fetchInstance = fetchInstance;
        this.logger = logger;
        this.metadata = {
            usecase: name,
            profile: this.profile.configuration.id,
        };
        this.log = logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE);
        this.configureHookContext();
    }
    UseCaseBase.prototype.bind = function (options) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var hookRouter, providerConfig, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        hookRouter = this.events.hookContext[this.profile.configuration.id + "/" + this.name]
                            .router;
                        providerConfig = provider_1.resolveProvider({
                            provider: (_a = options === null || options === void 0 ? void 0 : options.provider) !== null && _a !== void 0 ? _a : hookRouter.getCurrentProvider(),
                            profileId: this.profile.configuration.id,
                            superJson: this.superJson,
                        }).configuration;
                        hookRouter.setCurrentProvider(providerConfig.name);
                        this.metadata.provider = providerConfig.name;
                        _b = this;
                        return [4 /*yield*/, this.rebind(this.profile.configuration.cacheKey + providerConfig.cacheKey, providerConfig, new profile_provider_1.ProfileProviderConfiguration(options === null || options === void 0 ? void 0 : options.mapRevision, options === null || options === void 0 ? void 0 : options.mapVariant))];
                    case 1:
                        _b.boundProfileProvider = _c.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    UseCaseBase.prototype.rebind = function (cacheKey, providerConfig, profileProviderConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, provider, expiresAt, now;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.boundProfileProviderCache.getCached(cacheKey, function () {
                            return profile_provider_1.bindProfileProvider(_this.profile.ast, profileProviderConfig, providerConfig, _this.superJson, _this.config, _this.sandbox, _this.events, _this.timers, _this.fileSystem, _this.crypto, _this.fetchInstance, _this.logger);
                        })];
                    case 1:
                        _a = _b.sent(), provider = _a.provider, expiresAt = _a.expiresAt;
                        now = Math.floor(this.timers.now() / 1000);
                        if (expiresAt < now) {
                            this.boundProfileProviderCache.invalidate(cacheKey);
                            void this.rebind(cacheKey, providerConfig, profileProviderConfig);
                        }
                        return [2 /*return*/, provider];
                }
            });
        });
    };
    UseCaseBase.prototype.performBoundUsecase = function (input, parameters, security) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.boundProfileProvider === undefined) {
                    throw new lib_1.UnexpectedError('Unreachable code reached: BoundProfileProvider is undefined.');
                }
                // TODO: rewrap the errors for public consumption?
                return [2 /*return*/, this.boundProfileProvider.perform(this.name, input, parameters, security)];
            });
        });
    };
    UseCaseBase.prototype.bindAndPerform = function (input, options) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.bind(options)];
                    case 1:
                        _b.sent();
                        (_a = this.log) === null || _a === void 0 ? void 0 : _a.call(this, 'Bound provider: %O', this.boundProfileProvider);
                        return [2 /*return*/, this.performBoundUsecase(input, options === null || options === void 0 ? void 0 : options.parameters, resolveSecurityValues(options === null || options === void 0 ? void 0 : options.security))];
                }
            });
        });
    };
    UseCaseBase.prototype.checkWarnFailoverMisconfiguration = function () {
        var _a;
        var profileId = this.profile.configuration.id;
        // Check providerFailover/priority array
        var profileEntry = (_a = this.superJson) === null || _a === void 0 ? void 0 : _a.profiles[profileId];
        if ((profileEntry === null || profileEntry === void 0 ? void 0 : profileEntry.defaults[this.name]) === undefined) {
            return;
        }
        var failoverEnabled = profileEntry.defaults[this.name].providerFailover === true;
        var priorityEmpty = profileEntry.priority.length === 0;
        // If priority array is not empty but failover is not enable, issue a warning
        if (!priorityEmpty && !failoverEnabled) {
            console.warn("Super.json sets provider failover priority to: \"" + profileEntry.priority.join(', ') + "\" but provider failover is not allowed for usecase \"" + this.name + "\".\nTo allow provider failover please set property \"providerFailover\" in \"" + profileId + ".defaults[" + this.name + "]\" to true");
        }
        // If priority array is empty and failover is enabled, issue a warning
        if (priorityEmpty && failoverEnabled) {
            console.warn("Super.json does not set provider failover priority but provider failover is allowed for usecase \"" + this.name + "\".\nTo allow provider failover please set property \"priority\" in \"" + profileId + ".priority\".\nSetting priority according to order of providers in \"" + profileId + ".providers\"");
        }
    };
    UseCaseBase.prototype.configureHookContext = function () {
        var _this = this;
        var _a, _b;
        this.checkWarnFailoverMisconfiguration();
        var profileId = this.profile.configuration.id;
        var profileSettings = (_a = this.superJson) === null || _a === void 0 ? void 0 : _a.profiles[profileId];
        var key = profileId + "/" + this.name;
        if (this.events.hookContext[key] === undefined) {
            this.events.hookContext[key] = {
                router: new events_1.FailurePolicyRouter(function (provider) { return _this.instantiateFailurePolicy(provider); }, 
                // Use priority only when provider failover is enabled
                ((_b = profileSettings === null || profileSettings === void 0 ? void 0 : profileSettings.defaults[this.name]) === null || _b === void 0 ? void 0 : _b.providerFailover) === true
                    ? profileSettings.priority
                    : []),
                queuedAction: undefined,
            };
        }
    };
    UseCaseBase.prototype.toggleFailover = function (enabled) {
        this.events.hookContext[this.profile.configuration.id + "/" + this.name].router.setAllowFailover(enabled);
    };
    UseCaseBase.prototype.instantiateFailurePolicy = function (provider) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        var profileId = this.profile.configuration.id;
        var usecaseInfo = {
            profileId: profileId,
            usecaseName: this.name,
            // TODO: Somehow know safety
            usecaseSafety: 'unsafe',
        };
        var profileSettings = (_a = this.superJson) === null || _a === void 0 ? void 0 : _a.profiles[profileId];
        var retryPolicyConfig = (_d = (_c = (_b = profileSettings === null || profileSettings === void 0 ? void 0 : profileSettings.providers[provider]) === null || _b === void 0 ? void 0 : _b.defaults[this.name]) === null || _c === void 0 ? void 0 : _c.retryPolicy) !== null && _d !== void 0 ? _d : { kind: ast_1.OnFail.NONE };
        var policy;
        if (retryPolicyConfig.kind === ast_1.OnFail.CIRCUIT_BREAKER) {
            var backoff = new events_1.ExponentialBackoff(events_1.Backoff.DEFAULT_INITIAL, events_1.ExponentialBackoff.DEFAULT_BASE);
            if (((_e = retryPolicyConfig.backoff) === null || _e === void 0 ? void 0 : _e.kind) &&
                ((_f = retryPolicyConfig.backoff) === null || _f === void 0 ? void 0 : _f.kind) === ast_1.BackoffKind.EXPONENTIAL) {
                backoff = new events_1.ExponentialBackoff((_g = retryPolicyConfig.backoff.start) !== null && _g !== void 0 ? _g : events_1.Backoff.DEFAULT_INITIAL, (_h = retryPolicyConfig.backoff.factor) !== null && _h !== void 0 ? _h : events_1.ExponentialBackoff.DEFAULT_BASE);
            }
            policy = new events_1.CircuitBreakerPolicy(usecaseInfo, (_j = retryPolicyConfig.maxContiguousRetries) !== null && _j !== void 0 ? _j : events_1.RetryPolicy.DEFAULT_MAX_CONTIGUOUS_RETRIES, (_k = retryPolicyConfig.openTime) !== null && _k !== void 0 ? _k : events_1.CircuitBreakerPolicy.DEFAULT_OPEN_TIME, (_l = retryPolicyConfig.requestTimeout) !== null && _l !== void 0 ? _l : events_1.RetryPolicy.DEFAULT_REQUEST_TIMEOUT, backoff);
        }
        else if (retryPolicyConfig.kind === ast_1.OnFail.SIMPLE) {
            policy = new events_1.RetryPolicy(usecaseInfo, (_m = retryPolicyConfig.maxContiguousRetries) !== null && _m !== void 0 ? _m : events_1.RetryPolicy.DEFAULT_MAX_CONTIGUOUS_RETRIES, (_o = retryPolicyConfig.requestTimeout) !== null && _o !== void 0 ? _o : events_1.RetryPolicy.DEFAULT_REQUEST_TIMEOUT, new events_1.ConstantBackoff(0));
        }
        else if (retryPolicyConfig.kind === ast_1.OnFail.NONE) {
            policy = new events_1.AbortPolicy(usecaseInfo);
        }
        else {
            throw new lib_1.UnexpectedError('Unreachable point reached.');
        }
        return policy;
    };
    var _a, _b;
    __decorate([
        events_1.eventInterceptor({ eventName: 'perform', placement: 'around' }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [typeof (_a = typeof TInput !== "undefined" && TInput) === "function" ? _a : Object, Object, Array]),
        __metadata("design:returntype", Promise)
    ], UseCaseBase.prototype, "performBoundUsecase", null);
    __decorate([
        events_1.eventInterceptor({ eventName: 'bind-and-perform', placement: 'around' }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [typeof (_b = typeof TInput !== "undefined" && TInput) === "function" ? _b : Object, Object]),
        __metadata("design:returntype", Promise)
    ], UseCaseBase.prototype, "bindAndPerform", null);
    return UseCaseBase;
}());
exports.UseCaseBase = UseCaseBase;
var UseCase = /** @class */ (function (_super) {
    __extends(UseCase, _super);
    function UseCase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UseCase.prototype.perform = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // Disable failover when user specified provider
                // needs to happen here because bindAndPerform is subject to retry from event hooks
                // including provider failover
                this.toggleFailover((options === null || options === void 0 ? void 0 : options.provider) === undefined);
                return [2 /*return*/, this.bindAndPerform(input, options)];
            });
        });
    };
    return UseCase;
}(UseCaseBase));
exports.UseCase = UseCase;
//# sourceMappingURL=usecase.js.map