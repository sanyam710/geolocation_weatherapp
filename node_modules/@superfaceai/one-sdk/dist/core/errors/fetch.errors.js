"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.isFetchError = exports.RequestFetchError = exports.NetworkFetchError = exports.FetchErrorBase = void 0;
var lib_1 = require("../../lib");
var FetchErrorBase = /** @class */ (function (_super) {
    __extends(FetchErrorBase, _super);
    function FetchErrorBase(kind, issue) {
        var _this = _super.call(this, kind, "Fetch failed: " + issue + " issue") || this;
        _this.kind = kind;
        _this.issue = issue;
        return _this;
    }
    return FetchErrorBase;
}(lib_1.ErrorBase));
exports.FetchErrorBase = FetchErrorBase;
var NetworkFetchError = /** @class */ (function (_super) {
    __extends(NetworkFetchError, _super);
    function NetworkFetchError(issue) {
        var _this = _super.call(this, 'NetworkError', issue) || this;
        _this.issue = issue;
        return _this;
    }
    Object.defineProperty(NetworkFetchError.prototype, "normalized", {
        get: function () {
            return { kind: 'network', issue: this.issue };
        },
        enumerable: false,
        configurable: true
    });
    return NetworkFetchError;
}(FetchErrorBase));
exports.NetworkFetchError = NetworkFetchError;
var RequestFetchError = /** @class */ (function (_super) {
    __extends(RequestFetchError, _super);
    function RequestFetchError(issue) {
        var _this = _super.call(this, 'RequestError', issue) || this;
        _this.issue = issue;
        return _this;
    }
    Object.defineProperty(RequestFetchError.prototype, "normalized", {
        get: function () {
            return { kind: 'request', issue: this.issue };
        },
        enumerable: false,
        configurable: true
    });
    return RequestFetchError;
}(FetchErrorBase));
exports.RequestFetchError = RequestFetchError;
function isFetchError(input) {
    return (typeof input === 'object' &&
        (input instanceof NetworkFetchError || input instanceof RequestFetchError));
}
exports.isFetchError = isFetchError;
//# sourceMappingURL=fetch.errors.js.map