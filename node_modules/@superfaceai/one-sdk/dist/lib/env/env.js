"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveEnvRecord = exports.resolveEnv = void 0;
var object_1 = require("../object");
var DEBUG_NAMESPACE = 'lib/env';
/**
 * Attempts to resolve environment value.
 *
 * If the value starts with `$` character, it attempts to look it up in the environment variables.
 * If the value is not in environment or doesn't start with `$` it is returned as is.
 */
function resolveEnv(str, environment, logger) {
    var value = str;
    if (str.startsWith('$')) {
        var variable = str.slice(1);
        var env = environment.getString(variable);
        if (env !== undefined) {
            value = env;
        }
        else {
            logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE, "Enviroment variable " + variable + " not found");
        }
    }
    return value;
}
exports.resolveEnv = resolveEnv;
/**
 * Resolve environment values in a record recursively.
 *
 * Returns a clone of the of the original record with every string field replaced by the result of `resolveEnd(field)`.
 */
function resolveEnvRecord(record, environment, logger) {
    var e_1, _a;
    // If typed as `Partial<T>` typescript complains with "Type 'string' cannot be used to index type 'Partial<T>'. ts(2536)"
    var result = {};
    try {
        for (var _b = __values(Object.entries(record)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
            if (typeof value === 'string') {
                // replace strings
                result[key] = resolveEnv(value, environment, logger);
            }
            else if (typeof value === 'object' && value !== null) {
                // recurse objects
                result[key] = resolveEnvRecord(value, environment, logger);
            }
            else {
                if (value !== undefined) {
                    // clone everything else
                    result[key] = object_1.clone(value);
                }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return result;
}
exports.resolveEnvRecord = resolveEnvRecord;
//# sourceMappingURL=env.js.map