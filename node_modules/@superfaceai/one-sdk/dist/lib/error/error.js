"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDKBindError = exports.SDKExecutionError = exports.UnexpectedError = exports.ErrorBase = exports.ensureErrorSubclass = void 0;
function ensureErrorSubclass(error) {
    if (typeof error === 'string') {
        return new Error(error);
    }
    else if (error instanceof Error) {
        return error;
    }
    return new Error(JSON.stringify(error));
}
exports.ensureErrorSubclass = ensureErrorSubclass;
var ErrorBase = /** @class */ (function () {
    function ErrorBase(kind, message) {
        this.kind = kind;
        this.message = message;
    }
    Object.defineProperty(ErrorBase.prototype, Symbol.toStringTag, {
        get: function () {
            return this.kind;
        },
        enumerable: false,
        configurable: true
    });
    ErrorBase.prototype.toString = function () {
        return this.kind + ": " + this.message;
    };
    return ErrorBase;
}());
exports.ErrorBase = ErrorBase;
var UnexpectedError = /** @class */ (function (_super) {
    __extends(UnexpectedError, _super);
    function UnexpectedError(message, additionalContext) {
        var _this = _super.call(this, 'UnexpectedError', message) || this;
        _this.message = message;
        _this.additionalContext = additionalContext;
        return _this;
    }
    return UnexpectedError;
}(ErrorBase));
exports.UnexpectedError = UnexpectedError;
/**
 * This is a base class for errors that the SDK may throw during normal execution.
 *
 * These errors should be as descriptive as possible to explain the problem to the user.
 */
var SDKExecutionError = /** @class */ (function (_super) {
    __extends(SDKExecutionError, _super);
    function SDKExecutionError(shortMessage, longLines, hints) {
        var _this = _super.call(this, shortMessage) || this;
        _this.shortMessage = shortMessage;
        _this.longLines = longLines;
        _this.hints = hints;
        // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work
        Object.setPrototypeOf(_this, SDKBindError.prototype);
        _this.message = _this.formatLong();
        _this.name = 'SDKExecutionError';
        return _this;
    }
    /**
     * Formats this error into a one-line string
     */
    SDKExecutionError.prototype.formatShort = function () {
        return this.shortMessage;
    };
    /**
     * Formats this error into a possible multi-line string with more context, details and hints
     */
    SDKExecutionError.prototype.formatLong = function () {
        var e_1, _a, e_2, _b;
        var result = this.shortMessage;
        if (this.longLines.length > 0) {
            result += '\n';
            try {
                for (var _c = __values(this.longLines), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var line = _d.value;
                    result += '\n' + line;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        if (this.hints.length > 0) {
            result += '\n';
            try {
                for (var _e = __values(this.hints), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var hint = _f.value;
                    result += '\nHint: ' + hint;
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        return result + '\n';
    };
    Object.defineProperty(SDKExecutionError.prototype, Symbol.toStringTag, {
        get: function () {
            return this.name;
        },
        enumerable: false,
        configurable: true
    });
    SDKExecutionError.prototype.toString = function () {
        return this.formatLong();
    };
    return SDKExecutionError;
}(Error));
exports.SDKExecutionError = SDKExecutionError;
var SDKBindError = /** @class */ (function (_super) {
    __extends(SDKBindError, _super);
    function SDKBindError(shortMessage, longLines, hints) {
        var _this = _super.call(this, shortMessage, longLines, hints) || this;
        // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work
        Object.setPrototypeOf(_this, SDKBindError.prototype);
        _this.name = 'SDKBindError';
        return _this;
    }
    return SDKBindError;
}(SDKExecutionError));
exports.SDKBindError = SDKBindError;
//# sourceMappingURL=error.js.map