"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveProvider = void 0;
var errors_1 = require("../errors");
var provider_1 = require("./provider");
/**
 * Resolves ProviderConfiguration from parameters.
 * Fallbacks to SuperJson information if provider not specified
 */
function resolveProvider(_a) {
    var provider = _a.provider, security = _a.security, parameters = _a.parameters, superJson = _a.superJson, profileId = _a.profileId;
    if (provider !== undefined) {
        return createProvider({
            provider: provider,
            security: security,
            superJson: superJson,
            parameters: parameters,
        });
    }
    if (profileId !== undefined) {
        if (superJson !== undefined) {
            var profileSettings = superJson.profiles[profileId];
            if (profileSettings === undefined) {
                throw errors_1.profileNotFoundError(profileId);
            }
            var priorityProviders = profileSettings.priority;
            if (priorityProviders.length > 0) {
                return createProvider({
                    provider: priorityProviders[0],
                    security: security,
                    superJson: superJson,
                    parameters: parameters,
                });
            }
        }
        throw errors_1.noConfiguredProviderError(profileId);
    }
    // This should be unreachable in common use. We always have defined provider or profile id and super.json
    throw errors_1.unableToResolveProviderError();
}
exports.resolveProvider = resolveProvider;
function createProvider(_a) {
    var _b, _c;
    var provider = _a.provider, security = _a.security, parameters = _a.parameters, superJson = _a.superJson;
    if (typeof provider === 'string') {
        // Fallback to super json values if possible
        var providerSettings = superJson === null || superJson === void 0 ? void 0 : superJson.providers[provider];
        return new provider_1.Provider(new provider_1.ProviderConfiguration(provider, (_b = security !== null && security !== void 0 ? security : providerSettings === null || providerSettings === void 0 ? void 0 : providerSettings.security) !== null && _b !== void 0 ? _b : [], parameters !== null && parameters !== void 0 ? parameters : providerSettings === null || providerSettings === void 0 ? void 0 : providerSettings.parameters));
    }
    // Pass possibly new security and parameters
    return new provider_1.Provider(new provider_1.ProviderConfiguration(provider.configuration.name, (_c = security !== null && security !== void 0 ? security : provider.configuration.security) !== null && _c !== void 0 ? _c : [], parameters !== null && parameters !== void 0 ? parameters : provider.configuration.parameters));
}
//# sourceMappingURL=resolve-provider.js.map