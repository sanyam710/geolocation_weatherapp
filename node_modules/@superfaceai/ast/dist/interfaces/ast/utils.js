"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractVersion = exports.parseVersionNumber = exports.extractVersionString = exports.isValidVersionString = exports.isValidDocumentName = exports.isValidIdentifier = exports.VERSION_NUMBER_RE = exports.DOCUMENT_NAME_RE_SOURCE = exports.DOCUMENT_NAME_RE = exports.IDENTIFIER_RE_SOURCE = exports.IDENTIFIER_RE = void 0;
var split_1 = require("./split");
exports.IDENTIFIER_RE = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
exports.IDENTIFIER_RE_SOURCE = exports.IDENTIFIER_RE.source;
exports.DOCUMENT_NAME_RE = /^[a-z][a-z0-9_-]*$/;
exports.DOCUMENT_NAME_RE_SOURCE = exports.DOCUMENT_NAME_RE.source;
exports.VERSION_NUMBER_RE = /^[0-9]+$/;
function isValidIdentifier(input) {
    return exports.IDENTIFIER_RE.test(input);
}
exports.isValidIdentifier = isValidIdentifier;
function isValidDocumentName(input) {
    return exports.DOCUMENT_NAME_RE.test(input);
}
exports.isValidDocumentName = isValidDocumentName;
/**
 * Checks if input string is valid version string.
 *
 * Example:
 * ```
 * isValidVersionString('1.2.3') // true
 * isValidVersionString('1.2.3-test') // true
 * ```
 */
function isValidVersionString(version) {
    var _a = __read((0, split_1.splitLimit)(version, '-', 1), 2), restVersion = _a[0], label = _a[1];
    var _b = __read((0, split_1.splitLimit)(restVersion, '.', 2), 3), majorStr = _b[0], minorStr = _b[1], patchStr = _b[2];
    if (!exports.VERSION_NUMBER_RE.test(majorStr)) {
        return false;
    }
    if (minorStr !== undefined) {
        if (!exports.VERSION_NUMBER_RE.test(minorStr)) {
            return false;
        }
    }
    if (patchStr !== undefined) {
        if (!exports.VERSION_NUMBER_RE.test(patchStr)) {
            return false;
        }
    }
    if (label !== undefined) {
        if (!isValidDocumentName(label)) {
            return false;
        }
    }
    return true;
}
exports.isValidVersionString = isValidVersionString;
/**
 * Tries to extract valid version string from input string contining @.
 *
 * Example:
 * ```
 * extractVersionString('test/test@1.2.3') // '1.2.3'
 * ```
 */
function extractVersionString(input) {
    if (input === '') {
        throw new Error('Invalid empty version string');
    }
    var _a = __read((0, split_1.splitLimit)(input, '@', 1), 2), version = _a[1];
    if (!isValidVersionString(version)) {
        throw new Error("Invalid version string in \"".concat(input, "\""));
    }
    return version;
}
exports.extractVersionString = extractVersionString;
/**
 * Tries to parse numeric string (0-9) to number.
 *
 * Example:
 * ```
 * parseVersionNumber('3') // 3
 * parseVersionNumber(' 3 ') // 3
 * ```
 */
function parseVersionNumber(str) {
    var value = str.trim();
    if (!exports.VERSION_NUMBER_RE.test(value)) {
        throw new Error("Unable to parse version string \"".concat(str, "\""));
    }
    return parseInt(value, 10);
}
exports.parseVersionNumber = parseVersionNumber;
/**
 * Tries to extract version object from version string.
 *
 * Example:
 * ```
 * parseVersionNumber('1.2.3') // {major: 1, minor: 2, patch: 3}
 * parseVersionNumber('1.2.3-test') // {major: 1, minor: 2, patch: 3, label: 'test'}
 * ```
 */
function extractVersion(versionString) {
    var _a = __read((0, split_1.splitLimit)(versionString, '-', 1), 2), version = _a[0], label = _a[1];
    var _b = __read((0, split_1.splitLimit)(version, '.', 2), 3), majorStr = _b[0], minorStr = _b[1], patchStr = _b[2];
    var major = parseVersionNumber(majorStr);
    var minor = undefined;
    if (minorStr !== undefined) {
        minor = parseVersionNumber(minorStr);
    }
    var patch = undefined;
    if (patchStr !== undefined) {
        patch = parseVersionNumber(patchStr);
    }
    if (label !== undefined) {
        if (!isValidDocumentName(label)) {
            throw new Error("Invalid version label \"".concat(label, "\""));
        }
    }
    return { major: major, minor: minor, patch: patch, label: label };
}
exports.extractVersion = extractVersion;
//# sourceMappingURL=utils.js.map