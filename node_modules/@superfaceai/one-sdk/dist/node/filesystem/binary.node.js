"use strict";
/* eslint-disable @typescript-eslint/no-non-null-assertion */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BinaryData = exports.StreamContainer = exports.FileContainer = exports.StreamReader = void 0;
var fs_1 = require("fs");
var promises_1 = require("fs/promises");
var path_1 = require("path");
var stream_1 = require("stream");
var interfaces_1 = require("../../interfaces");
var lib_1 = require("../../lib");
var filesystem_node_1 = require("./filesystem.node");
var StreamReader = /** @class */ (function () {
    function StreamReader(stream) {
        this.ended = false;
        this.buffer = Buffer.alloc(0);
        this.stream = stream;
        this.dataCallback = this.onData.bind(this);
        this.endCallback = this.onEnd.bind(this);
        this.hook();
    }
    StreamReader.prototype.hook = function () {
        this.stream.on('data', this.dataCallback);
        this.stream.on('end', this.endCallback);
    };
    StreamReader.prototype.unhook = function () {
        this.stream.off('data', this.dataCallback);
        this.stream.off('end', this.endCallback);
    };
    StreamReader.prototype.onData = function (chunk) {
        this.buffer = Buffer.concat([this.buffer, chunk]);
        this.notifyData();
    };
    StreamReader.prototype.onEnd = function () {
        this.ended = true;
        this.notifyData();
    };
    // assumption: this function is never called twice without awaiting its promise in between
    StreamReader.prototype.waitForData = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (this.stream === undefined) {
                    throw new lib_1.UnexpectedError('Stream ejected', {
                        reason: 'Stream moved by calling toStream()',
                    });
                }
                this.stream.resume();
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        if (_this.pendingReadResolve !== undefined) {
                            reject(new lib_1.UnexpectedError('Waiting for data failed. Unable to resolve pending read'));
                        }
                        _this.pendingReadResolve = resolve;
                    })];
            });
        });
    };
    StreamReader.prototype.notifyData = function () {
        if (this.pendingReadResolve !== undefined) {
            this.pendingReadResolve();
        }
        this.stream.pause();
        this.pendingReadResolve = undefined;
    };
    StreamReader.prototype.read = function (size) {
        if (size === void 0) { size = 1; }
        return __awaiter(this, void 0, void 0, function () {
            var chunk;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.buffer.length < size)) return [3 /*break*/, 2];
                        if (this.ended) {
                            if (this.buffer.length > 0) {
                                // yield remaining data
                                return [3 /*break*/, 2];
                            }
                            else {
                                // signal EOF
                                return [2 /*return*/, Buffer.alloc(0)];
                            }
                        }
                        return [4 /*yield*/, this.waitForData()];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 0];
                    case 2:
                        chunk = this.buffer.subarray(0, size);
                        this.buffer = this.buffer.subarray(size);
                        return [2 /*return*/, chunk];
                }
            });
        });
    };
    StreamReader.prototype.toStream = function () {
        if (this.stream === undefined) {
            throw new lib_1.UnexpectedError('Stream ejected', {
                reason: 'Stream moved by calling toStream()',
            });
        }
        this.unhook();
        var buffer = this.buffer;
        this.buffer = Buffer.alloc(0);
        var pass = new stream_1.PassThrough();
        if (buffer.length > 0) {
            pass.push(buffer);
        }
        this.stream.pipe(pass);
        this.stream = undefined;
        return pass;
    };
    return StreamReader;
}());
exports.StreamReader = StreamReader;
var FileContainer = /** @class */ (function () {
    function FileContainer(path) {
        this.path = path;
        this._size = Infinity;
    }
    Object.defineProperty(FileContainer.prototype, "name", {
        get: function () {
            return path_1.basename(this.path);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FileContainer.prototype, "mimetype", {
        get: function () {
            return undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FileContainer.prototype, "size", {
        get: function () {
            return this._size;
        },
        enumerable: false,
        configurable: true
    });
    FileContainer.prototype.read = function (size) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.streamReader) {
                            throw new lib_1.UnexpectedError('File not initialized');
                        }
                        return [4 /*yield*/, this.streamReader.read(size)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    FileContainer.prototype.initialize = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, size, error_1, stream;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(this.handle === undefined)) return [3 /*break*/, 5];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 4, , 5]);
                        _a = this;
                        return [4 /*yield*/, promises_1.open(this.path, 'r')];
                    case 2:
                        _a.handle = _b.sent();
                        return [4 /*yield*/, this.handle.stat()];
                    case 3:
                        size = (_b.sent()).size;
                        this._size = size;
                        return [3 /*break*/, 5];
                    case 4:
                        error_1 = _b.sent();
                        throw filesystem_node_1.handleNodeError(error_1);
                    case 5:
                        if (this.handle === undefined) {
                            throw new lib_1.UnexpectedError('Unable to initialize file');
                        }
                        if (typeof this.handle.createReadStream !== 'function') {
                            stream = fs_1.createReadStream(this.path);
                        }
                        else {
                            stream = this.handle.createReadStream();
                        }
                        this.streamReader = new StreamReader(stream);
                        return [2 /*return*/];
                }
            });
        });
    };
    FileContainer.prototype.destroy = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.handle !== undefined)) return [3 /*break*/, 4];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.handle.close()];
                    case 2:
                        _a.sent();
                        this.streamReader = undefined;
                        this._size = Infinity;
                        this.handle = undefined;
                        return [3 /*break*/, 4];
                    case 3:
                        _1 = _a.sent();
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    FileContainer.prototype.toStream = function () {
        if (this.streamReader === undefined) {
            throw new lib_1.UnexpectedError('File not initialized');
        }
        return this.streamReader.toStream();
    };
    return FileContainer;
}());
exports.FileContainer = FileContainer;
var StreamContainer = /** @class */ (function () {
    function StreamContainer(stream) {
        this.streamReader = new StreamReader(stream);
    }
    StreamContainer.prototype.read = function (size) {
        return this.streamReader.read(size);
    };
    StreamContainer.prototype.toStream = function () {
        return this.streamReader.toStream();
    };
    return StreamContainer;
}());
exports.StreamContainer = StreamContainer;
var BinaryData = /** @class */ (function () {
    function BinaryData(dataContainer, options) {
        this.dataContainer = dataContainer;
        this._name = options.name;
        this._mimetype = options.mimetype;
        this.buffer = Buffer.alloc(0);
    }
    BinaryData.fromPath = function (path, options) {
        if (options === void 0) { options = {}; }
        return new BinaryData(new FileContainer(path), options);
    };
    BinaryData.fromStream = function (stream, options) {
        if (options === void 0) { options = {}; }
        return new BinaryData(new StreamContainer(stream), options);
    };
    Object.defineProperty(BinaryData.prototype, "name", {
        /**
         * @returns filename for files or URL for sockets
         */
        get: function () {
            if (this._name !== undefined) {
                return this._name;
            }
            if (interfaces_1.isBinaryDataMeta(this.dataContainer)) {
                return this.dataContainer.name;
            }
            return undefined;
        },
        /**
         * Set name for files or URL for sockets
         */
        set: function (value) {
            this._name = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BinaryData.prototype, "mimetype", {
        /**
         * @returns MIME type
         */
        get: function () {
            if (this._mimetype !== undefined) {
                return this._mimetype;
            }
            if (interfaces_1.isBinaryDataMeta(this.dataContainer)) {
                return this.dataContainer.mimetype;
            }
            return undefined;
        },
        set: function (value) {
            this._mimetype = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BinaryData.prototype, "size", {
        /**
         * @returns Size if known in bytes
         */
        get: function () {
            if (interfaces_1.isBinaryDataMeta(this.dataContainer)) {
                return this.dataContainer.size;
            }
            return undefined;
        },
        enumerable: false,
        configurable: true
    });
    BinaryData.prototype.initialize = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!interfaces_1.isInitializable(this.dataContainer)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.dataContainer.initialize()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    BinaryData.prototype.destroy = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!interfaces_1.isDestructible(this.dataContainer)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.dataContainer.destroy()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        this.buffer = Buffer.alloc(0);
                        return [2 /*return*/];
                }
            });
        });
    };
    BinaryData.prototype.fillBuffer = function (sizeAtLeast) {
        return __awaiter(this, void 0, void 0, function () {
            var read;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.buffer.length < sizeAtLeast)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.dataContainer.read(sizeAtLeast - this.buffer.length)];
                    case 1:
                        read = _a.sent();
                        if (read.length > 0) {
                            this.buffer = Buffer.concat([this.buffer, read]);
                        }
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    BinaryData.prototype.consumeBuffer = function (size) {
        var data;
        if (size === undefined) {
            data = this.buffer;
            this.buffer = Buffer.alloc(0);
        }
        else {
            data = this.buffer.subarray(0, size);
            this.buffer = this.buffer.subarray(size);
        }
        return data;
    };
    /**
     * Reads data and stores them in internal buffer for later consumption
     *
     * @param [size=1] Specifies how much data to peek
     * @returns Peeked data as Buffer
     */
    BinaryData.prototype.peek = function (size) {
        if (size === void 0) { size = 1; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fillBuffer(size)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.buffer.subarray(0, size)];
                }
            });
        });
    };
    /**
     * Reads data
     * @param [size=1] Specifies how much data to read
     * @returns Read data as Buffer
     */
    BinaryData.prototype.read = function (size) {
        if (size === void 0) { size = 1; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fillBuffer(size)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.consumeBuffer()];
                }
            });
        });
    };
    /**
     * Reads data from stream and returns chunk once filled with requested size
     *
     * @param chunkSize Specifies how many bytes should be in one chunk, except last which can be smaller
     * @returns Async interable returning one chunk
     */
    BinaryData.prototype.chunkBy = function (chunkSize) {
        var _a;
        if (chunkSize === undefined ||
            chunkSize === null ||
            typeof chunkSize !== 'number' ||
            chunkSize <= 0 ||
            isNaN(chunkSize)) {
            throw new lib_1.UnexpectedError('Invalid chunk size');
        }
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        var self = this;
        return _a = {},
            _a[Symbol.asyncIterator] = function () { return ({
                next: function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var data;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, self.fillBuffer(chunkSize)];
                                case 1:
                                    _a.sent();
                                    data = self.consumeBuffer(chunkSize);
                                    if (!data.length) {
                                        return [2 /*return*/, { done: true, value: undefined }];
                                    }
                                    return [2 /*return*/, { done: false, value: data }];
                            }
                        });
                    });
                },
            }); },
            _a;
    };
    /**
     * Reads data from Stream until the stream is closed
     *
     * @param [chunkSize=16000] specifies how much data in bytes to read in one chunk
     * @returns Read data as Buffer
     */
    BinaryData.prototype.getAllData = function (chunkSize) {
        if (chunkSize === void 0) { chunkSize = 16000; }
        return __awaiter(this, void 0, void 0, function () {
            var size;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        size = this.buffer.length;
                        _a.label = 1;
                    case 1:
                        if (!(this.buffer.length >= size)) return [3 /*break*/, 3];
                        size += chunkSize;
                        return [4 /*yield*/, this.fillBuffer(size)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 1];
                    case 3: return [2 /*return*/, this.consumeBuffer()];
                }
            });
        });
    };
    /**
     * Returns stream to read BinaryData
     *
     * @returns Readable instance
     */
    BinaryData.prototype.toStream = function () {
        var stream = this.dataContainer.toStream();
        if (this.buffer.length > 0) {
            stream.unshift(this.consumeBuffer());
        }
        return stream;
    };
    return BinaryData;
}());
exports.BinaryData = BinaryData;
//# sourceMappingURL=binary.node.js.map