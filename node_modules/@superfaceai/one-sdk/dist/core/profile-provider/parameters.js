"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveIntegrationParameters = void 0;
var ast_1 = require("@superfaceai/ast");
function resolveIntegrationParameters(providerJson, parameters) {
    var e_1, _a, e_2, _b;
    if (parameters === undefined) {
        return undefined;
    }
    var providerJsonParameters = providerJson.parameters || [];
    if (Object.keys(parameters).length !== 0 &&
        providerJsonParameters.length === 0) {
        console.warn('Warning: Super.json defines integration parameters but provider.json does not');
    }
    var result = {};
    var preparedParameters = ast_1.prepareProviderParameters(providerJson.name, providerJsonParameters);
    var _loop_1 = function (key, value) {
        var providerJsonParameter = providerJsonParameters.find(function (parameter) { return parameter.name === key; });
        // If value name and prepared value equals we are dealing with unset env
        if (providerJsonParameter &&
            preparedParameters[providerJsonParameter.name] === value) {
            if (providerJsonParameter.default !== undefined) {
                result[key] = providerJsonParameter.default;
            }
        }
        // Use original value
        if (!result[key]) {
            result[key] = value;
        }
    };
    try {
        // Resolve parameters defined in super.json
        for (var _c = __values(Object.entries(parameters)), _d = _c.next(); !_d.done; _d = _c.next()) {
            var _e = __read(_d.value, 2), key = _e[0], value = _e[1];
            _loop_1(key, value);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
    try {
        // Resolve parameters which are missing in super.json and have default value
        for (var providerJsonParameters_1 = __values(providerJsonParameters), providerJsonParameters_1_1 = providerJsonParameters_1.next(); !providerJsonParameters_1_1.done; providerJsonParameters_1_1 = providerJsonParameters_1.next()) {
            var parameter = providerJsonParameters_1_1.value;
            if (result[parameter.name] === undefined &&
                parameter.default !== undefined) {
                result[parameter.name] = parameter.default;
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (providerJsonParameters_1_1 && !providerJsonParameters_1_1.done && (_b = providerJsonParameters_1.return)) _b.call(providerJsonParameters_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return result;
}
exports.resolveIntegrationParameters = resolveIntegrationParameters;
//# sourceMappingURL=parameters.js.map