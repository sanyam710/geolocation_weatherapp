"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cacheProfileAst = exports.tryToLoadCachedAst = void 0;
var ast_1 = require("@superfaceai/ast");
function tryToLoadCachedAst(_a) {
    var profileId = _a.profileId, version = _a.version, fileSystem = _a.fileSystem, config = _a.config, log = _a.log;
    return __awaiter(this, void 0, void 0, function () {
        var profileCachePath, contents, possibleAst, cachedId, cachedVersion;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (config.cache === false) {
                        return [2 /*return*/, undefined];
                    }
                    profileCachePath = fileSystem.path.join(config.cachePath, 'profiles', profileId + "@" + version + ast_1.EXTENSIONS.profile.build);
                    return [4 /*yield*/, fileSystem.readFile(profileCachePath)];
                case 1:
                    contents = _b.sent();
                    // Try to load
                    if (contents.isErr()) {
                        log === null || log === void 0 ? void 0 : log('Reading of cached profile file failed with error %O', contents.error);
                        return [2 /*return*/, undefined];
                    }
                    try {
                        possibleAst = JSON.parse(contents.value);
                    }
                    catch (error) {
                        log === null || log === void 0 ? void 0 : log('Parsing of cached profile file failed with error %O', error);
                        return [2 /*return*/, undefined];
                    }
                    // Check if valid ProfileDocumentNode
                    if (!ast_1.isProfileDocumentNode(possibleAst)) {
                        log === null || log === void 0 ? void 0 : log('Cached profile file is not valid ProfileDocumentNode');
                        return [2 /*return*/, undefined];
                    }
                    cachedId = possibleAst.header.scope !== undefined
                        ? possibleAst.header.scope + "/" + possibleAst.header.name
                        : possibleAst.header.name;
                    if (profileId !== cachedId) {
                        log === null || log === void 0 ? void 0 : log('Cached profile id (%S) does not matched to used id (%S)', cachedId, profileId);
                        return [2 /*return*/, undefined];
                    }
                    cachedVersion = possibleAst.header.version.major + "." + possibleAst.header.version.minor + "." + possibleAst.header.version.patch;
                    if (possibleAst.header.version.label !== undefined) {
                        cachedVersion += "-" + possibleAst.header.version.label;
                    }
                    if (version !== cachedVersion) {
                        log === null || log === void 0 ? void 0 : log('Cached profile version (%S) does not matched to used version (%S)', cachedVersion, version);
                        return [2 /*return*/, undefined];
                    }
                    return [2 /*return*/, possibleAst];
            }
        });
    });
}
exports.tryToLoadCachedAst = tryToLoadCachedAst;
function cacheProfileAst(_a) {
    var ast = _a.ast, version = _a.version, fileSystem = _a.fileSystem, config = _a.config, log = _a.log;
    return __awaiter(this, void 0, void 0, function () {
        var profileCachePath, path, error_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    profileCachePath = ast.header.scope !== undefined
                        ? fileSystem.path.join(config.cachePath, 'profiles', ast.header.scope)
                        : fileSystem.path.join(config.cachePath, 'profiles');
                    if (!(config.cache === true)) return [3 /*break*/, 5];
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 4, , 5]);
                    return [4 /*yield*/, fileSystem.mkdir(profileCachePath, {
                            recursive: true,
                        })];
                case 2:
                    _b.sent();
                    path = fileSystem.path.join(profileCachePath, ast.header.name + "@" + version + ast_1.EXTENSIONS.profile.build);
                    return [4 /*yield*/, fileSystem.writeFile(path, JSON.stringify(ast, undefined, 2))];
                case 3:
                    _b.sent();
                    return [3 /*break*/, 5];
                case 4:
                    error_1 = _b.sent();
                    log === null || log === void 0 ? void 0 : log("Failed to cache profile AST for " + ast.header.name + ": %O", error_1);
                    return [3 /*break*/, 5];
                case 5: return [2 /*return*/];
            }
        });
    });
}
exports.cacheProfileAst = cacheProfileAst;
//# sourceMappingURL=cache-profile-ast.js.map