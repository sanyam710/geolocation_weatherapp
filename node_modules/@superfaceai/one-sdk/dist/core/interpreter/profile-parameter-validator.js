"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfileParameterValidator = void 0;
var ast_1 = require("@superfaceai/ast");
var lib_1 = require("../../lib");
var profile_parameter_validator_errors_1 = require("./profile-parameter-validator.errors");
var DEBUG_NAMESPACE = 'profile-parameter-validator';
function assertUnreachable(node) {
    throw new lib_1.UnexpectedError("Invalid Node kind: " + node.kind);
}
function objectHasKey(obj, key) {
    if (typeof obj !== 'object') {
        return false;
    }
    if (obj === null) {
        return false;
    }
    if (!(key in obj)) {
        return false;
    }
    return true;
}
function addPath(validator, path) {
    return function (input) {
        var result = validator(input);
        if (result[0]) {
            return result;
        }
        return [
            false,
            result[1].map(function (err) {
                var _a, _b, _c;
                return __assign(__assign({}, err), { context: __assign(__assign({}, ((_a = err.context) !== null && _a !== void 0 ? _a : {})), { path: __spreadArray([path], __read(((_c = (_b = err.context) === null || _b === void 0 ? void 0 : _b.path) !== null && _c !== void 0 ? _c : []))) }) });
            }),
        ];
    };
}
var ProfileParameterValidator = /** @class */ (function () {
    function ProfileParameterValidator(ast, logger) {
        this.ast = ast;
        this.namedFieldDefinitions = {};
        this.namedModelDefinitions = {};
        this.namedDefinitionsInitialized = false;
        this.log = logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE);
    }
    ProfileParameterValidator.prototype.validate = function (input, kind, usecase) {
        var _a, _b;
        try {
            var validator = this.visit(this.ast, kind, usecase);
            var _c = __read(validator(input), 2), result = _c[0], errors = _c[1];
            if (result !== true) {
                (_a = this.log) === null || _a === void 0 ? void 0 : _a.call(this, "Validation of " + kind + " failed with error(s):\n" + profile_parameter_validator_errors_1.formatErrors(errors));
                var error = kind === 'input' ? profile_parameter_validator_errors_1.InputValidationError : profile_parameter_validator_errors_1.ResultValidationError;
                return lib_1.err(new error(errors));
            }
            (_b = this.log) === null || _b === void 0 ? void 0 : _b.call(this, "Validation of " + kind + " succeeded.");
            return lib_1.ok(undefined);
        }
        catch (e) {
            return lib_1.err(new lib_1.UnexpectedError('Unknown error from validator', e));
        }
    };
    ProfileParameterValidator.prototype.visit = function (node, kind, usecase) {
        var _a;
        (_a = this.log) === null || _a === void 0 ? void 0 : _a.call(this, 'Visiting node:', node.kind);
        switch (node.kind) {
            case 'ComlinkListLiteral':
                return this.visitComlinkListLiteralNode(node, kind, usecase);
            case 'ComlinkObjectLiteral':
                return this.visitComlinkObjectLiteralNode(node, kind, usecase);
            case 'ComlinkPrimitiveLiteral':
                return this.visitComlinkPrimitiveLiteralNode(node, kind, usecase);
            case 'ComlinkNoneLiteral':
                return this.visitComlinkNoneLiteralNode(node, kind, usecase);
            case 'ComlinkAssignment':
                return this.visitComlinkAssignmentNode(node, kind, usecase);
            case 'EnumDefinition':
                return this.visitEnumDefinitionNode(node, kind, usecase);
            case 'EnumValue':
                return this.visitEnumValueNode(node, kind, usecase);
            case 'FieldDefinition':
                return this.visitFieldDefinitionNode(node, kind, usecase);
            case 'ListDefinition':
                return this.visitListDefinitionNode(node, kind, usecase);
            case 'ModelTypeName':
                return this.visitModelTypeNameNode(node, kind, usecase);
            case 'NamedFieldDefinition':
                return this.visitNamedFieldDefinitionNode(node, kind, usecase);
            case 'NamedModelDefinition':
                return this.visitNamedModelDefinitionNode(node, kind, usecase);
            case 'NonNullDefinition':
                return this.visitNonNullDefinitionNode(node, kind, usecase);
            case 'ObjectDefinition':
                return this.visitObjectDefinitionNode(node, kind, usecase);
            case 'PrimitiveTypeName':
                return this.visitPrimitiveTypeNameNode(node, kind, usecase);
            case 'ProfileDocument':
                return this.visitProfileDocumentNode(node, kind, usecase);
            case 'ProfileHeader':
                return this.visitProfileHeaderNode(node, kind, usecase);
            case 'UnionDefinition':
                return this.visitUnionDefinitionNode(node, kind, usecase);
            case 'UseCaseDefinition':
                return this.visitUseCaseDefinitionNode(node, kind, usecase);
            case 'UseCaseSlotDefinition':
                return this.visitUseCaseSlotDefinitionNode(node, kind, usecase);
            case 'UseCaseExample':
                return this.visitUseCaseExampleNode(node, kind, usecase);
            default:
                assertUnreachable(node);
        }
    };
    ProfileParameterValidator.prototype.visitComlinkListLiteralNode = function (_node, _kind, _usecase) {
        throw new lib_1.UnexpectedError('Method not implemented.');
    };
    ProfileParameterValidator.prototype.visitComlinkObjectLiteralNode = function (_node, _kind, _usecase) {
        throw new lib_1.UnexpectedError('Method not implemented.');
    };
    ProfileParameterValidator.prototype.visitComlinkPrimitiveLiteralNode = function (_node, _kind, _usecase) {
        throw new lib_1.UnexpectedError('Method not implemented.');
    };
    ProfileParameterValidator.prototype.visitComlinkNoneLiteralNode = function (_node, _kind, _usecase) {
        throw new lib_1.UnexpectedError('Method not implemented.');
    };
    ProfileParameterValidator.prototype.visitComlinkAssignmentNode = function (_node, _kind, _usecase) {
        throw new lib_1.UnexpectedError('Method not implemented.');
    };
    ProfileParameterValidator.prototype.visitEnumDefinitionNode = function (node, kind, usecase) {
        var _this = this;
        return function (input) {
            var e_1, _a;
            if (lib_1.isNone(input)) {
                return [true];
            }
            try {
                for (var _b = __values(node.values), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var value = _c.value;
                    if (_this.visit(value, kind, usecase)(input)[0]) {
                        return [true];
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return [
                false,
                [{ kind: 'enumValue', context: { actual: JSON.stringify(input) } }],
            ];
        };
    };
    ProfileParameterValidator.prototype.visitEnumValueNode = function (node, _kind, _usecase) {
        return function (input) {
            if (input === node.value) {
                return [true];
            }
            else {
                return [false, []];
            }
        };
    };
    ProfileParameterValidator.prototype.visitFieldDefinitionNode = function (node, kind, usecase) {
        var _this = this;
        return function (input) {
            if (objectHasKey(input, node.fieldName)) {
                var fieldValue = objectHasKey(input, node.fieldName)
                    ? input[node.fieldName]
                    : undefined;
                if (node.type) {
                    return _this.visit(node.type, kind, usecase)(fieldValue);
                }
                if (_this.namedFieldDefinitions[node.fieldName] !== undefined) {
                    return _this.namedFieldDefinitions[node.fieldName](fieldValue);
                }
                return [true];
            }
            if (node.required) {
                return [false, [{ kind: 'missingRequired' }]];
            }
            else {
                return [true];
            }
        };
    };
    ProfileParameterValidator.prototype.visitListDefinitionNode = function (node, kind, usecase) {
        var _this = this;
        return function (input) {
            if (lib_1.isNone(input)) {
                return [true];
            }
            if (!Array.isArray(input)) {
                return [false, [{ kind: 'notArray', context: { input: input } }]];
            }
            var errors = [];
            var result = input.every(function (item) {
                var result = _this.visit(node.elementType, kind, usecase)(item);
                if (result[1]) {
                    errors.push.apply(errors, __spreadArray([], __read(result[1])));
                }
                return result[0];
            });
            if (result) {
                return [true];
            }
            else {
                return [
                    false,
                    [
                        {
                            kind: 'elementsInArrayWrong',
                            context: { suberrors: errors },
                        },
                    ],
                ];
            }
        };
    };
    ProfileParameterValidator.prototype.visitModelTypeNameNode = function (node, _kind, _usecase) {
        if (this.namedModelDefinitions[node.name] !== undefined) {
            return this.namedModelDefinitions[node.name];
        }
        throw new lib_1.UnexpectedError("Invalid model name: " + node.name);
    };
    ProfileParameterValidator.prototype.visitNamedFieldDefinitionNode = function (node, kind, usecase) {
        if (node.type) {
            return this.visit(node.type, kind, usecase);
        }
        else {
            return function () { return [true]; };
        }
    };
    ProfileParameterValidator.prototype.visitNamedModelDefinitionNode = function (node, kind, usecase) {
        if (node.type) {
            return this.visit(node.type, kind, usecase);
        }
        else {
            return function () { return [true]; };
        }
    };
    ProfileParameterValidator.prototype.visitNonNullDefinitionNode = function (node, kind, usecase) {
        var _this = this;
        return function (input) {
            if (lib_1.isNone(input)) {
                return [false, [{ kind: 'nullInNonNullable' }]];
            }
            return _this.visit(node.type, kind, usecase)(input);
        };
    };
    ProfileParameterValidator.prototype.visitObjectDefinitionNode = function (node, kind, usecase) {
        var _this = this;
        return function (input) {
            if (lib_1.isNone(input)) {
                return [true];
            }
            if (typeof input !== 'object') {
                return [
                    false,
                    [
                        {
                            kind: 'wrongType',
                            context: { expected: 'object', actual: typeof input },
                        },
                    ],
                ];
            }
            return node.fields.reduce(function (result, field) {
                var subresult = addPath(_this.visit(field, kind, usecase), field.fieldName)(input);
                if (subresult[0] === false) {
                    if (result[1]) {
                        return [
                            false,
                            __spreadArray(__spreadArray([], __read(result[1])), __read(profile_parameter_validator_errors_1.addFieldToErrors(subresult[1], field.fieldName))),
                        ];
                    }
                    else {
                        return [false, profile_parameter_validator_errors_1.addFieldToErrors(subresult[1], field.fieldName)];
                    }
                }
                return result;
            }, [true]);
        };
    };
    ProfileParameterValidator.prototype.visitPrimitiveTypeNameNode = function (node, _kind, _usecase) {
        return function (input) {
            if (lib_1.isNone(input)) {
                return [true];
            }
            switch (node.name) {
                case 'boolean':
                    if (typeof input === 'boolean') {
                        return [true];
                    }
                    else {
                        return [
                            false,
                            [
                                {
                                    kind: 'wrongType',
                                    context: { expected: 'boolean', actual: typeof input },
                                },
                            ],
                        ];
                    }
                case 'number':
                    if (typeof input === 'number') {
                        return [true];
                    }
                    else {
                        return [
                            false,
                            [
                                {
                                    kind: 'wrongType',
                                    context: { expected: 'number', actual: typeof input },
                                },
                            ],
                        ];
                    }
                case 'string':
                    if (typeof input === 'string') {
                        return [true];
                    }
                    else {
                        return [
                            false,
                            [
                                {
                                    kind: 'wrongType',
                                    context: { expected: 'string', actual: typeof input },
                                },
                            ],
                        ];
                    }
            }
        };
    };
    ProfileParameterValidator.prototype.visitProfileDocumentNode = function (node, kind, usecase) {
        var _this = this;
        var usecaseNode = node.definitions.find(function (definition) {
            return definition.kind === 'UseCaseDefinition' &&
                definition.useCaseName === usecase;
        });
        if (!usecaseNode) {
            throw new lib_1.UnexpectedError("Usecase " + usecase + " not found!");
        }
        if (!this.namedDefinitionsInitialized) {
            node.definitions
                .filter(ast_1.isNamedModelDefinitionNode)
                .forEach(function (definition) {
                _this.namedModelDefinitions[definition.modelName] = _this.visit(definition, kind, usecase);
            });
            node.definitions
                .filter(ast_1.isNamedFieldDefinitionNode)
                .forEach(function (definition) {
                _this.namedFieldDefinitions[definition.fieldName] = _this.visit(definition, kind, usecase);
            });
            this.namedDefinitionsInitialized = true;
        }
        return this.visit(usecaseNode, kind, usecase);
    };
    ProfileParameterValidator.prototype.visitProfileHeaderNode = function (_node, _kind, _usecase) {
        throw new lib_1.UnexpectedError('Method not implemented.');
    };
    ProfileParameterValidator.prototype.visitUnionDefinitionNode = function (node, kind, usecase) {
        var _this = this;
        return function (input) {
            var e_2, _a;
            var errors = [];
            try {
                for (var _b = __values(node.types), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var type = _c.value;
                    var result = _this.visit(type, kind, usecase)(input);
                    if (result[0]) {
                        return [true];
                    }
                    else {
                        errors.push.apply(errors, __spreadArray([], __read(result[1])));
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            var types = errors
                .filter(profile_parameter_validator_errors_1.isWrongTypeError)
                .map(function (err) { return err.context.expected; });
            return [false, [{ kind: 'wrongUnion', context: { expected: types } }]];
        };
    };
    ProfileParameterValidator.prototype.visitUseCaseDefinitionNode = function (node, kind, usecase) {
        var _this = this;
        if (kind === 'input' && node.input !== undefined) {
            return addPath(function (input) {
                if (lib_1.isNone(input)) {
                    return [false, [{ kind: 'nullInNonNullable' }]];
                }
                if (node.input !== undefined) {
                    return _this.visit(node.input.value, kind, usecase)(input);
                }
                return [true];
            }, 'input');
        }
        if (kind === 'result' && node.result) {
            return addPath(this.visit(node.result.value, kind, usecase), 'result');
        }
        // input or result isn't defined
        return function (input) {
            if (lib_1.isNone(input)) {
                return [true];
            }
            if (lib_1.isNonPrimitive(input) && Object.keys(input).length === 0) {
                return [true];
            }
            return [false, [{ kind: 'wrongInput' }]];
        };
    };
    ProfileParameterValidator.prototype.visitUseCaseExampleNode = function (_node, _kind, _usecase) {
        throw new lib_1.UnexpectedError('Method not implemented.');
    };
    ProfileParameterValidator.prototype.visitUseCaseSlotDefinitionNode = function (_node, _kind, _usecase) {
        throw new lib_1.UnexpectedError('Method not implemented.');
    };
    return ProfileParameterValidator;
}());
exports.ProfileParameterValidator = ProfileParameterValidator;
//# sourceMappingURL=profile-parameter-validator.js.map