import { ErrorBase } from '../../lib';
interface NetworkError {
    kind: 'network';
    issue: 'unsigned-ssl' | 'dns' | 'timeout' | 'reject';
}
interface RequestError {
    kind: 'request';
    issue: 'abort' | 'timeout';
}
export declare type FetchErrorIssue = NetworkError['issue'] | RequestError['issue'];
export declare class FetchErrorBase extends ErrorBase {
    kind: string;
    issue: FetchErrorIssue;
    constructor(kind: string, issue: FetchErrorIssue);
}
export declare class NetworkFetchError extends FetchErrorBase {
    issue: NetworkError['issue'];
    constructor(issue: NetworkError['issue']);
    get normalized(): NetworkError;
}
export declare class RequestFetchError extends FetchErrorBase {
    issue: RequestError['issue'];
    constructor(issue: RequestError['issue']);
    get normalized(): RequestError;
}
export declare type FetchError = NetworkFetchError | RequestFetchError;
export declare function isFetchError(input: unknown): input is FetchError;
export {};
