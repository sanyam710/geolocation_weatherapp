"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchMapAST = exports.fetchProfileAst = exports.fetchBind = exports.fetchProviderInfo = exports.assertIsRegistryProviderInfo = exports.isRegistryErrorBody = void 0;
var ast_1 = require("@superfaceai/ast");
var lib_1 = require("../../lib");
var errors_1 = require("../errors");
var interpreter_1 = require("../interpreter");
var DEBUG_NAMESPACE = 'registry';
function isRegistryErrorBody(input) {
    if (typeof input === 'object' && input !== null) {
        if ('title' in input) {
            var structuredInput = input;
            return (typeof structuredInput.title === 'string' &&
                (structuredInput.detail === undefined ||
                    typeof structuredInput.detail === 'string'));
        }
    }
    return false;
}
exports.isRegistryErrorBody = isRegistryErrorBody;
function assertIsRegistryProviderInfo(input, logger) {
    function isRecord(inp) {
        return typeof inp === 'object' && inp !== null;
    }
    function isDisco(inp) {
        return isRecord(inp) && 'disco' in inp;
    }
    function isRegistryProviderInfo(inp) {
        return (isRecord(inp) &&
            'url' in inp &&
            'registryId' in inp &&
            'serviceUrl' in inp &&
            'mappingUrl' in inp &&
            'semanticProfile' in inp);
    }
    if (!isDisco(input) ||
        !Array.isArray(input.disco) ||
        !input.disco.every(isRegistryProviderInfo)) {
        logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE, 'Invalid response from registry.');
        logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE, 'Received: %O', input);
        throw new lib_1.UnexpectedError('Invalid response from registry');
    }
}
exports.assertIsRegistryProviderInfo = assertIsRegistryProviderInfo;
function fetchProviderInfo(providerName, config, crypto, fetchInstance, logger) {
    return __awaiter(this, void 0, void 0, function () {
        function assertProperties(obj) {
            if (typeof obj !== 'object' ||
                obj === null ||
                'definition' in obj === false) {
                throw errors_1.unknownProviderInfoError({
                    message: 'Registry responded with invalid body',
                    body: obj,
                    provider: providerName,
                    statusCode: statusCode,
                });
            }
        }
        var http, sdkToken, _a, body, statusCode;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    http = new interpreter_1.HttpClient(fetchInstance, crypto, logger);
                    sdkToken = config.sdkAuthToken;
                    logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE, "Fetching provider " + providerName + " from registry");
                    return [4 /*yield*/, http.request("/providers/" + providerName, {
                            method: 'GET',
                            headers: sdkToken !== undefined
                                ? { Authorization: "SUPERFACE-SDK-TOKEN " + sdkToken }
                                : undefined,
                            baseUrl: config.superfaceApiUrl,
                            accept: 'application/json',
                            contentType: 'application/json',
                        })];
                case 1:
                    _a = _b.sent(), body = _a.body, statusCode = _a.statusCode;
                    assertProperties(body);
                    if (!ast_1.isProviderJson(body.definition)) {
                        throw errors_1.unknownProviderInfoError({
                            message: 'Registry responded with invalid ProviderJson definition',
                            body: body.definition,
                            provider: providerName,
                            statusCode: statusCode,
                        });
                    }
                    return [2 /*return*/, body.definition];
            }
        });
    });
}
exports.fetchProviderInfo = fetchProviderInfo;
function parseBindResponse(request, response) {
    function assertProperties(obj) {
        if (typeof obj !== 'object' ||
            obj === null ||
            'provider' in obj === false ||
            'map_ast' in obj === false) {
            throw errors_1.unknownBindResponseError(__assign(__assign({}, request), { statusCode: response.statusCode, body: response.body }));
        }
    }
    if (response.statusCode !== 200) {
        if (isRegistryErrorBody(response.body)) {
            throw errors_1.bindResponseError(__assign(__assign({}, request), { statusCode: response.statusCode, title: response.body.title, detail: response.body.detail }));
        }
        throw errors_1.unknownBindResponseError(__assign(__assign({}, request), { statusCode: response.statusCode, body: response.body }));
    }
    assertProperties(response.body);
    var mapAst;
    try {
        mapAst = ast_1.assertMapDocumentNode(JSON.parse(response.body.map_ast));
    }
    catch (error) {
        mapAst = undefined;
    }
    var provider;
    try {
        provider = ast_1.assertProviderJson(response.body.provider);
    }
    catch (error) {
        throw errors_1.invalidProviderResponseError(error);
    }
    return {
        provider: provider,
        mapAst: mapAst,
    };
}
function fetchBind(request, config, crypto, fetchInstance, logger) {
    return __awaiter(this, void 0, void 0, function () {
        var http, sdkToken, fetchResponse;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    http = new interpreter_1.HttpClient(fetchInstance, crypto, logger);
                    sdkToken = config.sdkAuthToken;
                    logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE, 'Binding SDK to registry');
                    return [4 /*yield*/, http.request('/registry/bind', {
                            method: 'POST',
                            headers: sdkToken !== undefined
                                ? { Authorization: "SUPERFACE-SDK-TOKEN " + sdkToken }
                                : undefined,
                            baseUrl: config.superfaceApiUrl,
                            accept: 'application/json',
                            contentType: 'application/json',
                            body: {
                                profile_id: request.profileId,
                                provider: request.provider,
                                map_variant: request.mapVariant,
                                map_revision: request.mapRevision,
                            },
                        })];
                case 1:
                    fetchResponse = _a.sent();
                    return [2 /*return*/, parseBindResponse(__assign(__assign({}, request), { apiUrl: config.superfaceApiUrl }), fetchResponse)];
            }
        });
    });
}
exports.fetchBind = fetchBind;
function fetchProfileAst(profileId, config, crypto, fetchInstance, logger) {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var http, sdkToken, _b, body, headers, statusCode;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    http = new interpreter_1.HttpClient(fetchInstance, crypto, logger);
                    sdkToken = config.sdkAuthToken;
                    logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE, "Getting AST of profile: \"" + profileId + "\"");
                    return [4 /*yield*/, http.request("/" + profileId, {
                            method: 'GET',
                            headers: sdkToken !== undefined
                                ? { Authorization: "SUPERFACE-SDK-TOKEN " + sdkToken }
                                : undefined,
                            baseUrl: config.superfaceApiUrl,
                            accept: 'application/vnd.superface.profile+json',
                        })];
                case 1:
                    _b = _c.sent(), body = _b.body, headers = _b.headers, statusCode = _b.statusCode;
                    if (((_a = headers['content-type']) !== null && _a !== void 0 ? _a : '').includes(interpreter_1.JSON_PROBLEM_CONTENT)) {
                        throw errors_1.invalidResponseError(statusCode, body);
                    }
                    return [2 /*return*/, ast_1.assertProfileDocumentNode(JSON.parse(body))];
            }
        });
    });
}
exports.fetchProfileAst = fetchProfileAst;
function fetchMapAST(mapId, config, crypto, fetchInstance, logger) {
    return __awaiter(this, void 0, void 0, function () {
        var http, sdkToken, body;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    http = new interpreter_1.HttpClient(fetchInstance, crypto, logger);
                    sdkToken = config.sdkAuthToken;
                    logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE, "Getting source of map: \"" + mapId + "\"");
                    return [4 /*yield*/, http.request("/" + mapId, {
                            method: 'GET',
                            headers: sdkToken !== undefined
                                ? { Authorization: "SUPERFACE-SDK-TOKEN " + sdkToken }
                                : undefined,
                            baseUrl: config.superfaceApiUrl,
                            accept: 'application/vnd.superface.map+json',
                        })];
                case 1:
                    body = (_a.sent()).body;
                    return [2 /*return*/, ast_1.assertMapDocumentNode(JSON.parse(body))];
            }
        });
    });
}
exports.fetchMapAST = fetchMapAST;
//# sourceMappingURL=registry.js.map