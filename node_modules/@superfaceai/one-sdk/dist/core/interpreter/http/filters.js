"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isCompleteHttpRequest = exports.prepareRequestFilter = exports.headersFilter = exports.methodFilter = exports.queryParametersFilter = exports.bodyFilter = exports.urlFilter = exports.handleResponseFilter = exports.authenticateFilter = exports.fetchFilter = exports.withResponse = exports.withRequest = void 0;
var interfaces_1 = require("../../../interfaces");
var lib_1 = require("../../../lib");
var user_agent_1 = require("../../../user-agent");
var errors_1 = require("../../errors");
var interfaces_2 = require("./interfaces");
var utils_1 = require("./utils");
/**
 * Asserts that given filter gets called with request present in input
 */
var withRequest = function (filter) {
    return function (_a) {
        var response = _a.response, request = _a.request, parameters = _a.parameters;
        return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_b) {
                if (request === undefined || !isCompleteHttpRequest(request)) {
                    throw new lib_1.UnexpectedError('Request is not complete', request);
                }
                return [2 /*return*/, filter({ response: response, request: request, parameters: parameters })];
            });
        });
    };
};
exports.withRequest = withRequest;
/**
 * Asserts that given filter gets called with response present in input
 */
var withResponse = function (filter) {
    return function (_a) {
        var response = _a.response, request = _a.request, parameters = _a.parameters;
        return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_b) {
                if (response === undefined) {
                    throw new lib_1.UnexpectedError('Response in HTTP Request is undefined.');
                }
                return [2 /*return*/, filter({ response: response, request: request, parameters: parameters })];
            });
        });
    };
};
exports.withResponse = withResponse;
var fetchFilter = function (fetchInstance, logger) {
    return function (_a) {
        var parameters = _a.parameters, request = _a.request;
        return __awaiter(void 0, void 0, void 0, function () {
            var _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _b = {
                            parameters: parameters,
                            request: request
                        };
                        return [4 /*yield*/, utils_1.fetchRequest(fetchInstance, request, logger)];
                    case 1: return [2 /*return*/, (_b.response = _c.sent(),
                            _b)];
                }
            });
        });
    };
};
exports.fetchFilter = fetchFilter;
var authenticateFilter = function (handler) {
    return function (_a) {
        var parameters = _a.parameters, request = _a.request, response = _a.response;
        return __awaiter(void 0, void 0, void 0, function () {
            var _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!(handler !== undefined)) return [3 /*break*/, 2];
                        _b = {};
                        return [4 /*yield*/, handler.authenticate(parameters)];
                    case 1: return [2 /*return*/, (_b.parameters = _c.sent(),
                            _b.request = request,
                            _b.response = response,
                            _b)];
                    case 2: return [2 /*return*/, {
                            parameters: parameters,
                            request: request,
                            response: response,
                        }];
                }
            });
        });
    };
};
exports.authenticateFilter = authenticateFilter;
// This is handling the cases when we are authenticated but eg. digest credentials expired or OAuth access token is no longer valid
var handleResponseFilter = function (fetchInstance, logger, handler) {
    return function (_a) {
        var parameters = _a.parameters, request = _a.request, response = _a.response;
        return __awaiter(void 0, void 0, void 0, function () {
            var authRequest;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!((handler === null || handler === void 0 ? void 0 : handler.handleResponse) !== undefined)) return [3 /*break*/, 3];
                        return [4 /*yield*/, handler.handleResponse(response, parameters)];
                    case 1:
                        authRequest = _b.sent();
                        if (!(authRequest !== undefined)) return [3 /*break*/, 3];
                        return [4 /*yield*/, utils_1.fetchRequest(fetchInstance, authRequest, logger)];
                    case 2:
                        response = _b.sent();
                        _b.label = 3;
                    case 3: return [2 /*return*/, { parameters: parameters, request: request, response: response }];
                }
            });
        });
    };
};
exports.handleResponseFilter = handleResponseFilter;
var urlFilter = function (_a) {
    var _b;
    var parameters = _a.parameters, request = _a.request, response = _a.response;
    var url = utils_1.createUrl(parameters.url, {
        baseUrl: parameters.baseUrl,
        pathParameters: (_b = parameters.pathParameters) !== null && _b !== void 0 ? _b : {},
        integrationParameters: parameters.integrationParameters,
    });
    return {
        parameters: parameters,
        request: __assign(__assign({}, (request !== null && request !== void 0 ? request : {})), { url: url }),
        response: response,
    };
};
exports.urlFilter = urlFilter;
var bodyFilter = function (_a) {
    var _b;
    var parameters = _a.parameters, request = _a.request, response = _a.response;
    var finalBody;
    if (parameters.body !== undefined) {
        if (parameters.contentType === interfaces_2.JSON_CONTENT) {
            finalBody = interfaces_2.stringBody(JSON.stringify(parameters.body));
        }
        else if (parameters.contentType === interfaces_2.URLENCODED_CONTENT) {
            finalBody = interfaces_2.urlSearchParamsBody(lib_1.variablesToStrings(lib_1.castToNonPrimitive(parameters.body)));
        }
        else if (parameters.contentType === interfaces_2.FORMDATA_CONTENT) {
            finalBody = interfaces_2.formDataBody(lib_1.castToNonPrimitive(parameters.body));
        }
        else if (parameters.contentType !== undefined &&
            interfaces_2.BINARY_CONTENT_REGEXP.test(parameters.contentType)) {
            var data = void 0;
            if (Buffer.isBuffer(parameters.body) || interfaces_1.isBinaryData(parameters.body)) {
                data = parameters.body;
            }
            else {
                // convert to string then buffer
                data = Buffer.from(String(parameters.body));
            }
            finalBody = interfaces_2.binaryBody(data);
        }
        else {
            var supportedTypes = __spreadArray([
                interfaces_2.JSON_CONTENT,
                interfaces_2.URLENCODED_CONTENT,
                interfaces_2.FORMDATA_CONTENT
            ], __read(interfaces_2.BINARY_CONTENT_TYPES));
            throw errors_1.unsupportedContentType((_b = parameters.contentType) !== null && _b !== void 0 ? _b : '', supportedTypes);
        }
    }
    return {
        parameters: parameters,
        request: __assign(__assign({}, (request !== null && request !== void 0 ? request : {})), { body: finalBody }),
        response: response,
    };
};
exports.bodyFilter = bodyFilter;
var queryParametersFilter = function (_a) {
    var _b;
    var parameters = _a.parameters, response = _a.response, request = _a.request;
    var queryParameters = __assign(__assign({}, request === null || request === void 0 ? void 0 : request.queryParameters), ((_b = parameters.queryParameters) !== null && _b !== void 0 ? _b : {}));
    return {
        parameters: parameters,
        response: response,
        request: __assign(__assign({}, (request !== null && request !== void 0 ? request : {})), { queryParameters: queryParameters }),
    };
};
exports.queryParametersFilter = queryParametersFilter;
var methodFilter = function (_a) {
    var parameters = _a.parameters, request = _a.request, response = _a.response;
    var method = parameters.method;
    return {
        parameters: parameters,
        request: __assign(__assign({}, (request !== null && request !== void 0 ? request : {})), { method: method }),
        response: response,
    };
};
exports.methodFilter = methodFilter;
var headersFilter = function (_a) {
    var _b, _c, _d;
    var parameters = _a.parameters, request = _a.request, response = _a.response;
    var headers = (_b = parameters.headers) !== null && _b !== void 0 ? _b : {};
    utils_1.setHeader(headers, 'user-agent', user_agent_1.USER_AGENT);
    utils_1.setHeader(headers, 'accept', (_c = parameters.accept) !== null && _c !== void 0 ? _c : '*/*');
    if (parameters.contentType === interfaces_2.JSON_CONTENT) {
        utils_1.setHeader(headers, 'content-type', interfaces_2.JSON_CONTENT);
    }
    else if (parameters.contentType === interfaces_2.URLENCODED_CONTENT) {
        utils_1.setHeader(headers, 'content-type', interfaces_2.URLENCODED_CONTENT);
    }
    else if (parameters.contentType === interfaces_2.FORMDATA_CONTENT) {
        // NOTE: Do not set content-type explicitly, it will be read from FormData along with boundary
    }
    else if (parameters.contentType !== undefined &&
        interfaces_2.BINARY_CONTENT_REGEXP.test(parameters.contentType)) {
        utils_1.setHeader(headers, 'content-type', parameters.contentType);
    }
    else {
        if (parameters.body !== undefined) {
            var supportedTypes = __spreadArray([
                interfaces_2.JSON_CONTENT,
                interfaces_2.URLENCODED_CONTENT,
                interfaces_2.FORMDATA_CONTENT
            ], __read(interfaces_2.BINARY_CONTENT_TYPES));
            throw errors_1.unsupportedContentType((_d = parameters.contentType) !== null && _d !== void 0 ? _d : '', supportedTypes);
        }
    }
    return {
        parameters: parameters,
        request: __assign(__assign({}, request), { headers: __assign(__assign({}, request === null || request === void 0 ? void 0 : request.headers), headers) }),
        response: response,
    };
};
exports.headersFilter = headersFilter;
var prepareRequestFilter = function (input) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, lib_1.pipe(input, exports.urlFilter, exports.bodyFilter, exports.queryParametersFilter, exports.methodFilter, exports.headersFilter)];
    });
}); };
exports.prepareRequestFilter = prepareRequestFilter;
function isCompleteHttpRequest(input) {
    if (typeof input.url !== 'string') {
        return false;
    }
    if (typeof input.method !== 'string') {
        return false;
    }
    if (input.headers !== undefined) {
        if (typeof input.headers !== 'object') {
            return false;
        }
        if (!Object.keys(input.headers).every(function (key) { return typeof key === 'string'; })) {
            return false;
        }
        if (!Object.values(input.headers).every(function (value) { return typeof value === 'string' || Array.isArray(value); })) {
            return false;
        }
    }
    if (input.queryParameters !== undefined) {
        if (typeof input.queryParameters !== 'object') {
            return false;
        }
        if (!Object.keys(input.queryParameters).every(function (key) { return typeof key === 'string'; })) {
            return false;
        }
        if (!Object.values(input.queryParameters).every(function (value) { return typeof value === 'string' || Array.isArray(value); })) {
            return false;
        }
    }
    if (input.body !== undefined &&
        !(interfaces_2.isStringBody(input.body) ||
            interfaces_2.isFormDataBody(input.body) ||
            interfaces_2.isUrlSearchParamsBody(input.body) ||
            interfaces_2.isBinaryBody(input.body))) {
        return false;
    }
    return true;
}
exports.isCompleteHttpRequest = isCompleteHttpRequest;
//# sourceMappingURL=filters.js.map