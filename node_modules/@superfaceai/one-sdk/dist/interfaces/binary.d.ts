/// <reference types="node" />
export interface IDataContainer {
    read(size?: number): Promise<Uint8Array>;
    toStream(): NodeJS.ReadableStream;
}
export interface IBinaryData {
    peek(size?: number): Promise<Uint8Array>;
    read(size?: number): Promise<Uint8Array>;
    getAllData(): Promise<Uint8Array>;
    chunkBy(chunkSize: number): AsyncIterable<Uint8Array>;
    toStream(): NodeJS.ReadableStream;
}
export interface IInitializable {
    initialize(): Promise<void>;
}
export interface IDestructible {
    destroy(): Promise<void>;
}
export interface IBinaryDataMeta {
    readonly name: string | undefined;
    readonly mimetype: string | undefined;
    readonly size: number | undefined;
}
export declare function isBinaryData(input: unknown): input is IBinaryData;
export declare function isInitializable(input: unknown): input is IInitializable;
export declare function isDestructible(input: unknown): input is IDestructible;
export declare function isBinaryDataMeta(input: unknown): input is IBinaryDataMeta;
