export declare const IDENTIFIER_RE: RegExp;
export declare const IDENTIFIER_RE_SOURCE: string;
export declare const DOCUMENT_NAME_RE: RegExp;
export declare const DOCUMENT_NAME_RE_SOURCE: string;
export declare const VERSION_NUMBER_RE: RegExp;
export declare function isValidIdentifier(input: string): boolean;
export declare function isValidDocumentName(input: string): boolean;
export declare type Guard<T> = (input: unknown) => input is T;
export declare type Assert<T> = (input: unknown) => asserts input is T;
/**
 * Checks if input string is valid version string.
 *
 * Example:
 * ```
 * isValidVersionString('1.2.3') // true
 * isValidVersionString('1.2.3-test') // true
 * ```
 */
export declare function isValidVersionString(version: string): boolean;
/**
 * Tries to extract valid version string from input string contining @.
 *
 * Example:
 * ```
 * extractVersionString('test/test@1.2.3') // '1.2.3'
 * ```
 */
export declare function extractVersionString(input: string): string;
/**
 * Tries to parse numeric string (0-9) to number.
 *
 * Example:
 * ```
 * parseVersionNumber('3') // 3
 * parseVersionNumber(' 3 ') // 3
 * ```
 */
export declare function parseVersionNumber(str: string): number;
/**
 * Tries to extract version object from version string.
 *
 * Example:
 * ```
 * parseVersionNumber('1.2.3') // {major: 1, minor: 2, patch: 3}
 * parseVersionNumber('1.2.3-test') // {major: 1, minor: 2, patch: 3, label: 'test'}
 * ```
 */
export declare function extractVersion(versionString: string): {
    major: number;
    minor?: number;
    patch?: number;
    label?: string;
};
