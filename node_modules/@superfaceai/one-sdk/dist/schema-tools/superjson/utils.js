"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.composeFileURI = exports.trimFileURI = exports.loadSuperJson = exports.loadSuperJsonSync = exports.parseSuperJson = exports.detectSuperJson = exports.META_FILE = exports.SUPERFACE_DIR = void 0;
var ast_1 = require("@superfaceai/ast");
var lib_1 = require("../../lib");
var errors_helpers_1 = require("./errors.helpers");
var DEBUG_NAMESPACE = 'superjson';
exports.SUPERFACE_DIR = 'superface';
exports.META_FILE = 'super.json';
/**
 * Detects the existence of a `super.json` file in specified number of levels
 * of parent directories.
 *
 * @param cwd - currently scanned working directory
 *
 * Returns relative path to a directory where `super.json` is detected.
 */
function detectSuperJson(cwd, fileSystem, level) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fileSystem.isAccessible(fileSystem.path.join(cwd, exports.META_FILE))];
                case 1:
                    // check whether super.json is accessible in cwd
                    if (_a.sent()) {
                        return [2 /*return*/, fileSystem.path.normalize(fileSystem.path.relative(fileSystem.path.cwd(), cwd))];
                    }
                    return [4 /*yield*/, fileSystem.isAccessible(fileSystem.path.join(cwd, exports.SUPERFACE_DIR, exports.META_FILE))];
                case 2:
                    // check whether super.json is accessible in cwd/superface
                    if (_a.sent()) {
                        return [2 /*return*/, fileSystem.path.normalize(fileSystem.path.relative(fileSystem.path.cwd(), fileSystem.path.join(cwd, exports.SUPERFACE_DIR)))];
                    }
                    // default behaviour - do not scan outside cwd
                    if (level === undefined || level < 1) {
                        return [2 /*return*/, undefined];
                    }
                    // check if user has permissions outside cwd
                    cwd = fileSystem.path.join(cwd, '..');
                    return [4 /*yield*/, fileSystem.isAccessible(cwd)];
                case 3:
                    if (!(_a.sent())) {
                        return [2 /*return*/, undefined];
                    }
                    return [4 /*yield*/, detectSuperJson(cwd, fileSystem, --level)];
                case 4: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.detectSuperJson = detectSuperJson;
function parseSuperJson(input) {
    try {
        var superdocument = ast_1.assertSuperJsonDocument(input);
        return lib_1.ok(superdocument);
    }
    catch (e) {
        return lib_1.err(errors_helpers_1.superJsonFormatError(lib_1.ensureErrorSubclass(e)));
    }
}
exports.parseSuperJson = parseSuperJson;
function loadSuperJsonSync(path, fileSystem, logger) {
    try {
        if (!fileSystem.sync.isAccessible(path)) {
            return lib_1.err(errors_helpers_1.superJsonNotFoundError(path));
        }
        if (!fileSystem.sync.isFile(path)) {
            return lib_1.err(errors_helpers_1.superJsonNotAFileError(path));
        }
    }
    catch (e) {
        return lib_1.err(errors_helpers_1.superJsonNotFoundError(path, lib_1.ensureErrorSubclass(e)));
    }
    var superjson;
    var superraw = fileSystem.sync.readFile(path);
    if (superraw.isOk()) {
        superjson = JSON.parse(superraw.value);
    }
    else {
        return lib_1.err(errors_helpers_1.superJsonReadError(lib_1.ensureErrorSubclass(superraw.error)));
    }
    var superdocument = parseSuperJson(superjson);
    if (superdocument.isErr()) {
        return lib_1.err(superdocument.error);
    }
    logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE, "loaded super.json from " + path);
    return superdocument;
}
exports.loadSuperJsonSync = loadSuperJsonSync;
/**
 * Attempts to load super.json file at `path`
 */
function loadSuperJson(path, fileSystem, logger) {
    return __awaiter(this, void 0, void 0, function () {
        var e_1, superjson, superraw, superdocument;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 3, , 4]);
                    return [4 /*yield*/, fileSystem.isAccessible(path)];
                case 1:
                    if (!(_a.sent())) {
                        return [2 /*return*/, lib_1.err(errors_helpers_1.superJsonNotFoundError(path))];
                    }
                    return [4 /*yield*/, fileSystem.isFile(path)];
                case 2:
                    if (!(_a.sent())) {
                        return [2 /*return*/, lib_1.err(errors_helpers_1.superJsonNotAFileError(path))];
                    }
                    return [3 /*break*/, 4];
                case 3:
                    e_1 = _a.sent();
                    return [2 /*return*/, lib_1.err(errors_helpers_1.superJsonNotFoundError(path, lib_1.ensureErrorSubclass(e_1)))];
                case 4: return [4 /*yield*/, fileSystem.readFile(path)];
                case 5:
                    superraw = _a.sent();
                    if (superraw.isOk()) {
                        superjson = JSON.parse(superraw.value);
                    }
                    else {
                        return [2 /*return*/, lib_1.err(errors_helpers_1.superJsonReadError(lib_1.ensureErrorSubclass(superraw.error)))];
                    }
                    superdocument = parseSuperJson(superjson);
                    if (superdocument.isErr()) {
                        return [2 /*return*/, lib_1.err(superdocument.error)];
                    }
                    logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE, "loaded super.json from " + path);
                    return [2 /*return*/, superdocument];
            }
        });
    });
}
exports.loadSuperJson = loadSuperJson;
var trimFileURI = function (path) {
    return path.replace(ast_1.FILE_URI_REGEX, '');
};
exports.trimFileURI = trimFileURI;
var composeFileURI = function (path, normalize) {
    if (ast_1.isFileURIString(path)) {
        return path;
    }
    var normalized = normalize(path);
    return path.startsWith('../')
        ? "" + ast_1.FILE_URI_PROTOCOL + normalized
        : ast_1.FILE_URI_PROTOCOL + "./" + normalized;
};
exports.composeFileURI = composeFileURI;
//# sourceMappingURL=utils.js.map