"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getHeaderMulti = exports.deleteHeader = exports.setHeader = exports.hasHeader = exports.getHeader = exports.fetchRequest = exports.createUrl = exports.variablesToHttpMap = void 0;
var lib_1 = require("../../../lib");
var errors_1 = require("../../errors");
var DEBUG_NAMESPACE = 'http';
var DEBUG_NAMESPACE_SENSITIVE = 'http:sensitive';
function tryToHttpString(variable) {
    if (typeof variable === 'string') {
        return variable;
    }
    if (typeof variable === 'number' || typeof variable === 'boolean') {
        return variable.toString();
    }
    return undefined;
}
function variablesToHttpMap(variables) {
    var e_1, _a, e_2, _b;
    var result = {};
    try {
        for (var _c = __values(Object.entries(variables)), _d = _c.next(); !_d.done; _d = _c.next()) {
            var _f = __read(_d.value, 2), key = _f[0], value = _f[1];
            if (lib_1.isNone(value)) {
                continue;
            }
            if (Array.isArray(value)) {
                // arrays are filtered, only allowing values convertible to http string
                var filtered = [];
                try {
                    for (var value_1 = (e_2 = void 0, __values(value)), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                        var element = value_1_1.value;
                        if (lib_1.isNone(element)) {
                            continue;
                        }
                        var httpVal = tryToHttpString(element);
                        if (typeof httpVal === 'string') {
                            filtered.push(httpVal);
                        }
                        else {
                            return lib_1.err([key, element]);
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (value_1_1 && !value_1_1.done && (_b = value_1.return)) _b.call(value_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                // and only actually set the key if there is anything in the array
                if (filtered.length > 0) {
                    result[key] = filtered;
                }
            }
            else {
                var httpValue = tryToHttpString(value);
                if (httpValue === undefined) {
                    return lib_1.err([key, value]);
                }
                // values convertible to http string go in
                result[key] = httpValue;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return lib_1.ok(result);
}
exports.variablesToHttpMap = variablesToHttpMap;
function replaceParameters(url, parameters) {
    var e_3, _a;
    var result = '';
    var lastIndex = 0;
    var allKeys = [];
    var invalidKeys = [];
    var regex = RegExp('{([^}]*)}', 'g');
    try {
        for (var _b = __values(url.matchAll(regex)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var match = _c.value;
            var start = match.index;
            // Why can this be undefined?
            if (start === undefined) {
                throw new lib_1.UnexpectedError('Invalid regex match state - missing start index');
            }
            var end = start + match[0].length;
            var key = match[1].trim();
            var value = void 0;
            try {
                value = tryToHttpString(lib_1.indexRecord(parameters, key.split('.')));
            }
            catch (_e) {
                value = undefined;
            }
            allKeys.push(key);
            if (value === undefined) {
                invalidKeys.push(key);
                continue;
            }
            result += url.slice(lastIndex, start);
            result += value;
            lastIndex = end;
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_3) throw e_3.error; }
    }
    result += url.slice(lastIndex);
    if (invalidKeys.length > 0) {
        var available = lib_1.recursiveKeyList(parameters !== null && parameters !== void 0 ? parameters : {}, function (value) { return tryToHttpString(value) !== undefined; });
        throw errors_1.invalidPathReplacementError(invalidKeys, url, allKeys, available);
    }
    return result;
}
var createUrl = function (inputUrl, parameters) {
    var _a, _b;
    var baseUrl = replaceParameters(parameters.baseUrl, (_a = parameters.integrationParameters) !== null && _a !== void 0 ? _a : {});
    if (inputUrl === '') {
        return baseUrl;
    }
    var isRelative = /^\/([^/]|$)/.test(inputUrl);
    if (!isRelative) {
        throw new lib_1.UnexpectedError('Expected relative url, but received absolute!');
    }
    var url = replaceParameters(inputUrl, (_b = parameters.pathParameters) !== null && _b !== void 0 ? _b : {});
    return baseUrl.replace(/\/+$/, '') + url;
};
exports.createUrl = createUrl;
function logHeaders(log, headers) {
    Object.entries(headers).forEach(function (_a) {
        var e_4, _b;
        var _c = __read(_a, 2), headerName = _c[0], value = _c[1];
        var valueArray = value;
        if (!Array.isArray(value)) {
            valueArray = [value];
        }
        try {
            for (var valueArray_1 = __values(valueArray), valueArray_1_1 = valueArray_1.next(); !valueArray_1_1.done; valueArray_1_1 = valueArray_1.next()) {
                var val = valueArray_1_1.value;
                log("\t" + headerName + ": " + val);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (valueArray_1_1 && !valueArray_1_1.done && (_b = valueArray_1.return)) _b.call(valueArray_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
    });
}
function logRequest(log, request) {
    var _a;
    var url = request.url;
    if (request.queryParameters !== undefined &&
        Object.keys(request.queryParameters).length > 0) {
        var searchParams = new URLSearchParams(request.queryParameters);
        url = url + "?" + searchParams.toString();
    }
    log("\t" + request.method + " " + url + " HTTP/1.1");
    logHeaders(log, (_a = request.headers) !== null && _a !== void 0 ? _a : {});
    if (request.body !== undefined) {
        log('\n\t%O', request.body);
    }
}
function logResponse(log, response) {
    log("\tHTTP/1.1 " + response.status + " " + response.statusText);
    logHeaders(log, response.headers);
    log('\n\t%j\n', response.body);
}
function fetchRequest(fetchInstance, request, logger) {
    return __awaiter(this, void 0, void 0, function () {
        var log, logSensitive, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    log = logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE);
                    logSensitive = logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE_SENSITIVE);
                    log === null || log === void 0 ? void 0 : log('Executing HTTP Call');
                    if ((logSensitive === null || logSensitive === void 0 ? void 0 : logSensitive.enabled) === true) {
                        // secrets might appear in headers, url path, query parameters or body
                        logRequest(logSensitive, request);
                    }
                    return [4 /*yield*/, fetchInstance.fetch(request.url, request)];
                case 1:
                    response = _a.sent();
                    log === null || log === void 0 ? void 0 : log('Received response');
                    if ((logSensitive === null || logSensitive === void 0 ? void 0 : logSensitive.enabled) === true) {
                        logResponse(logSensitive, response);
                    }
                    return [2 /*return*/, {
                            statusCode: response.status,
                            body: response.body,
                            headers: response.headers,
                            debug: {
                                request: {
                                    url: request.url,
                                    headers: response.headers,
                                    body: request.body,
                                },
                            },
                        }];
            }
        });
    });
}
exports.fetchRequest = fetchRequest;
// TODO: where is this actually used?
/**
 * Get header value. For duplicate headers all delimited by `,` are returned
 */
function getHeader(headers, headerName) {
    var values = Object.entries(headers)
        .flatMap(function (_a) {
        var _b = __read(_a, 2), key = _b[0], value = _b[1];
        if (key.toLowerCase() === headerName.toLowerCase()) {
            return value;
        }
        return undefined;
    })
        .filter(function (value) { return value !== undefined; });
    return values.join(', ');
}
exports.getHeader = getHeader;
/**
 * Checks in case-insensitive way if the given header is present
 */
function hasHeader(headers, headerName) {
    return Object.keys(headers).some(function (header) { return header.toLowerCase() === headerName.toLowerCase(); });
}
exports.hasHeader = hasHeader;
function setHeader(headers, headerName, value) {
    if (!hasHeader(headers, headerName)) {
        headers[headerName] = value;
    }
}
exports.setHeader = setHeader;
/**
 * Deletes header
 */
function deleteHeader(headers, headerName) {
    Object.keys(headers).forEach(function (header) {
        if (header.toLowerCase() === headerName.toLowerCase()) {
            delete headers[header];
        }
    });
}
exports.deleteHeader = deleteHeader;
/** Returns case-insensitive header value(s) from multimap. */
function getHeaderMulti(map, headerKey) {
    var e_5, _a;
    try {
        for (var _b = __values(Object.entries(map)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
            if (key.toLowerCase() === headerKey.toLowerCase()) {
                if (!Array.isArray(value)) {
                    return [value];
                }
                else {
                    return value;
                }
            }
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_5) throw e_5.error; }
    }
    return undefined;
}
exports.getHeaderMulti = getHeaderMulti;
//# sourceMappingURL=utils.js.map