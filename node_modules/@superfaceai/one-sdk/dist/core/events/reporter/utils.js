"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hashSuperJson = exports.anonymizeSuperJson = void 0;
var lib_1 = require("../../../lib");
function anonymizeSuperJson(document) {
    var e_1, _a, e_2, _b;
    var profiles = {};
    try {
        for (var _c = __values(Object.entries(document.profiles)), _d = _c.next(); !_d.done; _d = _c.next()) {
            var _e = __read(_d.value, 2), profile = _e[0], profileEntry = _e[1];
            var providers = [];
            var _loop_1 = function (provider, providerEntry) {
                var anonymizedProvider = {
                    provider: provider,
                    version: 'unknown',
                };
                var providerPriority = profileEntry.priority.findIndex(function (providerName) { return provider === providerName; });
                if (providerPriority > -1) {
                    anonymizedProvider.priority = providerPriority;
                }
                if ('file' in providerEntry) {
                    anonymizedProvider.version = 'file';
                }
                else if ('mapRevision' in providerEntry &&
                    providerEntry.mapRevision !== undefined) {
                    anonymizedProvider.version = providerEntry.mapRevision;
                    if (providerEntry.mapVariant !== undefined) {
                        anonymizedProvider.version += "-" + providerEntry.mapVariant;
                    }
                }
                providers.push(anonymizedProvider);
            };
            try {
                for (var _f = (e_2 = void 0, __values(Object.entries(profileEntry.providers))), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var _h = __read(_g.value, 2), provider = _h[0], providerEntry = _h[1];
                    _loop_1(provider, providerEntry);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                }
                finally { if (e_2) throw e_2.error; }
            }
            profiles[profile] = {
                version: 'version' in profileEntry ? profileEntry.version : 'file',
                providers: providers,
            };
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return {
        profiles: profiles,
        providers: Object.keys(document.providers),
    };
}
exports.anonymizeSuperJson = anonymizeSuperJson;
function hashSuperJson(document, crypto) {
    var e_3, _a;
    // <profile>:<version>,<provider>:<priority>:[<version | file>],<provider>:<path>
    var anonymized = anonymizeSuperJson(document);
    var profileValues = [];
    try {
        for (var _b = __values(Object.entries(anonymized.profiles)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = __read(_c.value, 2), profile = _d[0], profileEntry = _d[1];
            var providers = Object.entries(profileEntry.providers).map(function (_a) {
                var _b = __read(_a, 2), provider = _b[0], providerEntry = _b[1];
                return __spreadArray([
                    provider,
                    providerEntry.priority
                ], __read((providerEntry.version !== undefined
                    ? [providerEntry.version]
                    : []))).join(':');
            });
            // sort by provider name to be reproducible
            providers.sort();
            profileValues.push(__spreadArray([profile + ":" + profileEntry.version], __read(providers)).join(','));
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_3) throw e_3.error; }
    }
    // sort by profile name to be reproducible
    profileValues.sort();
    // Copy and sort
    var providerValues = anonymized.providers.map(function (provider) { return provider; }).sort();
    return lib_1.configHash(__spreadArray(__spreadArray([], __read(profileValues)), __read(providerValues)), crypto);
}
exports.hashSuperJson = hashSuperJson;
//# sourceMappingURL=utils.js.map