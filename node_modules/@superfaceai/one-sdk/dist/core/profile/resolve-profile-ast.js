"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveProfileAst = void 0;
var ast_1 = require("@superfaceai/ast");
var lib_1 = require("../../lib");
var errors_1 = require("../errors");
var registry_1 = require("../registry");
var cache_profile_ast_1 = require("./cache-profile-ast");
var DEBUG_NAMESPACE = 'profile-ast-resolution';
/**
 * Resolves profile AST file.
 * File property:
 *  - loads directly passed file
 *  - can point only to .supr or .supr.ast.json file
 *  - throws if file not found or not valid ProfileDocumentNode
 * Version property:
 *  - tries to load it from cache
 *  - if not found it tries to fetch profile AST from Registry
 * @returns ProfileDocumentNode
 */
function resolveProfileAst(_a) {
    var profileId = _a.profileId, version = _a.version, logger = _a.logger, superJson = _a.superJson, fileSystem = _a.fileSystem, config = _a.config, crypto = _a.crypto, fetchInstance = _a.fetchInstance;
    return __awaiter(this, void 0, void 0, function () {
        var logFunction, loadProfileAstFile, profileSettings, filepath, astPath, resolvedVersion, cachedAst, ast;
        var _this = this;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    logFunction = logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE);
                    loadProfileAstFile = function (fileNameWithExtension) { return __awaiter(_this, void 0, void 0, function () {
                        var contents;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, fileSystem.readFile(fileNameWithExtension)];
                                case 1:
                                    contents = _a.sent();
                                    if (contents.isErr()) {
                                        if (contents.error instanceof errors_1.NotFoundError) {
                                            throw errors_1.profileFileNotFoundError(fileNameWithExtension, profileId);
                                        }
                                        throw contents.error;
                                    }
                                    return [2 /*return*/, ast_1.assertProfileDocumentNode(JSON.parse(contents.value))];
                            }
                        });
                    }); };
                    profileSettings = superJson === null || superJson === void 0 ? void 0 : superJson.profiles[profileId];
                    // Error when we don't have profileSettings and version is undefined
                    if (profileSettings === undefined && version === undefined) {
                        throw errors_1.unableToResolveProfileError(profileId);
                    }
                    // when version in profileSettings and version in "getProfile" does not match
                    if (profileSettings !== undefined &&
                        'version' in profileSettings &&
                        version !== undefined &&
                        profileSettings.version !== version) {
                        throw errors_1.versionMismatchError(profileSettings.version, version);
                    }
                    if (!(superJson !== undefined && profileSettings !== undefined)) return [3 /*break*/, 7];
                    if (!lib_1.isSettingsWithAst(profileSettings)) return [3 /*break*/, 1];
                    switch (typeof profileSettings.ast) {
                        case 'string':
                            return [2 /*return*/, ast_1.assertProfileDocumentNode(JSON.parse(String(profileSettings.ast)))];
                        case 'object':
                            return [2 /*return*/, ast_1.assertProfileDocumentNode(profileSettings.ast)];
                        default:
                            throw new lib_1.UnexpectedError("Unsupported ast format " + typeof profileSettings.ast);
                    }
                    return [3 /*break*/, 6];
                case 1:
                    if (!('file' in profileSettings)) return [3 /*break*/, 6];
                    // TODO: do we want to check `file` if we have version from getProfile?
                    filepath = fileSystem.path.resolve(fileSystem.path.dirname(config.superfacePath), profileSettings.file);
                    if (!filepath.endsWith(ast_1.EXTENSIONS.profile.source)) return [3 /*break*/, 3];
                    astPath = filepath.replace(ast_1.EXTENSIONS.profile.source, ast_1.EXTENSIONS.profile.build);
                    return [4 /*yield*/, fileSystem.exists(astPath)];
                case 2:
                    // if we don't have build file next to source file
                    if (!(_b.sent())) {
                        throw errors_1.sourceFileExtensionFoundError(ast_1.EXTENSIONS.profile.source);
                    }
                    return [3 /*break*/, 4];
                case 3:
                    if (filepath.endsWith(ast_1.EXTENSIONS.profile.build)) {
                        astPath = filepath;
                    }
                    else {
                        // FIX:  SDKExecutionError is used to ensure correct formatting. Improve formatting of UnexpectedError
                        throw errors_1.unsupportedFileExtensionError(filepath, ast_1.EXTENSIONS.profile.source);
                    }
                    _b.label = 4;
                case 4:
                    logFunction === null || logFunction === void 0 ? void 0 : logFunction('Reading possible profile file: %s', astPath);
                    return [4 /*yield*/, loadProfileAstFile(astPath)];
                case 5: return [2 /*return*/, _b.sent()];
                case 6:
                    resolvedVersion = version !== null && version !== void 0 ? version : profileSettings.version;
                    return [3 /*break*/, 8];
                case 7:
                    resolvedVersion = version;
                    _b.label = 8;
                case 8:
                    logFunction === null || logFunction === void 0 ? void 0 : logFunction('Trying to load profile file from cache');
                    return [4 /*yield*/, cache_profile_ast_1.tryToLoadCachedAst({
                            profileId: profileId,
                            version: resolvedVersion,
                            fileSystem: fileSystem,
                            config: config,
                            log: logFunction,
                        })];
                case 9:
                    cachedAst = _b.sent();
                    if (cachedAst !== undefined) {
                        logFunction === null || logFunction === void 0 ? void 0 : logFunction('Loading profile file from cache successful');
                        return [2 /*return*/, cachedAst];
                    }
                    logFunction === null || logFunction === void 0 ? void 0 : logFunction('Fetching profile file from registry');
                    return [4 /*yield*/, registry_1.fetchProfileAst(profileId + "@" + resolvedVersion, config, crypto, fetchInstance, logger)];
                case 10:
                    ast = _b.sent();
                    return [4 /*yield*/, cache_profile_ast_1.cacheProfileAst({
                            ast: ast,
                            version: resolvedVersion,
                            config: config,
                            fileSystem: fileSystem,
                            log: logFunction,
                        })];
                case 11:
                    _b.sent();
                    return [2 /*return*/, ast];
            }
        });
    });
}
exports.resolveProfileAst = resolveProfileAst;
//# sourceMappingURL=resolve-profile-ast.js.map