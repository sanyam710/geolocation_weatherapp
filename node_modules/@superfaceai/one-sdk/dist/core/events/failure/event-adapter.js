"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerHooks = void 0;
var lib_1 = require("../../../lib");
var errors_1 = require("../../errors");
var DEBUG_NAMESPACE = 'failover';
var DEBUG_NAMESPACE_SENSITIVE = 'failover:sensitive';
function handleCommonResolution(performContext, resolution) {
    switch (resolution.kind) {
        case 'abort':
            performContext.queuedAction = {
                kind: 'full-abort',
                reason: resolution.reason,
            };
            return {
                // this error will be overridden in post-bind-and-perform
                newResult: Promise.reject('full abort in progress'),
            };
        case 'recache':
            performContext.queuedAction = resolution;
            return {
                // this error will be overridden in post-bind-and-perform
                newResult: Promise.reject('recache in progress'),
            };
        case 'switch-provider':
            performContext.queuedAction = resolution;
            return {
                // this error will be overridden in post-bind-and-perform
                newResult: Promise.reject('failover in progress'),
            };
    }
}
function registerHooks(events, timers, logger) {
    var _this = this;
    registerNetworkHooks(events, timers, logger);
    var log = logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE);
    var logSensitive = logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE_SENSITIVE);
    events.on('pre-bind-and-perform', { priority: 1 }, function (context, args) { return __awaiter(_this, void 0, void 0, function () {
        var performContext, resolution;
        var _a;
        return __generator(this, function (_b) {
            log === null || log === void 0 ? void 0 : log('Handling event pre-bind-and-perform with context: %O', context);
            logSensitive === null || logSensitive === void 0 ? void 0 : logSensitive('\targs: %O', args);
            // only check failover restore when the provider is not manually set
            if (((_a = args[1]) === null || _a === void 0 ? void 0 : _a.provider) !== undefined) {
                return [2 /*return*/, { kind: 'continue' }];
            }
            performContext = events.hookContext[context.profile + "/" + context.usecase];
            // if there is no configured context: ignore the event
            if (performContext === undefined) {
                return [2 /*return*/, { kind: 'continue' }];
            }
            if (performContext.router.getCurrentProvider() === undefined) {
                return [2 /*return*/, { kind: 'continue' }];
            }
            resolution = performContext.router.beforeExecution({
                time: context.time.getTime(),
                registryCacheAge: 0,
                checkFailoverRestore: true,
            });
            switch (resolution.kind) {
                case 'continue':
                    return [2 /*return*/, { kind: 'continue' }];
                case 'backoff':
                    return [2 /*return*/, { kind: 'continue' }];
                default:
                    return [2 /*return*/, __assign({ kind: 'abort' }, handleCommonResolution(performContext, resolution))];
            }
            return [2 /*return*/];
        });
    }); });
    events.on('post-bind-and-perform', { priority: 1 }, function (context, args, res) { return __awaiter(_this, void 0, void 0, function () {
        var performContext, queuedAction, error, result, err_1, resolution, resolution, action;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    log === null || log === void 0 ? void 0 : log('Handling event post-bind-and-perform with context:', context);
                    logSensitive === null || logSensitive === void 0 ? void 0 : logSensitive('\targs: %O', args);
                    logSensitive === null || logSensitive === void 0 ? void 0 : logSensitive('\tresult: %O', res);
                    if (context.provider === undefined) {
                        throw new lib_1.UnexpectedError('Invalid event context');
                    }
                    performContext = events.hookContext[context.profile + "/" + context.usecase];
                    // if there is no configured context: ignore the event
                    if (performContext === undefined) {
                        return [2 /*return*/, { kind: 'continue' }];
                    }
                    queuedAction = performContext.queuedAction;
                    if (!(queuedAction === undefined)) return [3 /*break*/, 5];
                    error = void 0;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, res];
                case 2:
                    result = _a.sent();
                    if (result.isErr()) {
                        error = result.error;
                    }
                    return [3 /*break*/, 4];
                case 3:
                    err_1 = _a.sent();
                    error = err_1;
                    return [3 /*break*/, 4];
                case 4:
                    // this is a success!
                    if (error === undefined) {
                        void events.emit('success', [
                            {
                                time: new Date(timers.now()),
                                usecase: context.usecase,
                                profile: context.profile,
                                provider: context.provider,
                            },
                        ]);
                        resolution = performContext.router.afterSuccess({
                            time: context.time.getTime(),
                            registryCacheAge: 0, // TODO
                        });
                        if (resolution.kind === 'continue') {
                            return [2 /*return*/, { kind: 'continue' }];
                        }
                    }
                    // error is defined, handle it
                    void events.emit('failure', [
                        {
                            time: new Date(timers.now()),
                            usecase: context.usecase,
                            profile: context.profile,
                            provider: context.provider,
                        },
                    ]);
                    // Handle bind-level failure here
                    if (error instanceof lib_1.SDKBindError) {
                        resolution = performContext.router.afterFailure({
                            kind: 'bind',
                            originalError: error,
                            time: context.time.getTime(),
                            registryCacheAge: 0, // TODO
                        });
                        // Try to switch providers
                        if (resolution.kind === 'switch-provider') {
                            performContext.queuedAction = resolution;
                        }
                    }
                    _a.label = 5;
                case 5:
                    if (!(performContext.queuedAction !== undefined)) return [3 /*break*/, 7];
                    action = performContext.queuedAction;
                    performContext.queuedAction = undefined;
                    // ignore the placeholder error we produced in `handleCommonResolution`
                    return [4 /*yield*/, res.catch(function (_err) { return undefined; })];
                case 6:
                    // ignore the placeholder error we produced in `handleCommonResolution`
                    _a.sent();
                    switch (action.kind) {
                        case 'switch-provider': {
                            log === null || log === void 0 ? void 0 : log('Switching to provider', action.provider);
                            void events.emit('provider-switch', [
                                {
                                    time: new Date(timers.now()),
                                    toProvider: action.provider,
                                    provider: context.provider,
                                    usecase: context.usecase,
                                    profile: context.profile,
                                    reason: action.reason,
                                },
                            ]);
                            return [2 /*return*/, {
                                    kind: 'retry',
                                    newArgs: [args[0], __assign(__assign({}, args[1]), { provider: action.provider })],
                                }];
                        }
                        case 'recache':
                            throw new lib_1.UnexpectedError('Not Implemented'); // TODO: how to recache?
                        case 'full-abort':
                            // missing `toProvider` means that provider-switch **could not** happen
                            void events.emit('provider-switch', [
                                {
                                    time: new Date(timers.now()),
                                    provider: context.provider,
                                    usecase: context.usecase,
                                    profile: context.profile,
                                    reason: action.reason,
                                },
                            ]);
                            return [2 /*return*/, {
                                    kind: 'modify',
                                    newResult: Promise.reject(action.reason.toError()),
                                }];
                    }
                    _a.label = 7;
                case 7: return [2 /*return*/, { kind: 'continue' }];
            }
        });
    }); });
}
exports.registerHooks = registerHooks;
function registerNetworkHooks(events, timers, logger) {
    var _this = this;
    var log = logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE);
    var logSensitive = logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE_SENSITIVE);
    events.on('pre-fetch', { priority: 1 }, function (context, args) { return __awaiter(_this, void 0, void 0, function () {
        var performContext, resolution, _a, newArgs, newArgs;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    log === null || log === void 0 ? void 0 : log('Handling event pre-fetch with context: %O', context);
                    logSensitive === null || logSensitive === void 0 ? void 0 : logSensitive('\targs: %O', args);
                    // only listen to fetch events in perform context
                    if (context.profile === undefined ||
                        context.usecase === undefined ||
                        context.provider === undefined) {
                        return [2 /*return*/, { kind: 'continue' }];
                    }
                    performContext = events.hookContext[context.profile + "/" + context.usecase];
                    // if there is no configured context, ignore the event as well
                    if (performContext === undefined) {
                        return [2 /*return*/, { kind: 'continue' }];
                    }
                    resolution = performContext.router.beforeExecution({
                        time: context.time.getTime(),
                        registryCacheAge: 0,
                        checkFailoverRestore: false,
                    });
                    _a = resolution.kind;
                    switch (_a) {
                        case 'continue': return [3 /*break*/, 1];
                        case 'backoff': return [3 /*break*/, 2];
                    }
                    return [3 /*break*/, 4];
                case 1:
                    if (resolution.timeout > 0) {
                        newArgs = lib_1.clone(args);
                        newArgs[1].timeout = resolution.timeout;
                        return [2 /*return*/, { kind: 'modify', newArgs: newArgs }];
                    }
                    return [3 /*break*/, 5];
                case 2: return [4 /*yield*/, timers.sleep(resolution.backoff)];
                case 3:
                    _b.sent();
                    if (resolution.timeout > 0) {
                        newArgs = lib_1.clone(args);
                        newArgs[1].timeout = resolution.timeout;
                        return [2 /*return*/, { kind: 'modify', newArgs: newArgs }];
                    }
                    return [3 /*break*/, 5];
                case 4: return [2 /*return*/, __assign({ kind: 'abort' }, handleCommonResolution(performContext, resolution))];
                case 5: return [2 /*return*/, { kind: 'continue' }];
            }
        });
    }); });
    events.on('post-fetch', { priority: 1 }, function (context, args, res) { return __awaiter(_this, void 0, void 0, function () {
        var performContext, error, err_2, failure, resolution;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    log === null || log === void 0 ? void 0 : log('Handling event post-fetch with context: %O', context);
                    logSensitive === null || logSensitive === void 0 ? void 0 : logSensitive('\targs: %O', args);
                    logSensitive === null || logSensitive === void 0 ? void 0 : logSensitive('\tresult: %O', res);
                    // only listen to fetch events in perform context
                    if (context.profile === undefined ||
                        context.usecase === undefined ||
                        context.provider === undefined) {
                        return [2 /*return*/, { kind: 'continue' }];
                    }
                    performContext = events.hookContext[context.profile + "/" + context.usecase];
                    // if there is no configured context, ignore the event as well
                    if (performContext === undefined) {
                        return [2 /*return*/, { kind: 'continue' }];
                    }
                    // defer queued action until post-perform
                    if (performContext.queuedAction !== undefined) {
                        return [2 /*return*/, { kind: 'continue' }];
                    }
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, res];
                case 2:
                    _a.sent();
                    return [2 /*return*/, { kind: 'continue' }];
                case 3:
                    err_2 = _a.sent();
                    error = err_2;
                    return [3 /*break*/, 4];
                case 4:
                    void events.emit('failure', [
                        {
                            time: new Date(timers.now()),
                            usecase: context.usecase,
                            profile: context.profile,
                            provider: context.provider,
                        },
                    ]);
                    if (errors_1.isFetchError(error)) {
                        failure = __assign({ time: context.time.getTime(), registryCacheAge: 0 }, error.normalized);
                    }
                    else {
                        failure = {
                            kind: 'unknown',
                            time: context.time.getTime(),
                            registryCacheAge: 0,
                            originalError: error,
                        };
                    }
                    resolution = performContext.router.afterFailure(failure);
                    switch (resolution.kind) {
                        case 'continue':
                            return [2 /*return*/, { kind: 'continue' }];
                        case 'retry':
                            return [2 /*return*/, { kind: 'retry' }];
                        default:
                            return [2 /*return*/, __assign({ kind: 'modify' }, handleCommonResolution(performContext, resolution))];
                    }
                    return [2 /*return*/];
            }
        });
    }); });
    events.on('pre-unhandled-http', { priority: 1 }, function (context, args) { return __awaiter(_this, void 0, void 0, function () {
        var performContext, response, resolution;
        return __generator(this, function (_a) {
            log === null || log === void 0 ? void 0 : log('Handling event pre-unhandled-http with context: %O', context);
            logSensitive === null || logSensitive === void 0 ? void 0 : logSensitive('\targs: %O', args);
            // common handling
            if (context.profile === undefined ||
                context.usecase === undefined ||
                context.provider === undefined) {
                return [2 /*return*/, { kind: 'continue' }];
            }
            performContext = events.hookContext[context.profile + "/" + context.usecase];
            if (performContext === undefined) {
                return [2 /*return*/, { kind: 'continue' }];
            }
            if (performContext.queuedAction !== undefined) {
                return [2 /*return*/, { kind: 'continue' }];
            }
            response = args[2];
            if (response.statusCode < 400) {
                return [2 /*return*/, { kind: 'continue' }];
            }
            resolution = performContext.router.afterFailure({
                time: context.time.getTime(),
                registryCacheAge: 0,
                kind: 'http',
                response: response,
            });
            switch (resolution.kind) {
                case 'continue':
                    return [2 /*return*/, { kind: 'continue' }];
                case 'retry':
                    return [2 /*return*/, {
                            kind: 'abort',
                            newResult: Promise.resolve('retry'),
                        }];
                default:
                    return [2 /*return*/, __assign({ kind: 'abort' }, handleCommonResolution(performContext, resolution))];
            }
            return [2 /*return*/];
        });
    }); });
}
//# sourceMappingURL=event-adapter.js.map