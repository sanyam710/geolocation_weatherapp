import type { NormalizedSuperJsonDocument, ProfileDocumentNode } from '@superfaceai/ast';
import type { ICrypto, IFileSystem, ILogger, ITimers } from '../../interfaces';
import type { ISandbox } from '../../interfaces/sandbox';
import type { SuperCache } from '../../lib';
import type { Config } from '../config';
import type { Events, Interceptable } from '../events';
import type { AuthCache, IFetch } from '../interpreter';
import { Profile, ProfileConfiguration } from '../profile';
import type { IBoundProfileProvider } from '../profile-provider';
export declare class InternalClient {
    private readonly events;
    private readonly superJson;
    private readonly config;
    private readonly sandbox;
    private readonly timers;
    private readonly fileSystem;
    private readonly boundProfileProviderCache;
    private readonly crypto;
    private readonly fetchInstance;
    private readonly logger?;
    constructor(events: Events, superJson: NormalizedSuperJsonDocument | undefined, config: Config, sandbox: ISandbox, timers: ITimers, fileSystem: IFileSystem, boundProfileProviderCache: SuperCache<{
        provider: IBoundProfileProvider;
        expiresAt: number;
    }>, crypto: ICrypto, fetchInstance: IFetch & Interceptable & AuthCache, logger?: ILogger | undefined);
    getProfile(profile: string | {
        id: string;
        version?: string;
    }): Promise<Profile>;
    getProfileConfiguration(ast: ProfileDocumentNode): Promise<ProfileConfiguration>;
}
export declare function resolveProfileId(profile: string | {
    id: string;
    version?: string;
}): {
    id: string;
    version?: string;
};
