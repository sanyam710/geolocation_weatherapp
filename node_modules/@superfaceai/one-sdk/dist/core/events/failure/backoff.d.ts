export declare class Backoff {
    protected readonly successor: (x: number) => number;
    protected readonly inverseSuccessor: (x: number) => number;
    static DEFAULT_INITIAL: number;
    protected _current: number;
    constructor(successor: (x: number) => number, inverseSuccessor: (x: number) => number, initial: number);
    get current(): number;
    up(): number;
    down(): number;
    protected static clampValue(value: number, minimum?: number, maximum?: number): number;
}
export declare class ConstantBackoff extends Backoff {
    constructor(initial: number);
}
export declare class LinearBackoff extends Backoff {
    constructor(initial: number, step: number, minimum?: number, maximum?: number);
}
export declare class ExponentialBackoff extends Backoff {
    static DEFAULT_BASE: number;
    constructor(initial: number, base: number, minimum?: number, maximum?: number);
}
