"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MapInterpreter = void 0;
var ast_1 = require("@superfaceai/ast");
var interfaces_1 = require("../../interfaces");
var lib_1 = require("../../lib");
var http_1 = require("./http");
var map_interpreter_errors_1 = require("./map-interpreter.errors");
var stdlib_1 = require("./stdlib");
function assertUnreachable(_) {
    throw 'unreachable';
}
var DEBUG_NAMESPACE = 'map-interpreter';
var NodeVisitor = /** @class */ (function () {
    function NodeVisitor(node, stack, childIdentifier, log) {
        this.node = node;
        this.stack = stack;
        this.childIdentifier = childIdentifier;
        this.log = log;
        this.outcome = undefined;
        // TODO: signature unsure, resolve later
        // abstract childYield(result: VisitorResultYield): undefined | VisitorResultYield
        this.visitGenerator = undefined;
        this.expectedChildIdentifier = undefined;
    }
    NodeVisitor.mergeOutcome = function (current, other) {
        if ('error' in other) {
            return other;
        }
        else if (current !== undefined && 'error' in current) {
            return current;
        }
        else {
            return { data: other.data };
        }
    };
    NodeVisitor.prototype.prepareResultDone = function (value, terminate) {
        var outcome = undefined;
        if (this.outcome !== undefined) {
            outcome = { terminate: terminate !== null && terminate !== void 0 ? terminate : false, value: this.outcome };
        }
        else if (terminate !== undefined) {
            return {
                kind: 'error',
                error: new lib_1.UnexpectedError('Expected outcome to be set'),
            };
        }
        return {
            kind: 'done',
            stack: this.stack,
            childIdentifier: this.childIdentifier,
            value: value,
            outcome: outcome,
        };
    };
    NodeVisitor.prototype.prepareResultErrorUnexpected = function (message, context) {
        return {
            kind: 'error',
            error: new lib_1.UnexpectedError(message, __assign(__assign({}, context), { node: this.node, ast: undefined })),
        };
    };
    /**
     * Processes VisitorResultDone from the child.
     *
     * This includes updating the stack and merging the outcome.
     *
     * Returns whether `outcome.terminate` was true.
     */
    NodeVisitor.prototype.processChildResult = function (result) {
        var _a;
        this.stack = result.stack;
        if (result.outcome !== undefined) {
            (_a = this.log) === null || _a === void 0 ? void 0 : _a.call(this, 'Merging outcome:', this.outcome, 'with', result.outcome);
            this.outcome = NodeVisitor.mergeOutcome(this.outcome, result.outcome.value);
            if (result.outcome.terminate) {
                return { terminate: true };
            }
        }
        return { terminate: false };
    };
    NodeVisitor.prototype.next = function () {
        var _a, _b, _c, _d;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var actualChildIdentifier, expected, actual, result;
            var _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        if (this.visitGenerator === undefined) {
                            this.visitGenerator = this.visit();
                        }
                        actualChildIdentifier = (_a = args[0]) === null || _a === void 0 ? void 0 : _a.childIdentifier;
                        if (this.expectedChildIdentifier !== actualChildIdentifier) {
                            expected = (_c = (_b = this.expectedChildIdentifier) === null || _b === void 0 ? void 0 : _b.toString()) !== null && _c !== void 0 ? _c : 'undefined';
                            actual = (_d = actualChildIdentifier === null || actualChildIdentifier === void 0 ? void 0 : actualChildIdentifier.toString()) !== null && _d !== void 0 ? _d : 'undefined';
                            return [2 /*return*/, {
                                    done: true,
                                    value: {
                                        kind: 'error',
                                        error: new lib_1.UnexpectedError("Sanity check failed in " + this.toString() + ": Expected child identifier " + expected + " but found " + actual),
                                    },
                                }];
                        }
                        return [4 /*yield*/, (_f = this.visitGenerator).next.apply(_f, __spreadArray([], __read(args)))];
                    case 1:
                        result = _g.sent();
                        // store last childIdentifier
                        if (result.value.kind === 'explore') {
                            this.expectedChildIdentifier = result.value.childIdentifier;
                        }
                        else {
                            this.expectedChildIdentifier = undefined;
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    };
    NodeVisitor.prototype.return = function (_value) {
        throw new Error('Method not implemented.');
    };
    NodeVisitor.prototype.throw = function (_e) {
        throw new Error('Method not implemented.');
    };
    NodeVisitor.prototype[Symbol.asyncIterator] = function () {
        return this;
    };
    NodeVisitor.prototype.toString = function () {
        return this[Symbol.toStringTag]() + "(" + this.childIdentifier + ")";
    };
    return NodeVisitor;
}());
var MapDefinitionVisitor = /** @class */ (function (_super) {
    __extends(MapDefinitionVisitor, _super);
    function MapDefinitionVisitor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MapDefinitionVisitor.prototype.visit = function () {
        return __asyncGenerator(this, arguments, function visit_1() {
            var i, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < this.node.statements.length)) return [3 /*break*/, 6];
                        return [4 /*yield*/, __await({
                                kind: 'explore',
                                what: { node: this.node.statements[i] },
                                stack: this.stack,
                                childIdentifier: this.childIdentifier + ".statements[" + i + "]",
                            })];
                    case 2: return [4 /*yield*/, _a.sent()];
                    case 3:
                        result = _a.sent();
                        if (!this.processChildResult(result).terminate) return [3 /*break*/, 5];
                        return [4 /*yield*/, __await(this.prepareResultDone(undefined, true))];
                    case 4: return [2 /*return*/, _a.sent()];
                    case 5:
                        i += 1;
                        return [3 /*break*/, 1];
                    case 6: return [4 /*yield*/, __await(this.prepareResultDone(undefined))];
                    case 7: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    MapDefinitionVisitor.prototype[Symbol.toStringTag] = function () {
        return 'MapDefinitionVisitor';
    };
    return MapDefinitionVisitor;
}(NodeVisitor));
var OperationDefinitionVisitor = /** @class */ (function (_super) {
    __extends(OperationDefinitionVisitor, _super);
    function OperationDefinitionVisitor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OperationDefinitionVisitor.prototype.visit = function () {
        return __asyncGenerator(this, arguments, function visit_2() {
            var i, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < this.node.statements.length)) return [3 /*break*/, 6];
                        return [4 /*yield*/, __await({
                                kind: 'explore',
                                what: { node: this.node.statements[i] },
                                stack: this.stack,
                                childIdentifier: this.childIdentifier + ".statements[" + i + "]",
                            })];
                    case 2: return [4 /*yield*/, _a.sent()];
                    case 3:
                        result = _a.sent();
                        if (!this.processChildResult(result).terminate) return [3 /*break*/, 5];
                        return [4 /*yield*/, __await(this.prepareResultDone(undefined, true))];
                    case 4: return [2 /*return*/, _a.sent()];
                    case 5:
                        i += 1;
                        return [3 /*break*/, 1];
                    case 6: return [4 /*yield*/, __await(this.prepareResultDone(undefined))];
                    case 7: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    OperationDefinitionVisitor.prototype[Symbol.toStringTag] = function () {
        return 'OperationDefinitionVisitor';
    };
    return OperationDefinitionVisitor;
}(NodeVisitor));
var SetStatementVisitor = /** @class */ (function (_super) {
    __extends(SetStatementVisitor, _super);
    function SetStatementVisitor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SetStatementVisitor.prototype.visit = function () {
        var _a;
        return __asyncGenerator(this, arguments, function visit_3() {
            var result, i, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(this.node.condition !== undefined)) return [3 /*break*/, 4];
                        return [4 /*yield*/, __await({
                                kind: 'explore',
                                what: { node: this.node.condition },
                                stack: this.stack,
                                childIdentifier: this.childIdentifier + ".condition",
                            })];
                    case 1: return [4 /*yield*/, _b.sent()];
                    case 2:
                        result = _b.sent();
                        if (!(result.value === false)) return [3 /*break*/, 4];
                        return [4 /*yield*/, __await(this.prepareResultDone(undefined))];
                    case 3: return [2 /*return*/, _b.sent()];
                    case 4:
                        i = 0;
                        _b.label = 5;
                    case 5:
                        if (!(i < this.node.assignments.length)) return [3 /*break*/, 11];
                        return [4 /*yield*/, __await({
                                kind: 'explore',
                                what: { node: this.node.assignments[i] },
                                stack: this.stack,
                                childIdentifier: this.childIdentifier + ".assignments[" + i + "]",
                            })];
                    case 6: return [4 /*yield*/, _b.sent()];
                    case 7:
                        result = _b.sent();
                        if (!(result.value === undefined)) return [3 /*break*/, 9];
                        return [4 /*yield*/, __await({
                                kind: 'error',
                                error: new lib_1.UnexpectedError('Assignment child returned invalid result', { value: result.value, node: this.node }),
                            })];
                    case 8: return [2 /*return*/, _b.sent()];
                    case 9:
                        (_a = this.log) === null || _a === void 0 ? void 0 : _a.call(this, 'Updating stack with:', result.value);
                        // TODO: this is different from before - it allows consecutive assignments to see values from previous ones
                        // TODO: assert result.value is NonPrimitive
                        this.stack = lib_1.mergeVariables(this.stack, result.value);
                        _b.label = 10;
                    case 10:
                        i += 1;
                        return [3 /*break*/, 5];
                    case 11: return [4 /*yield*/, __await(this.prepareResultDone(undefined))];
                    case 12: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    SetStatementVisitor.prototype[Symbol.toStringTag] = function () {
        return 'SetStatementVisitor';
    };
    return SetStatementVisitor;
}(NodeVisitor));
var ConditionAtomVisitor = /** @class */ (function (_super) {
    __extends(ConditionAtomVisitor, _super);
    function ConditionAtomVisitor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ConditionAtomVisitor.prototype.visit = function () {
        return __asyncGenerator(this, arguments, function visit_4() {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, __await({
                            kind: 'explore',
                            what: { node: this.node.expression },
                            stack: this.stack,
                            childIdentifier: this.childIdentifier + ".value",
                        })];
                    case 1: return [4 /*yield*/, _a.sent()];
                    case 2:
                        result = _a.sent();
                        return [4 /*yield*/, __await(this.prepareResultDone(Boolean(result.value)))];
                    case 3: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ConditionAtomVisitor.prototype[Symbol.toStringTag] = function () {
        return 'ConditionAtomVisitor';
    };
    return ConditionAtomVisitor;
}(NodeVisitor));
var AssignmentVisitor = /** @class */ (function (_super) {
    __extends(AssignmentVisitor, _super);
    function AssignmentVisitor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AssignmentVisitor.constructObject = function (keys, value) {
        var e_1, _a;
        var result = {};
        var current = result;
        try {
            for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                var key = keys_1_1.value;
                if (key === keys[keys.length - 1]) {
                    current[key] = value;
                }
                else {
                    current = current[key] = {};
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return result;
    };
    AssignmentVisitor.prototype.visit = function () {
        return __asyncGenerator(this, arguments, function visit_5() {
            var result, object;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, __await({
                            kind: 'explore',
                            what: { node: this.node.value },
                            stack: this.stack,
                            childIdentifier: this.childIdentifier + ".value",
                        })];
                    case 1: return [4 /*yield*/, _a.sent()];
                    case 2:
                        result = _a.sent();
                        object = AssignmentVisitor.constructObject(this.node.key, result.value);
                        return [4 /*yield*/, __await(this.prepareResultDone(object))];
                    case 3: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    AssignmentVisitor.prototype[Symbol.toStringTag] = function () {
        return 'AssignmentVisitor';
    };
    return AssignmentVisitor;
}(NodeVisitor));
var PrimitiveLiteralVisitor = /** @class */ (function (_super) {
    __extends(PrimitiveLiteralVisitor, _super);
    function PrimitiveLiteralVisitor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    // eslint-disable-next-line require-yield
    PrimitiveLiteralVisitor.prototype.visit = function () {
        return __asyncGenerator(this, arguments, function visit_6() {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, __await(this.prepareResultDone(this.node.value))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    PrimitiveLiteralVisitor.prototype[Symbol.toStringTag] = function () {
        return 'PrimitiveLiteralVisitor';
    };
    return PrimitiveLiteralVisitor;
}(NodeVisitor));
var ObjectLiteralVisitor = /** @class */ (function (_super) {
    __extends(ObjectLiteralVisitor, _super);
    function ObjectLiteralVisitor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ObjectLiteralVisitor.prototype.visit = function () {
        return __asyncGenerator(this, arguments, function visit_7() {
            var object, i, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        object = {};
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < this.node.fields.length)) return [3 /*break*/, 5];
                        return [4 /*yield*/, __await({
                                kind: 'explore',
                                what: { node: this.node.fields[i] },
                                stack: this.stack,
                                childIdentifier: this.childIdentifier + ".fields[" + i + "]",
                            })];
                    case 2: return [4 /*yield*/, _a.sent()];
                    case 3:
                        result = _a.sent();
                        // TODO: typecheck
                        object = lib_1.mergeVariables(object, result.value);
                        _a.label = 4;
                    case 4:
                        i += 1;
                        return [3 /*break*/, 1];
                    case 5: return [4 /*yield*/, __await(this.prepareResultDone(object))];
                    case 6: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ObjectLiteralVisitor.prototype[Symbol.toStringTag] = function () {
        return 'ObjectLiteralVisitor';
    };
    return ObjectLiteralVisitor;
}(NodeVisitor));
var JessieExpressionVisitor = /** @class */ (function (_super) {
    __extends(JessieExpressionVisitor, _super);
    function JessieExpressionVisitor(node, stack, childIdentifier, log, sandbox, config, logger, inputParameters, integrationParameters) {
        var _this = _super.call(this, node, stack, childIdentifier, log) || this;
        _this.sandbox = sandbox;
        _this.config = config;
        _this.logger = logger;
        _this.inputParameters = inputParameters;
        _this.integrationParameters = integrationParameters;
        return _this;
    }
    // eslint-disable-next-line require-yield
    JessieExpressionVisitor.prototype.visit = function () {
        return __asyncGenerator(this, arguments, function visit_8() {
            var result, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 5]);
                        return [4 /*yield*/, __await(this.sandbox.evalScript(this.config, this.node.expression, stdlib_1.getStdlib(this.logger), this.logger, __assign(__assign({}, this.stack), lib_1.fromEntriesOptional(['input', this.inputParameters], ['parameters', this.integrationParameters]))))];
                    case 1:
                        result = _a.sent();
                        return [4 /*yield*/, __await(this.prepareResultDone(lib_1.castToVariables(result)))];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_2 = _a.sent();
                        return [4 /*yield*/, __await({
                                kind: 'error',
                                error: new map_interpreter_errors_1.JessieError('Error in Jessie script', e_2, {
                                    node: this.node,
                                }),
                            })];
                    case 4: return [2 /*return*/, _a.sent()];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    JessieExpressionVisitor.prototype[Symbol.toStringTag] = function () {
        return 'JessieExpressionVisitor';
    };
    return JessieExpressionVisitor;
}(NodeVisitor));
var IterationAtomVisitor = /** @class */ (function (_super) {
    __extends(IterationAtomVisitor, _super);
    function IterationAtomVisitor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IterationAtomVisitor.isIterable = function (input) {
        return (typeof input === 'object' &&
            input !== null &&
            (Symbol.iterator in input || Symbol.asyncIterator in input));
    };
    IterationAtomVisitor.prototype.visit = function () {
        return __asyncGenerator(this, arguments, function visit_9() {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, __await({
                            kind: 'explore',
                            what: { node: this.node.iterable },
                            stack: this.stack,
                            childIdentifier: this.childIdentifier + ".value",
                        })];
                    case 1: return [4 /*yield*/, _a.sent()];
                    case 2:
                        result = _a.sent();
                        if (!!IterationAtomVisitor.isIterable(result.value)) return [3 /*break*/, 4];
                        return [4 /*yield*/, __await({
                                kind: 'error',
                                error: new map_interpreter_errors_1.MapASTError("Result of expression: " + this.node.iterable.expression + " is not iterable.", { node: this.node }),
                            })];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4: return [4 /*yield*/, __await(this.prepareResultDone(result.value))];
                    case 5: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    IterationAtomVisitor.prototype[Symbol.toStringTag] = function () {
        return 'IterationAtomVisitor';
    };
    return IterationAtomVisitor;
}(NodeVisitor));
var CallVisitor = /** @class */ (function (_super) {
    __extends(CallVisitor, _super);
    function CallVisitor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CallVisitor.prototype.visit = function () {
        var _a, _b, _c;
        return __asyncGenerator(this, arguments, function visit_10() {
            var iterable, iterationVariable, result, inlineCallResults, iterationCounter, iterable_1, iterable_1_1, iterVariable, childIdentifier, result_1, args, i, result_2, result, outcome, out, i, result_3, e_3_1;
            var e_3, _d;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        iterable = [0];
                        iterationVariable = undefined;
                        if (!(this.node.iteration !== undefined)) return [3 /*break*/, 3];
                        return [4 /*yield*/, __await({
                                kind: 'explore',
                                what: { node: this.node.iteration },
                                stack: this.stack,
                                childIdentifier: this.childIdentifier + ".iteration",
                            })];
                    case 1: return [4 /*yield*/, _f.sent()];
                    case 2:
                        result = _f.sent();
                        iterable = result.value;
                        iterationVariable = this.node.iteration.iterationVariable;
                        _f.label = 3;
                    case 3:
                        inlineCallResults = [];
                        iterationCounter = -1;
                        _f.label = 4;
                    case 4:
                        _f.trys.push([4, 28, 29, 34]);
                        iterable_1 = __asyncValues(iterable);
                        _f.label = 5;
                    case 5: return [4 /*yield*/, __await(iterable_1.next())];
                    case 6:
                        if (!(iterable_1_1 = _f.sent(), !iterable_1_1.done)) return [3 /*break*/, 27];
                        iterVariable = iterable_1_1.value;
                        iterationCounter += 1;
                        childIdentifier = this.childIdentifier + ".*" + iterationCounter;
                        if (iterationVariable !== undefined) {
                            this.stack[iterationVariable] = iterVariable;
                        }
                        if (!(this.node.condition !== undefined)) return [3 /*break*/, 9];
                        return [4 /*yield*/, __await({
                                kind: 'explore',
                                what: { node: this.node.condition },
                                stack: this.stack,
                                childIdentifier: childIdentifier + ".condition",
                            })];
                    case 7: return [4 /*yield*/, _f.sent()];
                    case 8:
                        result_1 = _f.sent();
                        // TODO: typecheck
                        if (result_1.value === false) {
                            return [3 /*break*/, 26];
                        }
                        _f.label = 9;
                    case 9:
                        (_a = this.log) === null || _a === void 0 ? void 0 : _a.call(this, 'Calling operation:', this.node.operationName);
                        args = {};
                        i = 0;
                        _f.label = 10;
                    case 10:
                        if (!(i < this.node.arguments.length)) return [3 /*break*/, 14];
                        return [4 /*yield*/, __await({
                                kind: 'explore',
                                what: { node: this.node.arguments[i] },
                                stack: this.stack,
                                childIdentifier: childIdentifier + ".arguments[" + i + "]",
                            })];
                    case 11: return [4 /*yield*/, _f.sent()];
                    case 12:
                        result_2 = _f.sent();
                        // TODO: typecheck
                        args = lib_1.mergeVariables(args, result_2.value);
                        _f.label = 13;
                    case 13:
                        i += 1;
                        return [3 /*break*/, 10];
                    case 14: return [4 /*yield*/, __await({
                            kind: 'explore',
                            what: { operation: this.node.operationName },
                            stack: { args: args },
                            childIdentifier: childIdentifier + ".operation",
                        })];
                    case 15: return [4 /*yield*/, _f.sent()];
                    case 16:
                        result = _f.sent();
                        outcome = (_c = (_b = result.outcome) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : { data: undefined };
                        if (!(this.node.kind === 'InlineCall')) return [3 /*break*/, 19];
                        if (!('error' in outcome)) return [3 /*break*/, 18];
                        return [4 /*yield*/, __await({
                                kind: 'error',
                                error: new map_interpreter_errors_1.MapASTError('Unexpected inline call failure.', {
                                    node: this.node,
                                }),
                            })];
                    case 17: return [2 /*return*/, _f.sent()];
                    case 18:
                        inlineCallResults.push(outcome.data);
                        return [3 /*break*/, 26];
                    case 19:
                        if (!(this.node.kind === 'CallStatement')) return [3 /*break*/, 26];
                        out = outcome;
                        this.stack['outcome'] = { data: out.data, error: out.error };
                        i = 0;
                        _f.label = 20;
                    case 20:
                        if (!(i < this.node.statements.length)) return [3 /*break*/, 25];
                        return [4 /*yield*/, __await({
                                kind: 'explore',
                                what: { node: this.node.statements[i] },
                                stack: this.stack,
                                childIdentifier: childIdentifier + ".statements[" + i + "]",
                            })];
                    case 21: return [4 /*yield*/, _f.sent()];
                    case 22:
                        result_3 = _f.sent();
                        if (!this.processChildResult(result_3).terminate) return [3 /*break*/, 24];
                        return [4 /*yield*/, __await(this.prepareResultDone(undefined, true))];
                    case 23: return [2 /*return*/, _f.sent()];
                    case 24:
                        i += 1;
                        return [3 /*break*/, 20];
                    case 25:
                        // end early if last outcome was an error
                        if ('error' in outcome) {
                            return [3 /*break*/, 27];
                        }
                        _f.label = 26;
                    case 26: return [3 /*break*/, 5];
                    case 27: return [3 /*break*/, 34];
                    case 28:
                        e_3_1 = _f.sent();
                        e_3 = { error: e_3_1 };
                        return [3 /*break*/, 34];
                    case 29:
                        _f.trys.push([29, , 32, 33]);
                        if (!(iterable_1_1 && !iterable_1_1.done && (_d = iterable_1.return))) return [3 /*break*/, 31];
                        return [4 /*yield*/, __await(_d.call(iterable_1))];
                    case 30:
                        _f.sent();
                        _f.label = 31;
                    case 31: return [3 /*break*/, 33];
                    case 32:
                        if (e_3) throw e_3.error;
                        return [7 /*endfinally*/];
                    case 33: return [7 /*endfinally*/];
                    case 34:
                        if (!(this.node.kind === 'InlineCall')) return [3 /*break*/, 39];
                        if (!(this.node.iteration === undefined)) return [3 /*break*/, 36];
                        return [4 /*yield*/, __await(this.prepareResultDone(inlineCallResults[0]))];
                    case 35: return [2 /*return*/, _f.sent()];
                    case 36: return [4 /*yield*/, __await(this.prepareResultDone(inlineCallResults))];
                    case 37: return [2 /*return*/, _f.sent()];
                    case 38: return [3 /*break*/, 41];
                    case 39: return [4 /*yield*/, __await(this.prepareResultDone(undefined))];
                    case 40: return [2 /*return*/, _f.sent()];
                    case 41: return [2 /*return*/];
                }
            });
        });
    };
    CallVisitor.prototype[Symbol.toStringTag] = function () {
        return 'CallVisitor';
    };
    return CallVisitor;
}(NodeVisitor));
var HttpCallStatementVisitor = /** @class */ (function (_super) {
    __extends(HttpCallStatementVisitor, _super);
    function HttpCallStatementVisitor(node, stack, childIdentifier, log, http, externalHandler, services, inputParameters, integrationParameters, securityConfiguration) {
        var _this = _super.call(this, node, stack, childIdentifier, log) || this;
        _this.http = http;
        _this.externalHandler = externalHandler;
        _this.services = services;
        _this.inputParameters = inputParameters;
        _this.integrationParameters = integrationParameters;
        _this.securityConfiguration = securityConfiguration;
        return _this;
    }
    HttpCallStatementVisitor.prototype.visit = function () {
        var _a, _b, _c, _d, _f, _g, _h;
        return __asyncGenerator(this, arguments, function visit_11() {
            var serviceUrl, request, result, accepts, accept, response, e_4, i, result, terminate, action, e_5;
            return __generator(this, function (_j) {
                switch (_j.label) {
                    case 0:
                        serviceUrl = this.services.getUrl(this.node.serviceId);
                        if (!(serviceUrl === undefined)) return [3 /*break*/, 2];
                        return [4 /*yield*/, __await({
                                kind: 'error',
                                error: new lib_1.UnexpectedError('Base url for a service not provided for HTTP call.'),
                            })];
                    case 1: return [2 /*return*/, _j.sent()];
                    case 2:
                        if (!this.node.request) return [3 /*break*/, 5];
                        return [4 /*yield*/, __await({
                                kind: 'explore',
                                what: { node: this.node.request },
                                stack: this.stack,
                                childIdentifier: this.childIdentifier + ".request",
                            })];
                    case 3: return [4 /*yield*/, _j.sent()];
                    case 4:
                        result = _j.sent();
                        request = result.value;
                        _j.label = 5;
                    case 5:
                        accepts = this.node.responseHandlers.map(function (node) { return node.contentType; });
                        if (accepts.some(function (accept) { return accept === undefined; })) {
                            accept = '*/*';
                        }
                        else {
                            accept = accepts
                                // deduplicate the array
                                .filter(function (accept, index) { return accepts.indexOf(accept) === index; })
                                .join(', ');
                        }
                        _j.label = 6;
                    case 6:
                        if (!true) return [3 /*break*/, 30];
                        (_a = this.log) === null || _a === void 0 ? void 0 : _a.call(this, 'Performing http request:', this.node.url);
                        response = void 0;
                        _j.label = 7;
                    case 7:
                        _j.trys.push([7, 9, , 13]);
                        return [4 /*yield*/, __await(this.http.request(this.node.url, {
                                method: this.node.method,
                                headers: request === null || request === void 0 ? void 0 : request.headers,
                                contentType: (_b = request === null || request === void 0 ? void 0 : request.contentType) !== null && _b !== void 0 ? _b : 'application/json',
                                accept: accept,
                                baseUrl: serviceUrl,
                                queryParameters: request === null || request === void 0 ? void 0 : request.queryParameters,
                                pathParameters: __assign(__assign({}, this.stack), lib_1.fromEntriesOptional(['input', this.inputParameters], ['parameters', this.integrationParameters])),
                                body: request === null || request === void 0 ? void 0 : request.body,
                                securityRequirements: request === null || request === void 0 ? void 0 : request.security,
                                securityConfiguration: this.securityConfiguration,
                                integrationParameters: this.integrationParameters,
                            }))];
                    case 8:
                        response = _j.sent();
                        return [3 /*break*/, 13];
                    case 9:
                        e_4 = _j.sent();
                        if (!(e_4 instanceof lib_1.UnexpectedError || e_4 instanceof lib_1.SDKExecutionError)) return [3 /*break*/, 11];
                        return [4 /*yield*/, __await({ kind: 'error', error: e_4 })];
                    case 10: return [2 /*return*/, _j.sent()];
                    case 11:
                        (_c = this.log) === null || _c === void 0 ? void 0 : _c.call(this, 'Unhandled exception from http request:', e_4);
                        throw e_4;
                    case 12: return [3 /*break*/, 13];
                    case 13:
                        i = 0;
                        _j.label = 14;
                    case 14:
                        if (!(i < this.node.responseHandlers.length)) return [3 /*break*/, 20];
                        this.stack = lib_1.mergeVariables(this.stack, {
                            body: lib_1.castToVariables(response.body),
                            headers: lib_1.castToVariables(response.headers),
                            statusCode: response.statusCode,
                        });
                        return [4 /*yield*/, __await({
                                kind: 'explore',
                                what: { node: this.node.responseHandlers[i] },
                                stack: this.stack,
                                childIdentifier: this.childIdentifier + ".response[" + i + "]",
                            })];
                    case 15: return [4 /*yield*/, _j.sent()];
                    case 16:
                        result = _j.sent();
                        terminate = this.processChildResult(result).terminate;
                        if (this.outcome !== undefined && 'error' in this.outcome) {
                            this.outcome.fromHttp = true;
                        }
                        if (!terminate) return [3 /*break*/, 18];
                        return [4 /*yield*/, __await(this.prepareResultDone(undefined, true))];
                    case 17: return [2 /*return*/, _j.sent()];
                    case 18:
                        // found handler
                        if (result.value === true) {
                            return [3 /*break*/, 30];
                        }
                        _j.label = 19;
                    case 19:
                        i += 1;
                        return [3 /*break*/, 14];
                    case 20:
                        if (!(this.externalHandler.unhandledHttp !== undefined)) return [3 /*break*/, 26];
                        action = void 0;
                        _j.label = 21;
                    case 21:
                        _j.trys.push([21, 23, , 25]);
                        return [4 /*yield*/, __await(((_f = (_d = this.externalHandler).unhandledHttp) === null || _f === void 0 ? void 0 : _f.call(_d, undefined, // TODO: can we perform error handling some other way?
                            this.node, response)))];
                    case 22:
                        action = _j.sent();
                        return [3 /*break*/, 25];
                    case 23:
                        e_5 = _j.sent();
                        return [4 /*yield*/, __await({ kind: 'error', error: e_5 })];
                    case 24: 
                    // TODO: typecheck?
                    return [2 /*return*/, _j.sent()];
                    case 25:
                        action = action !== null && action !== void 0 ? action : 'continue';
                        (_g = this.log) === null || _g === void 0 ? void 0 : _g.call(this, "Processing unhandled response (" + response.statusCode + ") with external handler:", action);
                        if (action !== 'retry') {
                            return [3 /*break*/, 30];
                        }
                        return [3 /*break*/, 29];
                    case 26:
                        (_h = this.log) === null || _h === void 0 ? void 0 : _h.call(this, "Processing unhandled response (" + response.statusCode + ") with built-in handler");
                        if (!(response.statusCode >= 400)) return [3 /*break*/, 28];
                        return [4 /*yield*/, __await({
                                kind: 'error',
                                error: new map_interpreter_errors_1.HTTPError('HTTP Error', { node: this.node }, response.statusCode, response.debug.request, { body: response.body, headers: response.headers }),
                            })];
                    case 27: return [2 /*return*/, _j.sent()];
                    case 28: return [3 /*break*/, 30];
                    case 29: return [3 /*break*/, 6];
                    case 30: return [4 /*yield*/, __await(this.prepareResultDone(undefined))];
                    case 31: return [2 /*return*/, _j.sent()];
                }
            });
        });
    };
    HttpCallStatementVisitor.prototype[Symbol.toStringTag] = function () {
        return 'HttpCallStatementVisitor';
    };
    return HttpCallStatementVisitor;
}(NodeVisitor));
var HttpRequestVisitor = /** @class */ (function (_super) {
    __extends(HttpRequestVisitor, _super);
    function HttpRequestVisitor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HttpRequestVisitor.prototype.visit = function () {
        return __asyncGenerator(this, arguments, function visit_12() {
            var headers, result, queryParameters, result, body, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.node.headers !== undefined)) return [3 /*break*/, 3];
                        return [4 /*yield*/, __await({
                                kind: 'explore',
                                what: { node: this.node.headers },
                                stack: this.stack,
                                childIdentifier: this.childIdentifier + ".headers",
                            })];
                    case 1: return [4 /*yield*/, _a.sent()];
                    case 2:
                        result = _a.sent();
                        // TODO: typecheck
                        headers = result.value;
                        _a.label = 3;
                    case 3:
                        if (!(this.node.query !== undefined)) return [3 /*break*/, 6];
                        return [4 /*yield*/, __await({
                                kind: 'explore',
                                what: { node: this.node.query },
                                stack: this.stack,
                                childIdentifier: this.childIdentifier + ".query",
                            })];
                    case 4: return [4 /*yield*/, _a.sent()];
                    case 5:
                        result = _a.sent();
                        // TODO: typecheck
                        queryParameters = result.value;
                        _a.label = 6;
                    case 6:
                        if (!(this.node.body !== undefined)) return [3 /*break*/, 9];
                        return [4 /*yield*/, __await({
                                kind: 'explore',
                                what: { node: this.node.body },
                                stack: this.stack,
                                childIdentifier: this.childIdentifier + ".body",
                            })];
                    case 7: return [4 /*yield*/, _a.sent()];
                    case 8:
                        result = _a.sent();
                        // TODO: typecheck
                        body = result.value;
                        _a.label = 9;
                    case 9: return [4 /*yield*/, __await(this.prepareResultDone({
                            contentType: this.node.contentType,
                            contentLanguage: this.node.contentLanguage,
                            headers: headers,
                            queryParameters: queryParameters,
                            body: body,
                            security: this.node.security,
                        }))];
                    case 10: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    HttpRequestVisitor.prototype[Symbol.toStringTag] = function () {
        return 'HttpRequestVisitor';
    };
    return HttpRequestVisitor;
}(NodeVisitor));
var HttpResponseHandlerVisitor = /** @class */ (function (_super) {
    __extends(HttpResponseHandlerVisitor, _super);
    function HttpResponseHandlerVisitor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HttpResponseHandlerVisitor.prototype.matchResponse = function () {
        if (this.node.statusCode !== undefined &&
            this.node.statusCode !== this.stack.statusCode) {
            return lib_1.ok(false);
        }
        var headers = this.stack.headers;
        if (headers === undefined || !lib_1.isNonPrimitive(headers)) {
            return lib_1.err(new lib_1.UnexpectedError('Stack needs to contain "headers" when visiting HttpResponseHandler'));
        }
        var contentType = headers['content-type'];
        if (this.node.contentType !== undefined &&
            typeof contentType === 'string' &&
            !contentType.includes(this.node.contentType)) {
            return lib_1.ok(false);
        }
        var contentLanguage = headers['content-language'];
        if (this.node.contentLanguage !== undefined &&
            typeof contentLanguage === 'string' &&
            !contentLanguage.includes(this.node.contentLanguage)) {
            return lib_1.ok(false);
        }
        return lib_1.ok(true);
    };
    HttpResponseHandlerVisitor.prototype.visit = function () {
        var _a;
        return __asyncGenerator(this, arguments, function visit_13() {
            var matched, debugString, i, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        matched = this.matchResponse();
                        if (!matched.isErr()) return [3 /*break*/, 2];
                        return [4 /*yield*/, __await({ kind: 'error', error: matched.error })];
                    case 1: return [2 /*return*/, _b.sent()];
                    case 2:
                        if (!!matched.value) return [3 /*break*/, 4];
                        return [4 /*yield*/, __await(this.prepareResultDone(false))];
                    case 3: return [2 /*return*/, _b.sent()];
                    case 4:
                        if (((_a = this.log) === null || _a === void 0 ? void 0 : _a.enabled) === true) {
                            debugString = 'Running http handler:';
                            if (this.node.contentType !== undefined) {
                                debugString += " content-type: \"" + this.node.contentType + "\"";
                            }
                            if (this.node.contentLanguage !== undefined) {
                                debugString += " content-language: \"" + this.node.contentLanguage + "\"";
                            }
                            if (this.node.statusCode !== undefined) {
                                debugString += " code: \"" + this.node.statusCode + "\"";
                            }
                            this.log(debugString);
                        }
                        i = 0;
                        _b.label = 5;
                    case 5:
                        if (!(i < this.node.statements.length)) return [3 /*break*/, 10];
                        return [4 /*yield*/, __await({
                                kind: 'explore',
                                what: { node: this.node.statements[i] },
                                stack: this.stack,
                                childIdentifier: this.childIdentifier + ".statements[" + i + "]",
                            })];
                    case 6: return [4 /*yield*/, _b.sent()];
                    case 7:
                        result = _b.sent();
                        if (!this.processChildResult(result).terminate) return [3 /*break*/, 9];
                        return [4 /*yield*/, __await(this.prepareResultDone(undefined, true))];
                    case 8: return [2 /*return*/, _b.sent()];
                    case 9:
                        i += 1;
                        return [3 /*break*/, 5];
                    case 10: return [4 /*yield*/, __await(this.prepareResultDone(true))];
                    case 11: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    HttpResponseHandlerVisitor.prototype[Symbol.toStringTag] = function () {
        return 'HttpResponseHandlerVisitor';
    };
    return HttpResponseHandlerVisitor;
}(NodeVisitor));
var OutcomeStatementVisitor = /** @class */ (function (_super) {
    __extends(OutcomeStatementVisitor, _super);
    function OutcomeStatementVisitor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OutcomeStatementVisitor.prototype.visit = function () {
        return __asyncGenerator(this, arguments, function visit_14() {
            var result_4, result, e_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.node.condition !== undefined)) return [3 /*break*/, 4];
                        return [4 /*yield*/, __await({
                                kind: 'explore',
                                what: { node: this.node.condition },
                                stack: this.stack,
                                childIdentifier: this.childIdentifier + ".condition",
                            })];
                    case 1: return [4 /*yield*/, _a.sent()];
                    case 2:
                        result_4 = _a.sent();
                        if (!(result_4.value === false)) return [3 /*break*/, 4];
                        return [4 /*yield*/, __await(this.prepareResultDone(undefined))];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4: return [4 /*yield*/, __await({
                            kind: 'explore',
                            what: { node: this.node.value },
                            stack: this.stack,
                            childIdentifier: this.childIdentifier + ".value",
                        })];
                    case 5: return [4 /*yield*/, _a.sent()];
                    case 6:
                        result = _a.sent();
                        _a.label = 7;
                    case 7:
                        _a.trys.push([7, 8, , 10]);
                        lib_1.assertIsVariables(result.value);
                        return [3 /*break*/, 10];
                    case 8:
                        e_6 = _a.sent();
                        return [4 /*yield*/, __await({ kind: 'error', error: e_6 })];
                    case 9: return [2 /*return*/, _a.sent()];
                    case 10:
                        if (!this.node.isError) return [3 /*break*/, 13];
                        if (!(result.value === undefined)) return [3 /*break*/, 12];
                        return [4 /*yield*/, __await({
                                kind: 'error',
                                error: new lib_1.UnexpectedError('Outcome error value is undefined'),
                            })];
                    case 11: return [2 /*return*/, _a.sent()];
                    case 12:
                        // TODO: deepcopy stack?
                        this.outcome = {
                            error: result.value,
                            fromHttp: false,
                            sourceNode: this.node,
                            stack: this.stack,
                        };
                        return [3 /*break*/, 14];
                    case 13:
                        this.outcome = { data: result.value };
                        _a.label = 14;
                    case 14: return [4 /*yield*/, __await(this.prepareResultDone(undefined, this.node.terminateFlow))];
                    case 15: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    OutcomeStatementVisitor.prototype[Symbol.toStringTag] = function () {
        return 'OutcomeStatementVisitor';
    };
    return OutcomeStatementVisitor;
}(NodeVisitor));
var MapInterpreter = /** @class */ (function () {
    function MapInterpreter(parameters, _a) {
        var fetchInstance = _a.fetchInstance, externalHandler = _a.externalHandler, sandbox = _a.sandbox, config = _a.config, logger = _a.logger, crypto = _a.crypto;
        this.parameters = parameters;
        this.http = new http_1.HttpClient(fetchInstance, crypto, logger);
        this.externalHandler = externalHandler !== null && externalHandler !== void 0 ? externalHandler : {};
        this.sandbox = sandbox;
        this.config = config;
        this.logger = logger;
        this.log = logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE);
    }
    MapInterpreter.handleFinalOutcome = function (outcome, ast) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, data, e_7;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        outcome = outcome !== null && outcome !== void 0 ? outcome : { data: undefined };
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, , 7]);
                        if (!('error' in outcome)) return [3 /*break*/, 3];
                        _a = outcome;
                        return [4 /*yield*/, MapInterpreter.resolveOutcomeVariables(outcome.error)];
                    case 2:
                        _a.error = _b.sent();
                        return [2 /*return*/, lib_1.err(MapInterpreter.wrapOutcomeError(outcome, ast))];
                    case 3: return [4 /*yield*/, MapInterpreter.resolveOutcomeVariables(outcome.data)];
                    case 4:
                        data = _b.sent();
                        return [2 /*return*/, lib_1.ok(data)];
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        e_7 = _b.sent();
                        // catch promise throws, but this is very hard to work with
                        return [2 /*return*/, lib_1.err(e_7)];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    MapInterpreter.wrapOutcomeError = function (outcome, ast) {
        var error;
        if (outcome.fromHttp) {
            var statusCode = undefined;
            if ('statusCode' in outcome.stack &&
                typeof outcome.stack.statusCode === 'number') {
                statusCode = outcome.stack.statusCode;
            }
            error = new map_interpreter_errors_1.MappedHTTPError('Expected HTTP error', { node: outcome.sourceNode, ast: ast }, statusCode, outcome.error);
        }
        else {
            error = new map_interpreter_errors_1.MappedError('Expected error', { node: outcome.sourceNode, ast: ast }, outcome.error);
        }
        return error;
    };
    MapInterpreter.enrichError = function (error, ast) {
        if (error instanceof lib_1.UnexpectedError) {
            if (typeof error.additionalContext === 'object' &&
                error.additionalContext !== null) {
                error.additionalContext['ast'] = ast;
            }
            else if (error.additionalContext === undefined) {
                error.additionalContext = { ast: ast };
            }
            else {
                // TODO: we could wrap the original additionalContext or bail?
            }
        }
        else if (error instanceof lib_1.SDKExecutionError) {
            // pass
        }
        else {
            if (error.metadata !== undefined) {
                error.metadata.ast = ast;
            }
            else {
                error.metadata = { ast: ast };
            }
        }
        return error;
    };
    MapInterpreter.gatherOperations = function (ast) {
        return Object.fromEntries(ast.definitions.filter(ast_1.isOperationDefinitionNode).map(function (op) { return [op.name, op]; }));
    };
    MapInterpreter.findEntry = function (ast, usecaseName) {
        var entry = ast.definitions
            .filter(ast_1.isMapDefinitionNode)
            .find(function (definition) { return definition.usecaseName === usecaseName; });
        if (entry === undefined) {
            return lib_1.err(new map_interpreter_errors_1.MapASTError("Usecase not found: " + (usecaseName !== null && usecaseName !== void 0 ? usecaseName : 'undefined') + "!", {
                node: ast,
                ast: ast,
            }));
        }
        return lib_1.ok(entry);
    };
    MapInterpreter.initializeInput = function (input) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, value, e_8_1;
            var e_8, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 7, 8, 9]);
                        _a = __values(Object.values(input)), _b = _a.next();
                        _d.label = 1;
                    case 1:
                        if (!!_b.done) return [3 /*break*/, 6];
                        value = _b.value;
                        if (!interfaces_1.isInitializable(value)) return [3 /*break*/, 3];
                        return [4 /*yield*/, value.initialize()];
                    case 2:
                        _d.sent();
                        return [3 /*break*/, 5];
                    case 3:
                        if (!lib_1.isNonPrimitive(value)) return [3 /*break*/, 5];
                        return [4 /*yield*/, MapInterpreter.initializeInput(value)];
                    case 4:
                        _d.sent();
                        _d.label = 5;
                    case 5:
                        _b = _a.next();
                        return [3 /*break*/, 1];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_8_1 = _d.sent();
                        e_8 = { error: e_8_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_8) throw e_8.error; }
                        return [7 /*endfinally*/];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    MapInterpreter.destroyInput = function (input) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, value, e_9_1;
            var e_9, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 7, 8, 9]);
                        _a = __values(Object.values(input)), _b = _a.next();
                        _d.label = 1;
                    case 1:
                        if (!!_b.done) return [3 /*break*/, 6];
                        value = _b.value;
                        if (!interfaces_1.isDestructible(value)) return [3 /*break*/, 3];
                        return [4 /*yield*/, value.destroy()];
                    case 2:
                        _d.sent();
                        return [3 /*break*/, 5];
                    case 3:
                        if (!lib_1.isNonPrimitive(value)) return [3 /*break*/, 5];
                        return [4 /*yield*/, MapInterpreter.destroyInput(value)];
                    case 4:
                        _d.sent();
                        _d.label = 5;
                    case 5:
                        _b = _a.next();
                        return [3 /*break*/, 1];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_9_1 = _d.sent();
                        e_9 = { error: e_9_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_9) throw e_9.error; }
                        return [7 /*endfinally*/];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    MapInterpreter.resolveOutcomeVariables = function (input) {
        return __awaiter(this, void 0, void 0, function () {
            var result, _a, _b, _c, key, value, _d, _f, e_10_1;
            var e_10, _g;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        if (interfaces_1.isBinaryData(input)) {
                            throw new lib_1.UnexpectedError('BinaryData cannot be used as outcome');
                        }
                        if (lib_1.isPrimitive(input)) {
                            // beware: implicit promise flattening happens here
                            return [2 /*return*/, input];
                        }
                        result = {};
                        _h.label = 1;
                    case 1:
                        _h.trys.push([1, 6, 7, 8]);
                        _a = __values(Object.entries(input)), _b = _a.next();
                        _h.label = 2;
                    case 2:
                        if (!!_b.done) return [3 /*break*/, 5];
                        _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                        _d = result;
                        _f = key;
                        return [4 /*yield*/, MapInterpreter.resolveOutcomeVariables(value)];
                    case 3:
                        _d[_f] = _h.sent();
                        _h.label = 4;
                    case 4:
                        _b = _a.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_10_1 = _h.sent();
                        e_10 = { error: e_10_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (_b && !_b.done && (_g = _a.return)) _g.call(_a);
                        }
                        finally { if (e_10) throw e_10.error; }
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/, result];
                }
            });
        });
    };
    MapInterpreter.prototype.perform = function (ast) {
        return __awaiter(this, void 0, void 0, function () {
            var iter, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        iter = this.performStream(ast);
                        return [4 /*yield*/, iter.next()];
                    case 1:
                        result = _a.sent();
                        if (result.done !== true || result.value === undefined) {
                            return [2 /*return*/, lib_1.err(new lib_1.UnexpectedError('Map attempted to yield values but non-streaming perform was invoked'))];
                        }
                        return [2 /*return*/, result.value];
                }
            });
        });
    };
    // eslint-disable-next-line require-yield
    MapInterpreter.prototype.performStream = function (ast) {
        var _a, _b, _c;
        return __asyncGenerator(this, arguments, function performStream_1() {
            var operations, entryResult, entry, nodeStack, lastResult, current, step, _d, node, result;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        if (!!ast_1.isMapDocumentNode(ast)) return [3 /*break*/, 2];
                        return [4 /*yield*/, __await(lib_1.err(new lib_1.UnexpectedError('Invalid AST')))];
                    case 1: return [2 /*return*/, _f.sent()];
                    case 2:
                        operations = MapInterpreter.gatherOperations(ast);
                        entryResult = MapInterpreter.findEntry(ast, this.parameters.usecase);
                        if (!entryResult.isErr()) return [3 /*break*/, 4];
                        return [4 /*yield*/, __await(lib_1.err(entryResult.error))];
                    case 3: 
                    // oof: it would be nice if Err didn't carry the value type parameter so we could do `return entryResult` here.
                    // where is muh Rust when I need it
                    return [2 /*return*/, _f.sent()];
                    case 4:
                        entry = entryResult.value;
                        if (!!lib_1.isNone(this.parameters.input)) return [3 /*break*/, 6];
                        return [4 /*yield*/, __await(MapInterpreter.initializeInput(this.parameters.input))];
                    case 5:
                        _f.sent();
                        _f.label = 6;
                    case 6:
                        nodeStack = [
                            this.createVisitor(entry, {}, 'root'),
                        ];
                        lastResult = undefined;
                        _f.label = 7;
                    case 7:
                        if (!(nodeStack.length > 0)) return [3 /*break*/, 22];
                        current = nodeStack[nodeStack.length - 1];
                        (_a = this.log) === null || _a === void 0 ? void 0 : _a.call(this, 'Stepping', current.toString(), '<<', lastResult);
                        step = void 0;
                        if (!(lastResult !== undefined)) return [3 /*break*/, 9];
                        return [4 /*yield*/, __await(current.next(lastResult))];
                    case 8:
                        step = _f.sent();
                        return [3 /*break*/, 11];
                    case 9: return [4 /*yield*/, __await(current.next())];
                    case 10:
                        step = _f.sent();
                        _f.label = 11;
                    case 11:
                        (_b = this.log) === null || _b === void 0 ? void 0 : _b.call(this, step.done === true ? 'Returned' : 'Yielded', current.toString(), '>>', step.value);
                        lastResult = undefined;
                        _d = step.value.kind;
                        switch (_d) {
                            case 'explore': return [3 /*break*/, 12];
                            case 'done': return [3 /*break*/, 16];
                            case 'error': return [3 /*break*/, 17];
                            case 'yield': return [3 /*break*/, 19];
                        }
                        return [3 /*break*/, 20];
                    case 12:
                        node = void 0;
                        if (!('node' in step.value.what)) return [3 /*break*/, 13];
                        node = step.value.what.node;
                        return [3 /*break*/, 15];
                    case 13:
                        node = operations[step.value.what.operation];
                        if (!(node === undefined)) return [3 /*break*/, 15];
                        return [4 /*yield*/, __await(lib_1.err(new map_interpreter_errors_1.MapASTError("Operation not found: " + step.value.what.operation, { node: current.node, ast: ast })))];
                    case 14: return [2 /*return*/, _f.sent()];
                    case 15:
                        nodeStack.push(this.createVisitor(node, step.value.stack, step.value.childIdentifier));
                        return [3 /*break*/, 21];
                    case 16:
                        nodeStack.pop();
                        lastResult = step.value;
                        return [3 /*break*/, 21];
                    case 17: return [4 /*yield*/, __await(lib_1.err(MapInterpreter.enrichError(step.value.error, ast)))];
                    case 18: return [2 /*return*/, _f.sent()];
                    case 19: throw new Error('TODO: not implemented yet');
                    case 20:
                        assertUnreachable(step.value);
                        _f.label = 21;
                    case 21: return [3 /*break*/, 7];
                    case 22: return [4 /*yield*/, __await(MapInterpreter.handleFinalOutcome((_c = lastResult === null || lastResult === void 0 ? void 0 : lastResult.outcome) === null || _c === void 0 ? void 0 : _c.value, ast))];
                    case 23:
                        result = _f.sent();
                        if (!(result.isOk() && !lib_1.isNone(this.parameters.input))) return [3 /*break*/, 25];
                        return [4 /*yield*/, __await(MapInterpreter.destroyInput(this.parameters.input))];
                    case 24:
                        _f.sent();
                        _f.label = 25;
                    case 25: return [4 /*yield*/, __await(result)];
                    case 26: return [2 /*return*/, _f.sent()];
                }
            });
        });
    };
    MapInterpreter.prototype.createVisitor = function (node, stack, childIdentifier) {
        var _a, _b;
        if (((_a = this.log) === null || _a === void 0 ? void 0 : _a.enabled) === true) {
            var loc = '';
            if (node.location !== undefined) {
                loc = "@" + node.location.start.line + ":" + node.location.start.column;
            }
            (_b = this.log) === null || _b === void 0 ? void 0 : _b.call(this, "Visiting " + node.kind + "(" + childIdentifier + ")" + loc + " <<", {
                stack: stack,
                childIdentifier: childIdentifier,
            });
        }
        switch (node.kind) {
            case 'MapDefinition':
                return new MapDefinitionVisitor(node, stack, childIdentifier, this.log);
            case 'OperationDefinition':
                return new OperationDefinitionVisitor(node, stack, childIdentifier, this.log);
            case 'SetStatement':
                return new SetStatementVisitor(node, stack, childIdentifier, this.log);
            case 'ConditionAtom':
                return new ConditionAtomVisitor(node, stack, childIdentifier, this.log);
            case 'IterationAtom':
                return new IterationAtomVisitor(node, stack, childIdentifier, this.log);
            case 'Assignment':
                return new AssignmentVisitor(node, stack, childIdentifier, this.log);
            case 'PrimitiveLiteral':
                return new PrimitiveLiteralVisitor(node, stack, childIdentifier, this.log);
            case 'ObjectLiteral':
                return new ObjectLiteralVisitor(node, stack, childIdentifier, this.log);
            case 'JessieExpression':
                return new JessieExpressionVisitor(node, stack, childIdentifier, this.log, this.sandbox, this.config, this.logger, this.parameters.input, this.parameters.parameters);
            case 'InlineCall':
                return new CallVisitor(node, stack, childIdentifier, this.log);
            case 'CallStatement':
                return new CallVisitor(node, stack, childIdentifier, this.log);
            case 'HttpCallStatement':
                return new HttpCallStatementVisitor(node, stack, childIdentifier, this.log, this.http, this.externalHandler, this.parameters.services, this.parameters.input, this.parameters.parameters, this.parameters.security);
            case 'HttpRequest':
                return new HttpRequestVisitor(node, stack, childIdentifier, this.log);
            case 'HttpResponseHandler':
                return new HttpResponseHandlerVisitor(node, stack, childIdentifier, this.log);
            case 'OutcomeStatement':
                return new OutcomeStatementVisitor(node, stack, childIdentifier, this.log);
            case 'MapHeader':
                throw new Error('Method not implemented.');
            case 'MapDocument':
                throw new Error('Method not implemented.');
            default:
                assertUnreachable(node);
        }
    };
    return MapInterpreter;
}());
exports.MapInterpreter = MapInterpreter;
//# sourceMappingURL=map-interpreter.js.map