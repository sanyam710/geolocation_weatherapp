"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveProfileId = exports.InternalClient = void 0;
var ast_1 = require("@superfaceai/ast");
var lib_1 = require("../../lib");
var errors_1 = require("../errors");
var profile_1 = require("../profile");
var InternalClient = /** @class */ (function () {
    function InternalClient(events, superJson, config, sandbox, timers, fileSystem, boundProfileProviderCache, crypto, fetchInstance, logger) {
        this.events = events;
        this.superJson = superJson;
        this.config = config;
        this.sandbox = sandbox;
        this.timers = timers;
        this.fileSystem = fileSystem;
        this.boundProfileProviderCache = boundProfileProviderCache;
        this.crypto = crypto;
        this.fetchInstance = fetchInstance;
        this.logger = logger;
    }
    InternalClient.prototype.getProfile = function (profile) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, id, version, ast, profileConfiguration;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = resolveProfileId(profile), id = _a.id, version = _a.version;
                        return [4 /*yield*/, profile_1.resolveProfileAst({
                                profileId: id,
                                version: version,
                                logger: this.logger,
                                fetchInstance: this.fetchInstance,
                                fileSystem: this.fileSystem,
                                config: this.config,
                                crypto: this.crypto,
                                superJson: this.superJson,
                            })];
                    case 1:
                        ast = _b.sent();
                        return [4 /*yield*/, this.getProfileConfiguration(ast)];
                    case 2:
                        profileConfiguration = _b.sent();
                        return [2 /*return*/, new profile_1.Profile(profileConfiguration, ast, this.events, this.superJson, this.config, this.sandbox, this.timers, this.fileSystem, this.boundProfileProviderCache, this.crypto, this.fetchInstance, this.logger)];
                }
            });
        });
    };
    InternalClient.prototype.getProfileConfiguration = function (ast) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var profileId, profileSettings, priority;
            var _this = this;
            return __generator(this, function (_b) {
                profileId = lib_1.profileAstId(ast);
                if (this.superJson !== undefined) {
                    profileSettings = this.superJson.profiles[profileId];
                    if (profileSettings === undefined) {
                        throw errors_1.profileNotInstalledError(profileId);
                    }
                    if ('file' in profileSettings) {
                        priority = profileSettings.priority;
                        if (!priority.every(function (p) { var _a; return (_a = _this.superJson) === null || _a === void 0 ? void 0 : _a.providers[p]; })) {
                            throw errors_1.unconfiguredProviderInPriorityError(profileId, priority, Object.keys((_a = this.superJson.providers) !== null && _a !== void 0 ? _a : []));
                        }
                    }
                }
                return [2 /*return*/, new profile_1.ProfileConfiguration(profileId, lib_1.versionToString(ast.header.version))];
            });
        });
    };
    return InternalClient;
}());
exports.InternalClient = InternalClient;
function resolveProfileId(profile) {
    var _a;
    var id;
    var version;
    if (typeof profile === 'string') {
        _a = __read(profile.split('@'), 2), id = _a[0], version = _a[1];
    }
    else {
        id = profile.id;
        version = profile.version;
    }
    // Check if version is full
    if (version !== undefined) {
        var extracted = ast_1.extractVersion(version);
        if (extracted.minor === undefined) {
            throw errors_1.invalidVersionError(version, 'minor');
        }
        if (extracted.patch === undefined) {
            throw errors_1.invalidVersionError(version, 'patch');
        }
    }
    // Check scope and name
    var name, scope = undefined;
    var _b = __read(id.split('/'), 2), scopeOrName = _b[0], possibleName = _b[1];
    if (possibleName === undefined) {
        name = scopeOrName;
    }
    else {
        scope = scopeOrName;
        name = possibleName;
    }
    if (scope !== undefined && !ast_1.isValidDocumentName(scope)) {
        throw errors_1.invalidIdentifierIdError(scope, 'Scope');
    }
    if (!ast_1.isValidDocumentName(name)) {
        throw errors_1.invalidIdentifierIdError(name, 'Name');
    }
    return { id: id, version: version };
}
exports.resolveProfileId = resolveProfileId;
//# sourceMappingURL=client.internal.js.map