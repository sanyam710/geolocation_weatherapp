"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.variablesToStrings = exports.variableToString = exports.mergeVariables = exports.castToNonPrimitive = exports.castToVariables = exports.assertIsVariables = exports.isEmptyRecord = exports.isVariables = exports.isNonPrimitive = exports.isPrimitive = exports.isNone = exports.isClassInstance = void 0;
var interfaces_1 = require("../../interfaces");
var error_1 = require("../error");
// FIXME: This is temporary solution; find a better way to handle this
function isClassInstance(input) {
    if (input === null || input === undefined) {
        return false;
    }
    if (typeof input !== 'object') {
        return false;
    }
    if (Array.isArray(input)) {
        return false;
    }
    var proto = Object.getPrototypeOf(input);
    if (proto === null || proto === Object.prototype) {
        return false;
    }
    return typeof proto.constructor === 'function';
}
exports.isClassInstance = isClassInstance;
function isNone(input) {
    return input === undefined || input === null;
}
exports.isNone = isNone;
function isPrimitive(input) {
    return (['string', 'number', 'boolean'].includes(typeof input) ||
        Array.isArray(input) ||
        isNone(input) ||
        interfaces_1.isBinaryData(input) ||
        Buffer.isBuffer(input) ||
        isClassInstance(input));
}
exports.isPrimitive = isPrimitive;
function isNonPrimitive(input) {
    return (typeof input === 'object' &&
        input !== null &&
        !Array.isArray(input) &&
        !interfaces_1.isBinaryData(input) &&
        !Buffer.isBuffer(input) &&
        !isClassInstance(input));
}
exports.isNonPrimitive = isNonPrimitive;
function isVariables(input) {
    return isPrimitive(input) || isNonPrimitive(input);
}
exports.isVariables = isVariables;
function isEmptyRecord(input) {
    return isNonPrimitive(input) && Object.keys(input).length === 0;
}
exports.isEmptyRecord = isEmptyRecord;
function assertIsVariables(input) {
    if (!isVariables(input)) {
        throw new error_1.UnexpectedError("Invalid result type: " + typeof input);
    }
}
exports.assertIsVariables = assertIsVariables;
function castToVariables(input) {
    assertIsVariables(input);
    return input;
}
exports.castToVariables = castToVariables;
function castToNonPrimitive(input) {
    if (!isNonPrimitive(input)) {
        throw new error_1.UnexpectedError('Input is not NonPrimitive');
    }
    return input;
}
exports.castToNonPrimitive = castToNonPrimitive;
/**
 * Recursively merges variables from `left` and then from `right` into a new object.
 */
function mergeVariables(left, right) {
    var e_1, _a, e_2, _b;
    var result = {};
    try {
        for (var _c = __values(Object.keys(left)), _d = _c.next(); !_d.done; _d = _c.next()) {
            var key = _d.value;
            result[key] = left[key];
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
    try {
        for (var _e = __values(Object.keys(right)), _f = _e.next(); !_f.done; _f = _e.next()) {
            var key = _f.value;
            var l = left[key];
            var r = right[key];
            if (r !== undefined &&
                l !== undefined &&
                isNonPrimitive(r) &&
                isNonPrimitive(l)) {
                result[key] = mergeVariables(l, r);
            }
            else {
                result[key] = right[key];
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return result;
}
exports.mergeVariables = mergeVariables;
/**
 * Turns a variable (both primitive and non-primitive) into a string.
 */
function variableToString(variable) {
    if (typeof variable === 'string') {
        return variable;
    }
    if (variable === undefined) {
        return 'undefined';
    }
    if (Buffer.isBuffer(variable)) {
        return variable.toString();
    }
    return JSON.stringify(variable);
}
exports.variableToString = variableToString;
/**
 * Stringifies a Record of variables. `None` values are removed.
 */
function variablesToStrings(variables) {
    var e_3, _a;
    var result = {};
    try {
        for (var _b = __values(Object.entries(variables)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
            if (!isNone(value)) {
                result[key] = variableToString(value);
            }
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return result;
}
exports.variablesToStrings = variablesToStrings;
//# sourceMappingURL=variables.js.map