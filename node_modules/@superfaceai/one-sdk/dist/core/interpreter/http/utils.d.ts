import type { ILogger } from '../../../interfaces';
import type { NonPrimitive, Result } from '../../../lib';
import type { HttpMultiMap, IFetch } from './interfaces';
import type { HttpRequest } from './security';
import type { HttpResponse } from './types';
export declare function variablesToHttpMap(variables: NonPrimitive): Result<HttpMultiMap, [key: string, value: unknown]>;
export declare const createUrl: (inputUrl: string, parameters: {
    baseUrl: string;
    pathParameters?: NonPrimitive | undefined;
    integrationParameters?: Record<string, string> | undefined;
}) => string;
export declare function fetchRequest(fetchInstance: IFetch, request: HttpRequest, logger?: ILogger): Promise<HttpResponse>;
/**
 * Get header value. For duplicate headers all delimited by `,` are returned
 */
export declare function getHeader(headers: NonPrimitive, headerName: string): string;
/**
 * Checks in case-insensitive way if the given header is present
 */
export declare function hasHeader(headers: NonPrimitive, headerName: string): boolean;
export declare function setHeader(headers: NonPrimitive, headerName: string, value: string): void;
/**
 * Deletes header
 */
export declare function deleteHeader(headers: NonPrimitive, headerName: string): void;
/** Returns case-insensitive header value(s) from multimap. */
export declare function getHeaderMulti(map: HttpMultiMap, headerKey: string): string[] | undefined;
