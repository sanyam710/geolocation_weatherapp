import type { UsecaseType } from '../../core';
import { TypedProfile } from '../../core';
import type { NonPrimitive } from '../../lib';
import { SuperfaceClientBase } from './client';
declare type ProfileUseCases<TInput extends NonPrimitive | undefined, TOutput> = {
    [profile: string]: UsecaseType<TInput, TOutput>;
};
export declare type TypedSuperfaceClient<TProfiles extends ProfileUseCases<any, any>> = SuperfaceClientBase & {
    getProfile<TProfile extends keyof TProfiles>(profile: TProfile | {
        id: TProfile;
        version?: string;
    }): Promise<TypedProfile<TProfiles[TProfile]>>;
};
export declare function createTypedClient<TProfiles extends ProfileUseCases<any, any>>(profileDefinitions: TProfiles): {
    new (): TypedSuperfaceClient<TProfiles>;
};
export declare const typeHelper: <TInput, TOutput>() => [TInput, TOutput];
export {};
