"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertMapDocumentNode = exports.isSetStatementNode = exports.isPrimitiveLiteralNode = exports.isOutcomeStatementNode = exports.isOperationDefinitionNode = exports.isObjectLiteralNode = exports.isMapHeaderNode = exports.isMapDefinitionNode = exports.isJessieExpressionNode = exports.isIterationAtomNode = exports.isInlineCallNode = exports.isHttpResponseHandlerNode = exports.isHttpRequestNode = exports.isHttpCallStatementNode = exports.isConditionAtomNode = exports.isCallStatementNode = exports.isAssignmentNode = exports.isMapDocumentNode = void 0;
var validation_1 = require("../../validation");
var schema = __importStar(require("./map-ast.schema.json"));
var assertMapDocument = (0, validation_1.prepareAssert)(schema, 'map-ast');
var isMapDocumentNode = function (node) {
    try {
        assertMapDocument(node);
        return true;
    }
    catch (_a) {
        return false;
    }
};
exports.isMapDocumentNode = isMapDocumentNode;
// We don't need to do JSON Schema validation on these, as they should be already validated
var isAssignmentNode = function (node) {
    return node.kind === 'Assignment';
};
exports.isAssignmentNode = isAssignmentNode;
var isCallStatementNode = function (node) { return node.kind === 'CallStatement'; };
exports.isCallStatementNode = isCallStatementNode;
var isConditionAtomNode = function (node) { return node.kind === 'ConditionAtom'; };
exports.isConditionAtomNode = isConditionAtomNode;
var isHttpCallStatementNode = function (node) { return node.kind === 'HttpCallStatement'; };
exports.isHttpCallStatementNode = isHttpCallStatementNode;
var isHttpRequestNode = function (node) {
    return node.kind === 'HttpRequest';
};
exports.isHttpRequestNode = isHttpRequestNode;
var isHttpResponseHandlerNode = function (node) { return node.kind === 'HttpResponseHandler'; };
exports.isHttpResponseHandlerNode = isHttpResponseHandlerNode;
var isInlineCallNode = function (node) {
    return node.kind === 'InlineCall';
};
exports.isInlineCallNode = isInlineCallNode;
var isIterationAtomNode = function (node) { return node.kind === 'IterationAtom'; };
exports.isIterationAtomNode = isIterationAtomNode;
var isJessieExpressionNode = function (node) { return node.kind === 'JessieExpression'; };
exports.isJessieExpressionNode = isJessieExpressionNode;
var isMapDefinitionNode = function (node) { return node.kind === 'MapDefinition'; };
exports.isMapDefinitionNode = isMapDefinitionNode;
var isMapHeaderNode = function (node) {
    return node.kind === 'MapHeader';
};
exports.isMapHeaderNode = isMapHeaderNode;
var isObjectLiteralNode = function (node) { return node.kind === 'ObjectLiteral'; };
exports.isObjectLiteralNode = isObjectLiteralNode;
var isOperationDefinitionNode = function (node) { return node.kind === 'OperationDefinition'; };
exports.isOperationDefinitionNode = isOperationDefinitionNode;
var isOutcomeStatementNode = function (node) { return node.kind === 'OutcomeStatement'; };
exports.isOutcomeStatementNode = isOutcomeStatementNode;
var isPrimitiveLiteralNode = function (node) { return node.kind === 'PrimitiveLiteral'; };
exports.isPrimitiveLiteralNode = isPrimitiveLiteralNode;
var isSetStatementNode = function (node) { return node.kind === 'SetStatement'; };
exports.isSetStatementNode = isSetStatementNode;
function assertMapDocumentNode(node) {
    assertMapDocument(node);
    return node;
}
exports.assertMapDocumentNode = assertMapDocumentNode;
//# sourceMappingURL=map-ast.utils.js.map