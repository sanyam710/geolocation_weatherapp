"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isResultValidationError = exports.isInputValidationError = exports.ResultValidationError = exports.InputValidationError = exports.formatErrors = exports.addFieldToErrors = exports.isWrongTypeError = void 0;
var lib_1 = require("../../lib");
function isWrongTypeError(err) {
    return err.kind === 'wrongType';
}
exports.isWrongTypeError = isWrongTypeError;
function addFieldToErrors(errors, field) {
    return errors.map(function (err) {
        return err.kind === 'missingRequired'
            ? __assign(__assign({}, err), { context: __assign(__assign({}, err.context), { field: field }) }) : err;
    });
}
exports.addFieldToErrors = addFieldToErrors;
function formatErrors(errors) {
    if (!errors) {
        return 'Unknown error';
    }
    return errors
        .map(function (err) {
        var _a, _b;
        var prefix = ((_a = err.context) === null || _a === void 0 ? void 0 : _a.path)
            ? "Path: " + err.context.path.join('.') + "\nError: "
            : 'Error: ';
        switch (err.kind) {
            case 'wrongType':
                return prefix + "Wrong type: expected " + err.context.expected + ", but got " + err.context.actual;
            case 'notArray':
                return "" + prefix + JSON.stringify(err.context.input) + " is not an array";
            case 'missingRequired':
                return prefix + "Missing required field";
            case 'wrongUnion':
                return prefix + "Result does not satisfy union: expected one of: " + err.context.expected.join(', ');
            case 'elementsInArrayWrong':
                return prefix + "Some elements in array do not match criteria:\n" + formatErrors(err.context.suberrors);
            case 'enumValue':
                return (prefix + "Invalid enum value" +
                    (err.context !== undefined ? ": " + ((_b = err.context) === null || _b === void 0 ? void 0 : _b.actual) : ''));
            case 'wrongInput':
                return 'Wrong input';
            case 'nullInNonNullable':
                return prefix + "Null in non-nullable field";
            default:
                throw new lib_1.UnexpectedError('Invalid error!');
        }
    })
        .join('\n');
}
exports.formatErrors = formatErrors;
var InputValidationError = /** @class */ (function (_super) {
    __extends(InputValidationError, _super);
    function InputValidationError(errors) {
        var _this = _super.call(this, 'InputValidationError', 'Input validation failed:' + '\n' + formatErrors(errors)) || this;
        _this.errors = errors;
        _this.name = 'InputValidationError';
        return _this;
    }
    return InputValidationError;
}(lib_1.ErrorBase));
exports.InputValidationError = InputValidationError;
var ResultValidationError = /** @class */ (function (_super) {
    __extends(ResultValidationError, _super);
    function ResultValidationError(errors) {
        var _this = _super.call(this, 'ResultValidationError', 'Result validation failed:' + '\n' + formatErrors(errors)) || this;
        _this.errors = errors;
        _this.name = 'ResultValidationError';
        return _this;
    }
    return ResultValidationError;
}(lib_1.ErrorBase));
exports.ResultValidationError = ResultValidationError;
var isInputValidationError = function (err) {
    return err instanceof InputValidationError;
};
exports.isInputValidationError = isInputValidationError;
var isResultValidationError = function (err) {
    return err instanceof ResultValidationError;
};
exports.isResultValidationError = isResultValidationError;
//# sourceMappingURL=profile-parameter-validator.errors.js.map