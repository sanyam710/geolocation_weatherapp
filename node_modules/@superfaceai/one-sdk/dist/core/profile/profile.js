"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Profile = exports.ProfileBase = void 0;
var ast_1 = require("@superfaceai/ast");
var errors_1 = require("../errors");
var usecase_1 = require("../usecase");
var ProfileBase = /** @class */ (function () {
    function ProfileBase(configuration, ast, events, superJson, config, sandbox, timers, fileSystem, boundProfileProviderCache, crypto, fetchInstance, logger) {
        this.configuration = configuration;
        this.ast = ast;
        this.events = events;
        this.superJson = superJson;
        this.config = config;
        this.sandbox = sandbox;
        this.timers = timers;
        this.fileSystem = fileSystem;
        this.boundProfileProviderCache = boundProfileProviderCache;
        this.crypto = crypto;
        this.fetchInstance = fetchInstance;
        this.logger = logger;
    }
    ProfileBase.prototype.getConfiguredProviders = function () {
        var _a, _b, _c;
        return Object.keys((_c = (_b = (_a = this.superJson) === null || _a === void 0 ? void 0 : _a.profiles[this.configuration.id]) === null || _b === void 0 ? void 0 : _b.providers) !== null && _c !== void 0 ? _c : {});
    };
    return ProfileBase;
}());
exports.ProfileBase = ProfileBase;
var Profile = /** @class */ (function (_super) {
    __extends(Profile, _super);
    function Profile() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Profile.prototype.getUseCase = function (name) {
        var supportedUsecaseNames = this.ast.definitions
            .filter(ast_1.isUseCaseDefinitionNode)
            .map(function (u) { return u.useCaseName; });
        if (!supportedUsecaseNames.includes(name)) {
            throw errors_1.usecaseNotFoundError(name, supportedUsecaseNames);
        }
        return new usecase_1.UseCase(this, name, this.events, this.config, this.sandbox, this.superJson, this.timers, this.fileSystem, this.crypto, this.boundProfileProviderCache, this.fetchInstance, this.logger);
    };
    return Profile;
}(ProfileBase));
exports.Profile = Profile;
//# sourceMappingURL=profile.js.map