"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveProviderJson = void 0;
var ast_1 = require("@superfaceai/ast");
var lib_1 = require("../../lib");
var errors_1 = require("../errors");
var DEBUG_NAMESPACE = 'provider-file-resolution';
function resolveProviderJson(_a) {
    var providerName = _a.providerName, superJson = _a.superJson, fileSystem = _a.fileSystem, logger = _a.logger, config = _a.config;
    return __awaiter(this, void 0, void 0, function () {
        var providerSettings, log, path, contents, providerJson;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (superJson === undefined) {
                        return [2 /*return*/, undefined];
                    }
                    providerSettings = superJson.providers[providerName];
                    if (providerSettings === undefined) {
                        throw errors_1.unconfiguredProviderError(providerName);
                    }
                    if (lib_1.isSettingsWithAst(providerSettings)) {
                        switch (typeof providerSettings.ast) {
                            case 'string':
                                return [2 /*return*/, ast_1.assertProviderJson(JSON.parse(String(providerSettings.ast)))];
                            case 'object':
                                return [2 /*return*/, ast_1.assertProviderJson(providerSettings.ast)];
                            default:
                                throw new lib_1.UnexpectedError("Unsupported ast format " + typeof providerSettings.ast);
                        }
                    }
                    if (providerSettings.file === undefined) {
                        return [2 /*return*/, undefined];
                    }
                    log = logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE);
                    path = fileSystem.path.resolve(fileSystem.path.dirname(config.superfacePath), providerSettings.file);
                    log === null || log === void 0 ? void 0 : log("Reading provider json from path: \"" + path + "\"");
                    return [4 /*yield*/, fileSystem.readFile(path)];
                case 1:
                    contents = _b.sent();
                    if (contents.isErr()) {
                        throw errors_1.referencedFileNotFoundError(path, []);
                    }
                    providerJson = ast_1.assertProviderJson(JSON.parse(contents.value));
                    // check if provider name match
                    if (providerName !== providerJson.name) {
                        throw errors_1.providersDoNotMatchError(providerJson.name, providerName, 'provider.json');
                    }
                    return [2 /*return*/, providerJson];
            }
        });
    });
}
exports.resolveProviderJson = resolveProviderJson;
//# sourceMappingURL=resolve-provider-json.js.map