"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeFileSystem = exports.handleNodeError = exports.assertSystemError = void 0;
var fs = __importStar(require("fs"));
var fs_1 = require("fs");
var path_1 = require("path");
var core_1 = require("../../core");
var lib_1 = require("../../lib");
function assertSystemError(error) {
    if (typeof error !== 'object' ||
        !('code' in error)) {
        throw new lib_1.UnexpectedError('Unexpected system error', error);
    }
}
exports.assertSystemError = assertSystemError;
function handleNodeError(e) {
    assertSystemError(e);
    if (e.code === 'EACCES') {
        return new core_1.PermissionDeniedError(e.message);
    }
    if (e.code === 'ENOENT') {
        return new core_1.NotFoundError(e.message);
    }
    if (e.code === 'EEXIST') {
        return new core_1.FileExistsError(e.message);
    }
    if (e.code === 'ENOTEMPTY') {
        return new core_1.NotEmptyError(e.message);
    }
    return new core_1.UnknownFileSystemError(e.message);
}
exports.handleNodeError = handleNodeError;
function cwd() {
    return process.cwd();
}
function exists(path) {
    return __awaiter(this, void 0, void 0, function () {
        var err_1, ioErr;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, fs_1.promises.access(path)];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    err_1 = _a.sent();
                    if (typeof err_1 === 'object' && err_1 !== null) {
                        if ('code' in err_1) {
                            ioErr = err_1;
                            if (ioErr.code === 'ENOENT') {
                                return [2 /*return*/, false];
                            }
                        }
                    }
                    throw err_1;
                case 3: return [2 /*return*/, true];
            }
        });
    });
}
function existsSync(path) {
    try {
        fs.accessSync(path);
    }
    catch (err) {
        if (typeof err === 'object' && err !== null) {
            if ('code' in err) {
                var ioErr = err;
                if (ioErr.code === 'ENOENT') {
                    return false;
                }
            }
        }
        throw err;
    }
    return true;
}
function isAccessible(path) {
    return __awaiter(this, void 0, void 0, function () {
        var err_2, ioErr;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, fs_1.promises.access(path, fs.constants.F_OK | fs.constants.R_OK | fs.constants.W_OK)];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    err_2 = _a.sent();
                    if (typeof err_2 === 'object' && err_2 !== null) {
                        if ('code' in err_2) {
                            ioErr = err_2;
                            if (ioErr.code === 'ENOENT' || ioErr.code === 'EACCES') {
                                return [2 /*return*/, false];
                            }
                        }
                    }
                    throw err_2;
                case 3: return [2 /*return*/, true];
            }
        });
    });
}
function isAccessibleSync(path) {
    try {
        fs.accessSync(path, fs.constants.F_OK | fs.constants.R_OK | fs.constants.W_OK);
    }
    catch (err) {
        if (typeof err === 'object' && err !== null) {
            if ('code' in err) {
                var ioErr = err;
                if (ioErr.code === 'ENOENT' || ioErr.code === 'EACCES') {
                    return false;
                }
            }
        }
        throw err;
    }
    return true;
}
function isDirectory(path) {
    return __awaiter(this, void 0, void 0, function () {
        var stat, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, fs_1.promises.stat(path)];
                case 1:
                    stat = _a.sent();
                    return [2 /*return*/, stat.isDirectory()];
                case 2:
                    e_1 = _a.sent();
                    return [2 /*return*/, false];
                case 3: return [2 /*return*/];
            }
        });
    });
}
function isDirectorySync(path) {
    try {
        var stat = fs.statSync(path);
        return stat.isDirectory();
    }
    catch (e) {
        return false;
    }
}
function isFile(path) {
    return __awaiter(this, void 0, void 0, function () {
        var stat, e_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, fs_1.promises.stat(path)];
                case 1:
                    stat = _a.sent();
                    return [2 /*return*/, stat.isFile()];
                case 2:
                    e_2 = _a.sent();
                    return [2 /*return*/, false];
                case 3: return [2 /*return*/];
            }
        });
    });
}
function isFileSync(path) {
    try {
        var stat = fs.statSync(path);
        return stat.isFile();
    }
    catch (e) {
        return false;
    }
}
function join() {
    var path = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        path[_i] = arguments[_i];
    }
    return path_1.join.apply(void 0, __spreadArray([], __read(path)));
}
function mkdir(path, options) {
    return __awaiter(this, void 0, void 0, function () {
        var e_3, error;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, fs_1.promises.mkdir(path, { recursive: (options === null || options === void 0 ? void 0 : options.recursive) === true })];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    e_3 = _a.sent();
                    error = handleNodeError(e_3);
                    // If the directory already exists, our job here is done
                    if (error instanceof core_1.FileExistsError) {
                        return [2 /*return*/, lib_1.ok(undefined)];
                    }
                    return [2 /*return*/, lib_1.err(error)];
                case 3: return [2 /*return*/, lib_1.ok(undefined)];
            }
        });
    });
}
function mkdirSync(path, options) {
    try {
        fs.mkdirSync(path, { recursive: (options === null || options === void 0 ? void 0 : options.recursive) === true });
    }
    catch (e) {
        var error = handleNodeError(e);
        // If the directory already exists, our job here is done
        if (error instanceof core_1.FileExistsError) {
            return lib_1.ok(undefined);
        }
        return lib_1.err(error);
    }
    return lib_1.ok(undefined);
}
function readFile(path) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, e_4;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    _a = lib_1.ok;
                    return [4 /*yield*/, fs_1.promises.readFile(path, 'utf8')];
                case 1: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];
                case 2:
                    e_4 = _b.sent();
                    return [2 /*return*/, lib_1.err(handleNodeError(e_4))];
                case 3: return [2 /*return*/];
            }
        });
    });
}
function readFileSync(path) {
    try {
        return lib_1.ok(fs.readFileSync(path, 'utf8'));
    }
    catch (e) {
        return lib_1.err(handleNodeError(e));
    }
}
function readdir(path) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, e_5;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    _a = lib_1.ok;
                    return [4 /*yield*/, fs_1.promises.readdir(path)];
                case 1: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];
                case 2:
                    e_5 = _b.sent();
                    return [2 /*return*/, lib_1.err(handleNodeError(e_5))];
                case 3: return [2 /*return*/];
            }
        });
    });
}
function readdirSync(path) {
    try {
        return lib_1.ok(fs.readdirSync(path));
    }
    catch (e) {
        return lib_1.err(handleNodeError(e));
    }
}
function resolve() {
    var pathSegments = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        pathSegments[_i] = arguments[_i];
    }
    return path_1.resolve.apply(void 0, __spreadArray([], __read(pathSegments)));
}
function relative(from, to) {
    return path_1.relative(from, to);
}
function rm(path, options) {
    return __awaiter(this, void 0, void 0, function () {
        var isDir, e_6;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    isDir = isDirectorySync(path);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 6, , 7]);
                    if (!((options === null || options === void 0 ? void 0 : options.recursive) === true || isDir)) return [3 /*break*/, 3];
                    return [4 /*yield*/, fs_1.promises.rmdir(path, { recursive: (options === null || options === void 0 ? void 0 : options.recursive) === true })];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 5];
                case 3: return [4 /*yield*/, fs_1.promises.unlink(path)];
                case 4:
                    _a.sent();
                    _a.label = 5;
                case 5: return [3 /*break*/, 7];
                case 6:
                    e_6 = _a.sent();
                    return [2 /*return*/, lib_1.err(handleNodeError(e_6))];
                case 7: return [2 /*return*/, lib_1.ok(undefined)];
            }
        });
    });
}
function rmSync(path, options) {
    var isDir = isDirectorySync(path);
    try {
        if ((options === null || options === void 0 ? void 0 : options.recursive) === true || isDir) {
            fs.rmdirSync(path, { recursive: (options === null || options === void 0 ? void 0 : options.recursive) === true });
        }
        else {
            fs.unlinkSync(path);
        }
    }
    catch (e) {
        return lib_1.err(handleNodeError(e));
    }
    return lib_1.ok(undefined);
}
function writeFile(path, data) {
    return __awaiter(this, void 0, void 0, function () {
        var e_7;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, fs_1.promises.writeFile(path, data, 'utf8')];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    e_7 = _a.sent();
                    return [2 /*return*/, lib_1.err(handleNodeError(e_7))];
                case 3: return [2 /*return*/, lib_1.ok(undefined)];
            }
        });
    });
}
function writeFileSync(path, data) {
    try {
        fs.writeFileSync(path, data, 'utf8');
    }
    catch (e) {
        return lib_1.err(handleNodeError(e));
    }
    return lib_1.ok(undefined);
}
exports.NodeFileSystem = {
    path: {
        cwd: cwd,
        dirname: path_1.dirname,
        join: join,
        normalize: path_1.normalize,
        resolve: resolve,
        relative: relative,
    },
    sync: {
        exists: existsSync,
        isAccessible: isAccessibleSync,
        isDirectory: isDirectorySync,
        isFile: isFileSync,
        mkdir: mkdirSync,
        readFile: readFileSync,
        readdir: readdirSync,
        rm: rmSync,
        writeFile: writeFileSync,
    },
    exists: exists,
    isAccessible: isAccessible,
    isDirectory: isDirectory,
    isFile: isFile,
    mkdir: mkdir,
    readFile: readFile,
    readdir: readdir,
    rm: rm,
    writeFile: writeFile,
};
//# sourceMappingURL=filesystem.node.js.map