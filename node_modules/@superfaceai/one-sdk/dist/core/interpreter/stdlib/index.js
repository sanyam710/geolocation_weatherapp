"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStdlib = void 0;
var lib_1 = require("../../../lib");
var DEBUG_NAMESPACE = 'debug-log';
var STDLIB_UNSTABLE = function (debugLog) { return ({
    time: {
        isoDateToUnixTimestamp: function (iso) {
            return new Date(iso).getTime();
        },
        unixTimestampToIsoDate: function (unix) {
            return new Date(unix).toISOString();
        },
    },
    debug: {
        log: function (formatter) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            return debugLog === null || debugLog === void 0 ? void 0 : debugLog.apply(void 0, __spreadArray([formatter], __read(args)));
        },
    },
}); };
var STDLIB = function (debugLog) {
    return lib_1.deepFreeze({
        unstable: STDLIB_UNSTABLE(debugLog),
    });
};
function getStdlib(logger) {
    var debugLog = logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE);
    // TODO: This should later decide whether to return debug functions or just their stubs
    return STDLIB(debugLog);
}
exports.getStdlib = getStdlib;
//# sourceMappingURL=index.js.map