"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.computeHash = exports.extractQop = exports.extractAlgorithm = exports.DigestHandler = exports.hashDigestConfiguration = void 0;
var lib_1 = require("../../../../../lib");
var errors_1 = require("../../../../errors");
var filters_1 = require("../../filters");
var utils_1 = require("../../utils");
var interfaces_1 = require("../interfaces");
var DEBUG_NAMESPACE = 'http:security:digest-handler';
var DEBUG_NAMESPACE_SENSITIVE = 'http:security:digest-handler:sensitive';
function hashDigestConfiguration(configuration, crypto) {
    return crypto.hashString(configuration.id + configuration.username + configuration.password, 'MD5');
}
exports.hashDigestConfiguration = hashDigestConfiguration;
/**
 * Helper for digest authentication
 */
var DigestHandler = /** @class */ (function () {
    function DigestHandler(configuration, fetchInstance, crypto, logger) {
        var _this = this;
        var _a, _b, _c, _d, _e;
        this.configuration = configuration;
        this.fetchInstance = fetchInstance;
        this.crypto = crypto;
        this.logger = logger;
        // Internal
        this.nonceRaw = 'abcdef0123456789';
        this.cnonceSize = 32;
        this.nc = 0;
        this.authenticate = function (parameters) { return __awaiter(_this, void 0, void 0, function () {
            var headers, credentials;
            var _a;
            var _this = this;
            var _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        headers = (_b = parameters.headers) !== null && _b !== void 0 ? _b : {};
                        return [4 /*yield*/, this.fetchInstance.digest.getCached(hashDigestConfiguration(this.configuration, this.crypto), function () { return __awaiter(_this, void 0, void 0, function () {
                                var response, challengeHeader, credentials;
                                var _a;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0: return [4 /*yield*/, lib_1.pipe({
                                                parameters: __assign(__assign({}, parameters), { headers: headers }),
                                            }, filters_1.prepareRequestFilter, filters_1.withRequest(filters_1.fetchFilter(this.fetchInstance, this.logger)))];
                                        case 1:
                                            response = (_b.sent()).response;
                                            if (response === undefined) {
                                                throw new Error('Response is undefined');
                                            }
                                            challengeHeader = utils_1.getHeaderMulti(response.headers, this.challengeHeader);
                                            if (response.statusCode !== this.statusCode ||
                                                challengeHeader === undefined) {
                                                throw errors_1.digestHeaderNotFound(this.challengeHeader, Object.keys(response.headers));
                                            }
                                            (_a = this.log) === null || _a === void 0 ? void 0 : _a.call(this, 'Getting new digest values');
                                            credentials = this.buildDigestAuth(
                                            // We need actual resolved url
                                            response.debug.request.url, parameters.method, this.extractDigestValues(challengeHeader));
                                            return [2 /*return*/, credentials];
                                    }
                                });
                            }); })];
                    case 1:
                        credentials = _d.sent();
                        return [2 /*return*/, __assign(__assign({}, parameters), { headers: __assign(__assign({}, headers), (_a = {}, _a[(_c = this.configuration.authorizationHeader) !== null && _c !== void 0 ? _c : interfaces_1.DEFAULT_AUTHORIZATION_HEADER_NAME] = credentials, _a)) })];
                }
            });
        }); };
        this.handleResponse = function (response, resourceRequestParameters) { return __awaiter(_this, void 0, void 0, function () {
            var challengeHeader_1, configurationHash, credentials, prepared;
            var _a;
            var _this = this;
            var _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!(response.statusCode === this.statusCode)) return [3 /*break*/, 2];
                        challengeHeader_1 = utils_1.getHeaderMulti(response.headers, this.challengeHeader);
                        if (challengeHeader_1 === undefined) {
                            throw errors_1.digestHeaderNotFound(this.challengeHeader, Object.keys(response.headers));
                        }
                        configurationHash = hashDigestConfiguration(this.configuration, this.crypto);
                        this.fetchInstance.digest.invalidate(configurationHash);
                        credentials = this.fetchInstance.digest.getCached(configurationHash, function () {
                            var _a;
                            (_a = _this.log) === null || _a === void 0 ? void 0 : _a.call(_this, 'Getting new digest values');
                            return _this.buildDigestAuth(
                            // We need actual resolved url
                            response.debug.request.url, resourceRequestParameters.method, _this.extractDigestValues(challengeHeader_1));
                        });
                        return [4 /*yield*/, filters_1.prepareRequestFilter({
                                parameters: __assign(__assign({}, resourceRequestParameters), { headers: __assign(__assign({}, resourceRequestParameters.headers), (_a = {}, _a[(_b = this.configuration.authorizationHeader) !== null && _b !== void 0 ? _b : interfaces_1.DEFAULT_AUTHORIZATION_HEADER_NAME] = credentials, _a)) }),
                            })];
                    case 1:
                        prepared = _c.sent();
                        if (prepared.request === undefined ||
                            !filters_1.isCompleteHttpRequest(prepared.request)) {
                            throw new Error('Request is undefined');
                        }
                        return [2 /*return*/, prepared.request];
                    case 2: return [2 /*return*/];
                }
            });
        }); };
        this.log = logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE);
        this.logSensitive = logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE_SENSITIVE);
        (_a = this.log) === null || _a === void 0 ? void 0 : _a.call(this, 'Initialized DigestHandler');
        this.statusCode = (_b = configuration.statusCode) !== null && _b !== void 0 ? _b : 401;
        this.challengeHeader = (_c = configuration.challengeHeader) !== null && _c !== void 0 ? _c : 'www-authenticate';
        this.authorizationHeader =
            (_d = configuration.authorizationHeader) !== null && _d !== void 0 ? _d : interfaces_1.DEFAULT_AUTHORIZATION_HEADER_NAME;
        (_e = this.logSensitive) === null || _e === void 0 ? void 0 : _e.call(this, "Initialized with: username=\"" + this.configuration.username + "\", password=\"" + this.configuration.password + "\", status code=" + this.statusCode + ", challenge header=\"" + this.challengeHeader + "\", authorization header=\"" + this.authorizationHeader + "\"");
    }
    /**
     *
     * @param url url of the request
     * @param method HTTP method
     * @param digest extracted of cached digest values
     * @returns string containing information needed to digest authorization
     */
    DigestHandler.prototype.buildDigestAuth = function (url, method, digest) {
        var _a;
        (_a = this.log) === null || _a === void 0 ? void 0 : _a.call(this, "Preparing digest authentication for: " + url + " and method: " + method);
        var uri = new URL(url).pathname;
        // Default H1
        var ha1 = computeHash(digest.algorithm, this.configuration.username + ":" + digest.realm + ":" + this.configuration.password, this.crypto);
        // sess H1 contains original H1 and also nonce and cnonce
        if (digest.algorithm.endsWith('-sess')) {
            ha1 = computeHash(digest.algorithm, ha1 + ":" + digest.nonce + ":" + digest.cnonce, this.crypto);
        }
        // H2 is same for default and sess
        var ha2 = computeHash(digest.algorithm, method + ":" + uri, this.crypto);
        this.nc++;
        var ncString = String(this.nc).padStart(8, '0');
        var response;
        // Use  QOP
        if (digest.qop) {
            // https://datatracker.ietf.org/doc/html/rfc7616#section-3.4.1
            response = ha1 + ":" + digest.nonce + ":" + ncString + ":" + digest.cnonce + ":" + digest.qop + ":" + ha2;
        }
        else {
            response = ha1 + ":" + digest.nonce + ":" + ha2;
        }
        // Hash response
        var hashedResponse = computeHash(digest.algorithm, response, this.crypto);
        // Build final auth header
        var opaqueString = digest.opaque !== undefined ? "opaque=\"" + digest.opaque + "\"" : '';
        var qopString = digest.qop ? "qop=\"" + digest.qop + "\"" : '';
        return [
            digest.scheme + " username=\"" + this.configuration.username + "\"",
            "realm=\"" + digest.realm + "\"",
            "nonce=\"" + digest.nonce + "\"",
            "uri=\"" + uri + "\"",
            opaqueString,
            qopString,
            "algorithm=\"" + digest.algorithm + "\"",
            "response=\"" + hashedResponse + "\"",
            "nc=" + ncString,
            "cnonce=\"" + digest.cnonce + "\"",
        ]
            .filter(function (s) { return s !== ''; })
            .join(',');
    };
    DigestHandler.prototype.extractDigestValues = function (headerValues) {
        var _a, _b;
        (_a = this.logSensitive) === null || _a === void 0 ? void 0 : _a.call(this, "Extracting digest authentication values from: " + headerValues.join(', '));
        if (headerValues.length != 1) {
            // TODO: the RFC does seem to allow multiple challenges:
            // https://www.rfc-editor.org/rfc/rfc2617#section-1.2
            // here we just pick the first one
        }
        var header = headerValues[0];
        var scheme = header.split(/\s/)[0];
        if (!scheme) {
            throw errors_1.missingPartOfDigestHeader(this.challengeHeader, header, 'scheme');
        }
        var nonce = extract(header, 'nonce');
        if (nonce === undefined) {
            throw errors_1.missingPartOfDigestHeader(this.challengeHeader, header, 'nonce');
        }
        return {
            scheme: scheme,
            algorithm: extractAlgorithm(header),
            realm: ((_b = extract(header, 'realm', false)) !== null && _b !== void 0 ? _b : '').replace(/["]/g, ''),
            opaque: extract(header, 'opaque'),
            qop: extractQop(header),
            nonce: nonce,
            cnonce: this.makeNonce(),
        };
    };
    DigestHandler.prototype.makeNonce = function () {
        var uid = '';
        for (var i = 0; i < this.cnonceSize; ++i) {
            uid += this.nonceRaw[this.crypto.randomInt(this.nonceRaw.length)];
        }
        return uid;
    };
    return DigestHandler;
}());
exports.DigestHandler = DigestHandler;
/**
 * Extracts "MD5", "MD5-sess", "SHA-256" or "SHA-256-sess" algorithm from passed header. "MD5" is default value.
 * @param rawHeader string containing algorithm type
 * @returns "MD5", "MD5-sess", "SHA-256" or "SHA-256-sess"
 */
function extractAlgorithm(rawHeader) {
    var extractedValue = extract(rawHeader, 'algorithm');
    if (extractedValue !== undefined) {
        if (extractedValue === 'MD5') {
            return 'MD5';
        }
        else if (extractedValue === 'MD5-sess') {
            return 'MD5-sess';
        }
        else if (extractedValue === 'SHA-256') {
            return 'SHA-256';
        }
        else if (extractedValue === 'SHA-256-sess') {
            return 'SHA-256-sess';
        }
        else {
            throw errors_1.unexpectedDigestValue('algorithm', extractedValue, [
                'MD5',
                'MD5-sess',
                'SHA-256',
                'SHA-256-sess',
            ]);
        }
    }
    // When not specified use MD5
    return 'MD5';
}
exports.extractAlgorithm = extractAlgorithm;
/**
 * Extracts QOP from raw header. Throws on values other than "auth" or "auth-int"
 * @param rawHeader string containing qop
 * @returns "auth", "auth-int" or undefined
 */
function extractQop(rawHeader) {
    // Following https://en.wikipedia.org/wiki/Digest_access_authentication
    // to parse valid qop
    // Samples
    // : qop="auth,auth-init",realm=
    // : qop=auth,realm=
    var parsedQop = extract(rawHeader, 'qop');
    if (parsedQop !== undefined) {
        var qops = parsedQop.split(',');
        if (qops.includes('auth-int')) {
            return 'auth-int';
        }
        else if (qops.includes('auth')) {
            return 'auth';
        }
        else {
            throw errors_1.unexpectedDigestValue('quality of protection', qops.join(', '), [
                'auth',
                'auth-int',
            ]);
        }
    }
    // when not specified
    return undefined;
}
exports.extractQop = extractQop;
function extract(raw, field, trim) {
    if (trim === void 0) { trim = true; }
    var regex = new RegExp(field + "=(\"[^\"]*\"|[^,]*)", 'i');
    var match = regex.exec(raw);
    if (match)
        return trim ? match[1].replace(/[\s"]/g, '') : match[1];
    return undefined;
}
/**
 * Computes hash from data using specified algorithm
 * @param algorithm used to compute hash
 * @param data data to be hashed
 * @returns hashed data
 */
function computeHash(algorithm, data, crypto) {
    var usedAlgorithm = algorithm.startsWith('MD5') ? 'MD5' : 'sha256';
    return crypto.hashString(data, usedAlgorithm);
}
exports.computeHash = computeHash;
//# sourceMappingURL=digest.js.map