"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpClient = exports.NetworkErrors = void 0;
var ast_1 = require("@superfaceai/ast");
var lib_1 = require("../../../lib");
var pipe_1 = require("../../../lib/pipe/pipe");
var errors_1 = require("../../errors");
var filters_1 = require("./filters");
var security_1 = require("./security");
var utils_1 = require("./utils");
var NetworkErrors;
(function (NetworkErrors) {
    NetworkErrors["TIMEOUT_ERROR"] = "TIMEOUT_ERROR";
})(NetworkErrors = exports.NetworkErrors || (exports.NetworkErrors = {}));
var HttpClient = /** @class */ (function () {
    function HttpClient(fetchInstance, crypto, logger) {
        this.fetchInstance = fetchInstance;
        this.crypto = crypto;
        this.logger = logger;
    }
    HttpClient.prototype.request = function (url, parameters) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var requestParameters, handler, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        requestParameters = __assign(__assign({ url: url }, parameters), { queryParameters: utils_1.variablesToHttpMap((_a = parameters.queryParameters) !== null && _a !== void 0 ? _a : {}).match(function (v) { return v; }, function (_a) {
                                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                                throw errors_1.invalidHTTPMapValueType('query parameter', key, typeof value);
                            }), headers: utils_1.variablesToHttpMap((_b = parameters.headers) !== null && _b !== void 0 ? _b : {}).match(function (v) { return v; }, function (_a) {
                                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                                throw errors_1.invalidHTTPMapValueType('header', key, typeof value);
                            }) });
                        handler = createSecurityHandler(this.fetchInstance, requestParameters.securityConfiguration, requestParameters.securityRequirements, this.crypto, this.logger);
                        return [4 /*yield*/, pipe_1.pipe({
                                parameters: requestParameters,
                            }, filters_1.authenticateFilter(handler), filters_1.prepareRequestFilter, filters_1.withRequest(filters_1.fetchFilter(this.fetchInstance, this.logger)), filters_1.withResponse(filters_1.handleResponseFilter(this.fetchInstance, this.logger, handler)))];
                    case 1:
                        result = _c.sent();
                        if (result.response === undefined) {
                            throw new lib_1.UnexpectedError('Response is undefined');
                        }
                        return [2 /*return*/, result.response];
                }
            });
        });
    };
    return HttpClient;
}());
exports.HttpClient = HttpClient;
function createSecurityHandler(fetchInstance, securityConfiguration, securityRequirements, crypto, logger) {
    var e_1, _a;
    if (securityConfiguration === void 0) { securityConfiguration = []; }
    if (securityRequirements === void 0) { securityRequirements = []; }
    var handler = undefined;
    var _loop_1 = function (requirement) {
        var configuration = securityConfiguration.find(function (configuration) { return configuration.id === requirement.id; });
        if (configuration === undefined) {
            throw errors_1.missingSecurityValuesError(requirement.id);
        }
        if (configuration.type === ast_1.SecurityType.APIKEY) {
            handler = new security_1.ApiKeyHandler(configuration, logger);
        }
        else if (configuration.scheme === ast_1.HttpScheme.DIGEST) {
            handler = new security_1.DigestHandler(configuration, fetchInstance, crypto, logger);
        }
        else {
            handler = new security_1.HttpHandler(configuration, logger);
        }
    };
    try {
        for (var securityRequirements_1 = __values(securityRequirements), securityRequirements_1_1 = securityRequirements_1.next(); !securityRequirements_1_1.done; securityRequirements_1_1 = securityRequirements_1.next()) {
            var requirement = securityRequirements_1_1.value;
            _loop_1(requirement);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (securityRequirements_1_1 && !securityRequirements_1_1.done && (_a = securityRequirements_1.return)) _a.call(securityRequirements_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return handler;
}
//# sourceMappingURL=http.js.map