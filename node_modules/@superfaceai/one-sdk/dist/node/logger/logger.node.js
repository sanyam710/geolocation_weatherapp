"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeLogger = void 0;
var debug_1 = __importDefault(require("debug"));
var lib_1 = require("../../lib");
var NodeLogger = /** @class */ (function () {
    function NodeLogger() {
        this.cache = new lib_1.SuperCache();
    }
    NodeLogger.prototype.log = function (name, format) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var instance = this.cache.getCached(name, function () {
            var debugLog = debug_1.default('superface:' + name);
            if (name.endsWith(':sensitive')) {
                debugLog("\nWARNING: YOU HAVE ALLOWED LOGGING SENSITIVE INFORMATION.\nTHIS LOGGING LEVEL DOES NOT PREVENT LEAKING SECRETS AND SHOULD NOT BE USED IF THE LOGS ARE GOING TO BE SHARED.\nCONSIDER DISABLING SENSITIVE INFORMATION LOGGING BY APPENDING THE DEBUG ENVIRONMENT VARIABLE WITH \",-*:sensitive\".\n");
            }
            return debugLog;
        });
        if (format === undefined) {
            return instance;
        }
        instance.apply(void 0, __spreadArray([format], __read(args)));
    };
    return NodeLogger;
}());
exports.NodeLogger = NodeLogger;
//# sourceMappingURL=logger.node.js.map