import type { IConfig, IEnvironment, IFileSystem, ILogger } from '../../interfaces';
declare type FSPath = {
    path: Pick<IFileSystem['path'], 'join' | 'cwd'>;
};
export declare const DEFAULT_API_URL: string;
export declare const DEFAULT_SUPERFACE_PATH: (fileSystem: FSPath) => string;
export declare const DEFAULT_METRIC_DEBOUNCE_TIME: {
    min: number;
    max: number;
};
export declare const DEFAULT_CACHE_PATH: (fileSystem: FSPath) => string;
export declare const DEFAULT_SANDBOX_TIMEOUT = 100;
export declare const DEFAULT_DISABLE_REPORTING = false;
export declare const DEFAULT_CACHE = true;
export declare const DEFAULT_BOUND_PROVIDER_TIMEOUT: number;
export declare class Config implements IConfig {
    cachePath: string;
    disableReporting: boolean;
    metricDebounceTimeMax: number;
    metricDebounceTimeMin: number;
    sandboxTimeout: number;
    sdkAuthToken?: string;
    superfaceApiUrl: string;
    superfaceCacheTimeout: number;
    superfacePath: string;
    debug: boolean;
    cache: boolean;
    constructor(fileSystem: FSPath, config?: Partial<IConfig>);
}
export declare function mergeConfigs(originalConfig: Partial<IConfig>, newConfig: Partial<IConfig>, fileSystem: FSPath, logger?: ILogger): Config;
export declare function loadConfigFromCode(config: Partial<Omit<IConfig, 'cachePath'>>, fileSystem: FSPath, logger?: ILogger): Config;
export declare function loadConfigFromEnv(environment: IEnvironment, fileSystem: FSPath, logger?: ILogger): Config;
export {};
