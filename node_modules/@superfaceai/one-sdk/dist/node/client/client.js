"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SuperfaceClient = exports.SuperfaceClientBase = void 0;
var debug_1 = __importDefault(require("debug"));
var core_1 = require("../../core");
var lib_1 = require("../../lib");
var schema_tools_1 = require("../../schema-tools");
var normalize_1 = require("../../schema-tools/superjson/normalize");
var crypto_1 = require("../crypto");
var environment_1 = require("../environment");
var fetch_1 = require("../fetch");
var filesystem_1 = require("../filesystem");
var logger_1 = require("../logger");
var sandbox_1 = require("../sandbox");
var timers_1 = require("../timers");
var resolveSuperJson = function (path, superJson, logger) {
    if (superJson === undefined) {
        var superJsonResult = schema_tools_1.loadSuperJsonSync(path, filesystem_1.NodeFileSystem, logger);
        if (superJsonResult.isOk()) {
            return superJsonResult.value;
        }
        return undefined;
    }
    return superJson;
};
var resolveConfig = function (config, environment, fileSystem, logger) {
    var envConfig = core_1.loadConfigFromEnv(environment, fileSystem, logger);
    if (config === undefined) {
        return envConfig;
    }
    return core_1.mergeConfigs(envConfig, core_1.loadConfigFromCode(config, fileSystem, logger), fileSystem, logger);
};
var setupMetricReporter = function (config, timers, events, crypto, superJson, logger) {
    var metricReporter = new core_1.MetricReporter(config, timers, new fetch_1.NodeFetch(timers), crypto, superJson, logger);
    core_1.hookMetrics(events, metricReporter);
    if (superJson) {
        metricReporter.reportEvent({
            eventType: 'SDKInit',
            occurredAt: new Date(timers.now()),
        });
    }
    process.on('beforeExit', function () { return metricReporter.flush(); });
    process.on('uncaughtExceptionMonitor', function () {
        console.warn('Warning: you do not handle all exceptions. This can prevent failure report to be sent.');
    });
};
var SuperfaceClientBase = /** @class */ (function () {
    function SuperfaceClientBase(options) {
        if ((options === null || options === void 0 ? void 0 : options.debug) === true) {
            debug_1.default.enable('superface:*');
        }
        var environment = new environment_1.NodeEnvironment();
        this.sandbox = new sandbox_1.NodeSandbox();
        this.crypto = new crypto_1.NodeCrypto();
        this.timers = new timers_1.NodeTimers();
        this.logger = new logger_1.NodeLogger();
        this.events = new core_1.Events(this.timers, this.logger);
        this.fetchInstance = new fetch_1.NodeFetch(this.timers);
        this.config = resolveConfig(options, environment, filesystem_1.NodeFileSystem, this.logger);
        this.boundProfileProviderCache = new lib_1.SuperCache();
        var superJson = resolveSuperJson(this.config.superfacePath, options === null || options === void 0 ? void 0 : options.superJson, this.logger);
        this.superJson =
            superJson &&
                normalize_1.normalizeSuperJsonDocument(superJson, environment, this.logger);
        if (!this.config.disableReporting) {
            setupMetricReporter(this.config, this.timers, this.events, this.crypto, this.superJson, this.logger);
        }
        core_1.registerHooks(this.events, this.timers, this.logger);
        this.internal = new core_1.InternalClient(this.events, this.superJson, this.config, this.sandbox, this.timers, filesystem_1.NodeFileSystem, this.boundProfileProviderCache, this.crypto, this.fetchInstance, this.logger);
    }
    /** Gets a provider based on passed parameters or fallbacks to super.json information. */
    SuperfaceClientBase.prototype.getProvider = function (providerName, options) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                return [2 /*return*/, core_1.resolveProvider({
                        superJson: this.superJson,
                        security: core_1.resolveSecurityValues(options === null || options === void 0 ? void 0 : options.security, (_a = this.logger) === null || _a === void 0 ? void 0 : _a.log('security-values-resolution')),
                        provider: providerName,
                        parameters: options === null || options === void 0 ? void 0 : options.parameters,
                    })];
            });
        });
    };
    /** Returns a provider configuration for when no provider is passed to untyped `.perform`. */
    SuperfaceClientBase.prototype.getProviderForProfile = function (profileId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.superJson === undefined) {
                    throw core_1.superJsonNotDefinedError('getProviderForProfile');
                }
                return [2 /*return*/, core_1.resolveProvider({
                        superJson: this.superJson,
                        profileId: profileId,
                    })];
            });
        });
    };
    SuperfaceClientBase.prototype.on = function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        (_a = this.events).on.apply(_a, __spreadArray([], __read(args)));
    };
    return SuperfaceClientBase;
}());
exports.SuperfaceClientBase = SuperfaceClientBase;
var SuperfaceClient = /** @class */ (function (_super) {
    __extends(SuperfaceClient, _super);
    function SuperfaceClient() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /** Gets a profile from super.json or remote registry based on `profile`. `profile` can be string in format: `[scope/]name@profileVersion` or object with `id` and optional `version` . */
    SuperfaceClient.prototype.getProfile = function (profile) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.internal.getProfile(profile)];
            });
        });
    };
    return SuperfaceClient;
}(SuperfaceClientBase));
exports.SuperfaceClient = SuperfaceClient;
//# sourceMappingURL=client.js.map