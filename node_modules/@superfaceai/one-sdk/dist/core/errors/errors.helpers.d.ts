import type { SecurityValues } from '@superfaceai/ast';
import { SDKBindError, SDKExecutionError } from '../../lib';
export declare function superJsonNotDefinedError(callerName: string): SDKExecutionError;
export declare function superJsonNotFoundError(path: string, error?: Error): SDKExecutionError;
export declare function superJsonNotAFileError(path: string): SDKExecutionError;
export declare function superJsonFormatError(error: Error): SDKExecutionError;
export declare function superJsonReadError(error: Error): SDKExecutionError;
export declare function unableToResolveProviderError(): SDKExecutionError;
export declare function noConfiguredProviderError(profileId: string): SDKExecutionError;
export declare function unsupportedFileExtensionError(filepath: string, correctExtension: string): SDKExecutionError;
export declare function sourceFileExtensionFoundError(extension: string): SDKExecutionError;
export declare function profileNotInstalledError(profileId: string): SDKExecutionError;
export declare function profileFileNotFoundError(file: string, profileId: string): SDKExecutionError;
export declare function unableToResolveProfileError(profileId: string): SDKExecutionError;
export declare function invalidIdentifierIdError(identifier: string, problematicPart: 'Name' | 'Scope'): SDKExecutionError;
export declare function invalidVersionError(completeVersion: string, problematicPart: 'minor' | 'patch'): SDKExecutionError;
export declare function versionMismatchError(superJsonVersion: string, getProfileVersion: string): SDKExecutionError;
export declare function variantMismatchError(astVariant: string | undefined, passedVariant: string | undefined): SDKExecutionError;
export declare function profileNotFoundError(profileName: string): SDKExecutionError;
export declare function profileProviderNotFoundError(profileId: string, providerName: string): SDKExecutionError;
export declare function providersNotSetError(profileName: string): SDKExecutionError;
export declare function unconfiguredProviderInPriorityError(profileId: string, priority: string[], providers: string[]): SDKExecutionError;
export declare function unconfiguredProviderError(providerName: string): SDKExecutionError;
export declare function invalidProfileError(profileId: string): SDKExecutionError;
export declare function serviceNotFoundError(serviceId: string, providerName: string, defaultService: boolean): SDKExecutionError;
export declare function securityNotFoundError(providerName: string, definedSchemes: string[], values: SecurityValues): SDKExecutionError;
export declare function invalidSecurityValuesError(providerName: string, type: string, id: string, valueKeys: string[], requiredKeys: string[]): SDKExecutionError;
export declare function invalidBackoffEntryError(kind: string): SDKExecutionError;
export declare function invalidPathReplacementError(invalid: string[], url: string, all: string[], available: string[]): SDKExecutionError;
export declare function missingSecurityValuesError(id: string): SDKExecutionError;
export declare function apiKeyInBodyError(valueLocation: string, bodyType: string): SDKExecutionError;
export declare function unsupportedContentType(contentType: string, supportedTypes: string[]): SDKExecutionError;
export declare function usecaseNotFoundError(name: string, usecases: string[]): SDKExecutionError;
export declare function localProviderAndRemoteMapError(providerName: string, profileId: string): SDKExecutionError;
export declare function referencedFileNotFoundError(fileName: string, extensions: string[]): SDKExecutionError;
export declare function providersDoNotMatchError(mapOrJsonProvider: string, configProvider: string, source: 'map' | 'provider.json'): SDKExecutionError;
export declare function profileIdsDoNotMatchError(mapProfileId: string, configProfileId: string): SDKExecutionError;
export declare function invalidHTTPMapValueType(kind: 'header' | 'query parameter', key: string, type: string): SDKExecutionError;
export declare function digestHeaderNotFound(headerName: string, foundHeaders: string[]): SDKExecutionError;
export declare function missingPartOfDigestHeader(headerName: string, header: string, part: string): SDKExecutionError;
export declare function unexpectedDigestValue(valueName: string, value: string, possibleValues: string[]): SDKExecutionError;
export declare function invalidResponseError(statusCode: number, error: unknown): SDKExecutionError;
export declare function invalidProviderResponseError(error: unknown): SDKBindError;
export declare function invalidMapASTResponseError(): SDKBindError;
export declare function bindResponseError({ statusCode, profileId, provider, title, detail, mapVariant, mapRevision, apiUrl, }: {
    statusCode: number;
    profileId: string;
    provider?: string;
    title?: string;
    detail?: string;
    mapVariant?: string;
    mapRevision?: string;
    apiUrl: string;
}): SDKBindError;
export declare function unknownBindResponseError({ statusCode, profileId, body, provider, mapVariant, mapRevision, apiUrl, }: {
    statusCode: number;
    profileId: string;
    body: unknown;
    provider?: string;
    mapVariant?: string;
    mapRevision?: string;
    apiUrl: string;
}): SDKBindError;
export declare function unknownProviderInfoError({ message, provider, body, statusCode, }: {
    message: string;
    provider: string;
    body: unknown;
    statusCode: number;
}): SDKExecutionError;
