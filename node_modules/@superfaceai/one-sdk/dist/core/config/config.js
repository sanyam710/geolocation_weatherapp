"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadConfigFromEnv = exports.loadConfigFromCode = exports.mergeConfigs = exports.Config = exports.DEFAULT_BOUND_PROVIDER_TIMEOUT = exports.DEFAULT_CACHE = exports.DEFAULT_DISABLE_REPORTING = exports.DEFAULT_SANDBOX_TIMEOUT = exports.DEFAULT_CACHE_PATH = exports.DEFAULT_METRIC_DEBOUNCE_TIME = exports.DEFAULT_SUPERFACE_PATH = exports.DEFAULT_API_URL = void 0;
var DEBUG_NAMESPACE = 'config';
// Environment variable names
var TOKEN_ENV_NAME = 'SUPERFACE_SDK_TOKEN';
var API_URL_ENV_NAME = 'SUPERFACE_API_URL';
var SUPERFACE_PATH_NAME = 'SUPERFACE_PATH';
var METRIC_DEBOUNCE_TIME = {
    min: 'SUPERFACE_METRIC_DEBOUNCE_TIME_MIN',
    max: 'SUPERFACE_METRIC_DEBOUNCE_TIME_MAX',
};
var DISABLE_REPORTING = 'SUPERFACE_DISABLE_METRIC_REPORTING';
var SANDBOX_TIMEOUT_ENV_NAME = 'SUPERFACE_SANDBOX_TIMEOUT';
var BOUND_PROVIDER_CACHE_TIMEOUT = 'SUPERFACE_CACHE_TIMEOUT';
// Defaults
exports.DEFAULT_API_URL = new URL('https://superface.ai').href;
var DEFAULT_SUPERFACE_PATH = function (fileSystem) {
    return fileSystem.path.join(fileSystem.path.cwd(), 'superface', 'super.json');
};
exports.DEFAULT_SUPERFACE_PATH = DEFAULT_SUPERFACE_PATH;
exports.DEFAULT_METRIC_DEBOUNCE_TIME = {
    min: 1000,
    max: 60000,
};
var DEFAULT_CACHE_PATH = function (fileSystem) {
    return fileSystem.path.join(fileSystem.path.cwd(), 'node_modules', '.cache', 'superface');
};
exports.DEFAULT_CACHE_PATH = DEFAULT_CACHE_PATH;
exports.DEFAULT_SANDBOX_TIMEOUT = 100;
exports.DEFAULT_DISABLE_REPORTING = false;
exports.DEFAULT_CACHE = true;
// 1 hour
exports.DEFAULT_BOUND_PROVIDER_TIMEOUT = 60 * 60;
var DEFAULTS = function (fileSystem) { return ({
    cachePath: exports.DEFAULT_CACHE_PATH(fileSystem),
    disableReporting: exports.DEFAULT_DISABLE_REPORTING,
    metricDebounceTimeMax: exports.DEFAULT_METRIC_DEBOUNCE_TIME.max,
    metricDebounceTimeMin: exports.DEFAULT_METRIC_DEBOUNCE_TIME.min,
    sandboxTimeout: exports.DEFAULT_SANDBOX_TIMEOUT,
    sdkAuthToken: undefined,
    superfaceApiUrl: exports.DEFAULT_API_URL,
    superfaceCacheTimeout: exports.DEFAULT_BOUND_PROVIDER_TIMEOUT,
    superfacePath: exports.DEFAULT_SUPERFACE_PATH(fileSystem),
    debug: false,
    cache: exports.DEFAULT_CACHE,
}); };
// Extraction functions
function getSuperfaceApiUrl(environment) {
    return ensureValidUrl(environment.getString(API_URL_ENV_NAME));
}
function getSdkAuthToken(environment, log) {
    return ensureValidSdkToken(environment.getString(TOKEN_ENV_NAME), TOKEN_ENV_NAME, log);
}
function ensureValidSdkToken(value, variableName, log) {
    if (value === undefined) {
        log === null || log === void 0 ? void 0 : log("Variable " + variableName + " not found");
        return;
    }
    var tokenRegexp = /^(sfs)_([^_]+)_([0-9A-F]{8})$/i;
    if (!tokenRegexp.test(value)) {
        log === null || log === void 0 ? void 0 : log("Value in environment variable " + variableName + " is not valid SDK authentization token");
        return;
    }
    return value;
}
function ensureValidUrl(value) {
    return value !== undefined ? new URL(value).href : undefined;
}
function ensurePositiveInteger(value, variableName, log) {
    if (value === undefined) {
        return undefined;
    }
    if (isNaN(value) || value <= 0) {
        log === null || log === void 0 ? void 0 : log("Invalid value: " + value + " for " + variableName + ", expected positive number");
        return undefined;
    }
    return value;
}
function getBoundCacheTimeout(environment, log) {
    var value = ensurePositiveInteger(environment.getNumber(BOUND_PROVIDER_CACHE_TIMEOUT), BOUND_PROVIDER_CACHE_TIMEOUT, log);
    return value;
}
function getMetricDebounceTime(which, environment, log) {
    var value = ensurePositiveInteger(environment.getNumber(METRIC_DEBOUNCE_TIME[which]), METRIC_DEBOUNCE_TIME[which], log);
    return value;
}
function getSandboxTimeout(environment, log) {
    var value = ensurePositiveInteger(environment.getNumber(SANDBOX_TIMEOUT_ENV_NAME), SANDBOX_TIMEOUT_ENV_NAME, log);
    return value;
}
var Config = /** @class */ (function () {
    function Config(fileSystem, config) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        var defaults = DEFAULTS(fileSystem);
        this.cachePath = (_a = config === null || config === void 0 ? void 0 : config.cachePath) !== null && _a !== void 0 ? _a : defaults.cachePath;
        this.disableReporting =
            (_b = config === null || config === void 0 ? void 0 : config.disableReporting) !== null && _b !== void 0 ? _b : defaults.disableReporting;
        this.metricDebounceTimeMax =
            (_c = config === null || config === void 0 ? void 0 : config.metricDebounceTimeMax) !== null && _c !== void 0 ? _c : defaults.metricDebounceTimeMax;
        this.metricDebounceTimeMin =
            (_d = config === null || config === void 0 ? void 0 : config.metricDebounceTimeMin) !== null && _d !== void 0 ? _d : defaults.metricDebounceTimeMin;
        this.sandboxTimeout = (_e = config === null || config === void 0 ? void 0 : config.sandboxTimeout) !== null && _e !== void 0 ? _e : defaults.sandboxTimeout;
        this.sdkAuthToken = (_f = config === null || config === void 0 ? void 0 : config.sdkAuthToken) !== null && _f !== void 0 ? _f : defaults.sdkAuthToken;
        this.superfaceApiUrl = (_g = config === null || config === void 0 ? void 0 : config.superfaceApiUrl) !== null && _g !== void 0 ? _g : defaults.superfaceApiUrl;
        this.superfaceCacheTimeout =
            (_h = config === null || config === void 0 ? void 0 : config.superfaceCacheTimeout) !== null && _h !== void 0 ? _h : defaults.superfaceCacheTimeout;
        this.superfacePath = (_j = config === null || config === void 0 ? void 0 : config.superfacePath) !== null && _j !== void 0 ? _j : defaults.superfacePath;
        this.debug = (config === null || config === void 0 ? void 0 : config.debug) !== undefined ? config.debug : defaults.debug;
        this.cache = (_k = config === null || config === void 0 ? void 0 : config.cache) !== null && _k !== void 0 ? _k : defaults.cache;
    }
    return Config;
}());
exports.Config = Config;
function mergeConfigs(originalConfig, newConfig, fileSystem, logger) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
    var env = {
        superfaceApiUrl: (_a = newConfig.superfaceApiUrl) !== null && _a !== void 0 ? _a : originalConfig.superfaceApiUrl,
        sdkAuthToken: (_b = newConfig.sdkAuthToken) !== null && _b !== void 0 ? _b : originalConfig.sdkAuthToken,
        superfacePath: (_c = newConfig.superfacePath) !== null && _c !== void 0 ? _c : originalConfig.superfacePath,
        superfaceCacheTimeout: (_d = newConfig.superfaceCacheTimeout) !== null && _d !== void 0 ? _d : originalConfig.superfaceCacheTimeout,
        metricDebounceTimeMin: (_e = newConfig.metricDebounceTimeMin) !== null && _e !== void 0 ? _e : originalConfig.metricDebounceTimeMin,
        metricDebounceTimeMax: (_f = newConfig.metricDebounceTimeMax) !== null && _f !== void 0 ? _f : originalConfig.metricDebounceTimeMax,
        disableReporting: (_g = newConfig.disableReporting) !== null && _g !== void 0 ? _g : originalConfig.disableReporting,
        cachePath: (_h = newConfig.cachePath) !== null && _h !== void 0 ? _h : originalConfig.cachePath,
        sandboxTimeout: (_j = newConfig.sandboxTimeout) !== null && _j !== void 0 ? _j : originalConfig.sandboxTimeout,
        debug: (_k = newConfig.debug) !== null && _k !== void 0 ? _k : originalConfig.debug,
        cache: (_l = newConfig.cache) !== null && _l !== void 0 ? _l : originalConfig.cache,
    };
    logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE, 'Merged config A: %O with B: %O to: %O', originalConfig, newConfig, env);
    return new Config(fileSystem, env);
}
exports.mergeConfigs = mergeConfigs;
function loadConfigFromCode(config, fileSystem, logger) {
    var logFunction = logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE);
    var env = {
        superfaceApiUrl: ensureValidUrl(config.superfaceApiUrl),
        sdkAuthToken: ensureValidSdkToken(config.sdkAuthToken, 'sdkAuthToken', logFunction),
        // TODO: Check if it is path?
        superfacePath: config.superfacePath,
        superfaceCacheTimeout: ensurePositiveInteger(config.superfaceCacheTimeout, 'superfaceCacheTimeout', logFunction),
        metricDebounceTimeMin: ensurePositiveInteger(config.metricDebounceTimeMin, 'metricDebounceTimeMin', logFunction),
        metricDebounceTimeMax: ensurePositiveInteger(config.metricDebounceTimeMax, 'metricDebounceTimeMax', logFunction),
        disableReporting: config.disableReporting,
        // TODO: Check if it is path?
        cachePath: undefined,
        sandboxTimeout: ensurePositiveInteger(config.sandboxTimeout, 'sandboxTimeout', logFunction),
        debug: (config === null || config === void 0 ? void 0 : config.debug) !== undefined ? config.debug : false,
        cache: config.cache,
    };
    logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE, 'Loaded config from code: %O', env);
    return new Config(fileSystem, env);
}
exports.loadConfigFromCode = loadConfigFromCode;
function loadConfigFromEnv(environment, fileSystem, logger) {
    var _a;
    var logFunction = logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE);
    var env = {
        superfaceApiUrl: getSuperfaceApiUrl(environment),
        sdkAuthToken: getSdkAuthToken(environment, logFunction),
        superfacePath: (_a = environment.getString(SUPERFACE_PATH_NAME)) !== null && _a !== void 0 ? _a : exports.DEFAULT_SUPERFACE_PATH(fileSystem),
        superfaceCacheTimeout: getBoundCacheTimeout(environment, logFunction),
        metricDebounceTimeMin: getMetricDebounceTime('min', environment, logFunction),
        metricDebounceTimeMax: getMetricDebounceTime('max', environment, logFunction),
        disableReporting: environment.getString('NODE_ENV') === 'test' ||
            environment.getBoolean(DISABLE_REPORTING) === true
            ? true
            : undefined,
        // TODO: add env variable and resolve it?
        cachePath: undefined,
        sandboxTimeout: getSandboxTimeout(environment, logFunction),
        debug: false,
    };
    logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE, 'Loaded config from environment variables: %O', env);
    return new Config(fileSystem, env);
}
exports.loadConfigFromEnv = loadConfigFromEnv;
//# sourceMappingURL=config.js.map