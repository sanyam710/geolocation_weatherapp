import type { HttpSecurityRequirement } from '@superfaceai/ast';
import type { ICrypto, ILogger } from '../../../interfaces';
import type { NonPrimitive, Variables } from '../../../lib';
import type { IFetch } from './interfaces';
import type { AuthCache, SecurityConfiguration } from './security';
import type { HttpResponse } from './types';
export declare enum NetworkErrors {
    TIMEOUT_ERROR = "TIMEOUT_ERROR"
}
export declare class HttpClient {
    private fetchInstance;
    private readonly crypto;
    private readonly logger?;
    constructor(fetchInstance: IFetch & AuthCache, crypto: ICrypto, logger?: ILogger | undefined);
    request(url: string, parameters: {
        method: string;
        headers?: NonPrimitive;
        queryParameters?: NonPrimitive;
        body?: Variables;
        contentType?: string;
        accept?: string;
        securityRequirements?: HttpSecurityRequirement[];
        securityConfiguration?: SecurityConfiguration[];
        baseUrl: string;
        pathParameters?: NonPrimitive;
        integrationParameters?: Record<string, string>;
    }): Promise<HttpResponse>;
}
