"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareProviderParameters = exports.prepareSecurityValues = exports.isDigestSecurityScheme = exports.isBearerTokenSecurityScheme = exports.isBasicAuthSecurityScheme = exports.isApiKeySecurityScheme = exports.assertProviderJson = exports.isProviderJson = exports.isValidProviderName = void 0;
var validation_1 = require("../../validation");
var providerjson_1 = require("./providerjson");
var schema = __importStar(require("./providerjson.schema.json"));
function isValidProviderName(name) {
    return providerjson_1.PROVIDER_NAME_REGEX.test(name);
}
exports.isValidProviderName = isValidProviderName;
var prepareIs = (0, validation_1.preparePrepareIs)(schema);
exports.isProviderJson = prepareIs('ProviderJson');
var assertProvider = (0, validation_1.prepareAssert)(schema, 'provider-json');
function assertProviderJson(input) {
    assertProvider(input);
    return input;
}
exports.assertProviderJson = assertProviderJson;
exports.isApiKeySecurityScheme = prepareIs('ApiKeySecurityScheme');
exports.isBasicAuthSecurityScheme = prepareIs('BasicAuthSecurityScheme');
exports.isBearerTokenSecurityScheme = prepareIs('BearerTokenSecurityScheme');
exports.isDigestSecurityScheme = prepareIs('DigestSecurityScheme');
function prepareSecurityValues(providerName, schemes) {
    var e_1, _a;
    var security = [];
    try {
        for (var schemes_1 = __values(schemes), schemes_1_1 = schemes_1.next(); !schemes_1_1.done; schemes_1_1 = schemes_1.next()) {
            var scheme = schemes_1_1.value;
            var envProviderName = providerName.replace(/-/g, '_').toUpperCase();
            if ((0, exports.isApiKeySecurityScheme)(scheme)) {
                security.push({
                    id: scheme.id,
                    apikey: "$".concat(envProviderName, "_API_KEY"),
                });
            }
            else if ((0, exports.isBasicAuthSecurityScheme)(scheme)) {
                security.push({
                    id: scheme.id,
                    username: "$".concat(envProviderName, "_USERNAME"),
                    password: "$".concat(envProviderName, "_PASSWORD"),
                });
            }
            else if ((0, exports.isBearerTokenSecurityScheme)(scheme)) {
                security.push({
                    id: scheme.id,
                    token: "$".concat(envProviderName, "_TOKEN"),
                });
            }
            else if ((0, exports.isDigestSecurityScheme)(scheme)) {
                security.push({
                    id: scheme.id,
                    username: "$".concat(envProviderName, "_USERNAME"),
                    password: "$".concat(envProviderName, "_PASSWORD"),
                });
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (schemes_1_1 && !schemes_1_1.done && (_a = schemes_1.return)) _a.call(schemes_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return security;
}
exports.prepareSecurityValues = prepareSecurityValues;
function prepareProviderParameters(providerName, parameters) {
    var e_2, _a;
    var envProviderName = providerName.replace(/-/g, '_').toUpperCase();
    var preparedParameters = {};
    try {
        for (var parameters_1 = __values(parameters), parameters_1_1 = parameters_1.next(); !parameters_1_1.done; parameters_1_1 = parameters_1.next()) {
            var parameter = parameters_1_1.value;
            var envParameterName = parameter.name.replace(/-/g, '_').toUpperCase();
            preparedParameters[parameter.name] = "$".concat(envProviderName, "_").concat(envParameterName);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (parameters_1_1 && !parameters_1_1.done && (_a = parameters_1.return)) _a.call(parameters_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return preparedParameters;
}
exports.prepareProviderParameters = prepareProviderParameters;
//# sourceMappingURL=providerjson.utils.js.map