import type { None } from '../variables';
/**
 * Creates a deep clone of the value.
 */
export declare function clone<T>(value: T): T;
export declare function isRecord(input: unknown): input is Record<string, unknown>;
export declare function fromEntriesOptional<T extends Exclude<unknown, None>>(...entries: [key: string, value: T | None][]): Record<string, T>;
/**
 * Recursively descends the record and returns a list of enumerable keys
 */
export declare function recursiveKeyList(record: Record<string, unknown>, filter?: (value: unknown) => boolean, base?: string): string[];
/**
 * Recursively index into a record.
 *
 * Throws if a child cannot be indexed into.
 */
export declare function indexRecord<T extends unknown | Record<string, T>>(input: Record<string, T>, key: string[]): T | undefined;
export declare type RecursiveReadonly<T> = {
    readonly [P in keyof T]: RecursiveReadonly<T[P]>;
};
export declare function deepFreeze<T>(o: T): RecursiveReadonly<T>;
