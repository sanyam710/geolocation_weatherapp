"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveSecurityConfiguration = void 0;
var ast_1 = require("@superfaceai/ast");
var errors_1 = require("../errors");
function resolveSecurityConfiguration(schemes, values, providerName) {
    var e_1, _a;
    var result = [];
    var _loop_1 = function (vals) {
        var scheme = schemes.find(function (scheme) { return scheme.id === vals.id; });
        if (scheme === undefined) {
            var definedSchemes = schemes.map(function (s) { return s.id; });
            throw errors_1.securityNotFoundError(providerName, definedSchemes, vals);
        }
        var invalidSchemeValuesErrorBuilder = function (scheme, values, requiredKeys) {
            var valueKeys = Object.keys(values).filter(function (k) { return k !== 'id'; });
            return errors_1.invalidSecurityValuesError(providerName, scheme.type, scheme.id, valueKeys, requiredKeys);
        };
        if (scheme.type === ast_1.SecurityType.APIKEY) {
            if (!ast_1.isApiKeySecurityValues(vals)) {
                throw invalidSchemeValuesErrorBuilder(scheme, vals, ['apikey']);
            }
            result.push(__assign(__assign({}, scheme), vals));
        }
        else {
            switch (scheme.scheme) {
                case ast_1.HttpScheme.BASIC:
                    if (!ast_1.isBasicAuthSecurityValues(vals)) {
                        throw invalidSchemeValuesErrorBuilder(scheme, vals, [
                            'username',
                            'password',
                        ]);
                    }
                    result.push(__assign(__assign({}, scheme), vals));
                    break;
                case ast_1.HttpScheme.BEARER:
                    if (!ast_1.isBearerTokenSecurityValues(vals)) {
                        throw invalidSchemeValuesErrorBuilder(scheme, vals, ['token']);
                    }
                    result.push(__assign(__assign({}, scheme), vals));
                    break;
                case ast_1.HttpScheme.DIGEST:
                    if (!ast_1.isDigestSecurityValues(vals)) {
                        throw invalidSchemeValuesErrorBuilder(scheme, vals, ['digest']);
                    }
                    result.push(__assign(__assign({}, scheme), vals));
                    break;
            }
        }
    };
    try {
        for (var values_1 = __values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {
            var vals = values_1_1.value;
            _loop_1(vals);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (values_1_1 && !values_1_1.done && (_a = values_1.return)) _a.call(values_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return result;
}
exports.resolveSecurityConfiguration = resolveSecurityConfiguration;
//# sourceMappingURL=security.js.map