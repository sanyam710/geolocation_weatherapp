import { ComlinkAssignmentNode, ComlinkListLiteralNode, ComlinkLiteralNode, ComlinkNoneLiteralNode, ComlinkObjectLiteralNode, ComlinkPrimitiveLiteralNode, DocumentDefinition, EnumDefinitionNode, EnumValueNode, FieldDefinitionNode, ListDefinitionNode, ModelTypeNameNode, NamedFieldDefinitionNode, NamedModelDefinitionNode, NonNullDefinitionNode, ObjectDefinitionNode, PrimitiveTypeNameNode, ProfileASTNode, ProfileDocumentNode, ProfileHeaderNode, Type, TypeDefinition, TypeName, UnionDefinitionNode, UseCaseDefinitionNode, UseCaseExampleNode, UseCaseSlotDefinitionNode } from './profile-ast';
export declare const isProfileDocumentNode: (node: unknown) => node is ProfileDocumentNode;
export declare const isEnumDefinitionNode: (node: ProfileASTNode) => node is EnumDefinitionNode;
export declare const isEnumValueNode: (node: ProfileASTNode) => node is EnumValueNode;
export declare const isFieldDefinitionNode: (node: ProfileASTNode) => node is FieldDefinitionNode;
export declare const isListDefinitionNode: (node: ProfileASTNode) => node is ListDefinitionNode;
export declare const isModelTypeNameNode: (node: ProfileASTNode) => node is ModelTypeNameNode;
export declare const isNamedFieldDefinitionNode: (node: ProfileASTNode) => node is NamedFieldDefinitionNode;
export declare const isNamedModelDefinitionNode: (node: ProfileASTNode) => node is NamedModelDefinitionNode;
export declare const isNonNullDefinitionNode: (node: ProfileASTNode) => node is NonNullDefinitionNode;
export declare const isObjectDefinitionNode: (node: ProfileASTNode) => node is ObjectDefinitionNode;
export declare const isPrimitiveTypeNameNode: (node: ProfileASTNode) => node is PrimitiveTypeNameNode;
export declare const isProfileHeaderNode: (node: ProfileASTNode) => node is ProfileHeaderNode;
export declare const isTypeDefinition: (input: ProfileASTNode) => input is TypeDefinition;
export declare const isTypeName: (input: ProfileASTNode) => input is TypeName;
export declare const isType: (input: ProfileASTNode) => input is Type;
export declare const isUnionDefinitionNode: (node: ProfileASTNode) => node is UnionDefinitionNode;
export declare const isUseCaseDefinitionNode: (node: ProfileASTNode) => node is UseCaseDefinitionNode;
export declare const isUseCaseSlotDefinitionNodeType: (node: ProfileASTNode) => node is UseCaseSlotDefinitionNode<Type>;
export declare const isUseCaseSlotDefinitionNodeUseCaseExampleNode: (node: ProfileASTNode) => node is UseCaseSlotDefinitionNode<UseCaseExampleNode>;
export declare const isUseCaseSlotDefinitionNodeComlinkLiteralNode: (node: ProfileASTNode) => node is UseCaseSlotDefinitionNode<ComlinkLiteralNode>;
export declare const isUseCaseSlotDefinitionNodeObjectDefinitionNode: (node: ProfileASTNode) => node is UseCaseSlotDefinitionNode<ObjectDefinitionNode>;
export declare const isUseCaseSlotDefinitionNode: (input: ProfileASTNode) => input is UseCaseSlotDefinitionNode<PrimitiveTypeNameNode | ModelTypeNameNode | EnumDefinitionNode | ObjectDefinitionNode | ListDefinitionNode | UnionDefinitionNode | NonNullDefinitionNode | UseCaseExampleNode | ComlinkNoneLiteralNode | ComlinkPrimitiveLiteralNode | ComlinkObjectLiteralNode | ComlinkListLiteralNode>;
export declare const isUseCaseExampleNode: (node: ProfileASTNode) => node is UseCaseExampleNode;
export declare const isComlinkNoneLiteralNode: (node: ProfileASTNode) => node is ComlinkNoneLiteralNode;
export declare const isComlinkPrimitiveLiteralNode: (node: ProfileASTNode) => node is ComlinkPrimitiveLiteralNode;
export declare const isComlinkObjectLiteralNode: (node: ProfileASTNode) => node is ComlinkObjectLiteralNode;
export declare const isComlinkListLiteralNode: (node: ProfileASTNode) => node is ComlinkListLiteralNode;
export declare const isComlinkLiteralNode: (node: ProfileASTNode) => node is ComlinkLiteralNode;
export declare const isComlinkAssignmentNode: (node: ProfileASTNode) => node is ComlinkAssignmentNode;
export declare const isDocumentDefinition: (input: ProfileASTNode) => input is DocumentDefinition;
export declare function assertProfileDocumentNode(node: unknown): ProfileDocumentNode;
export interface ProfileAstVisitor<R = unknown> {
    visit(node: ProfileASTNode, ...parameters: unknown[]): R;
    visitEnumDefinitionNode(node: EnumDefinitionNode, ...parameters: unknown[]): R;
    visitEnumValueNode(node: EnumValueNode, ...parameters: unknown[]): R;
    visitFieldDefinitionNode(node: FieldDefinitionNode, ...parameters: unknown[]): R;
    visitListDefinitionNode(node: ListDefinitionNode, ...parameters: unknown[]): R;
    visitModelTypeNameNode(node: ModelTypeNameNode, ...parameters: unknown[]): R;
    visitNamedFieldDefinitionNode(node: NamedFieldDefinitionNode, ...parameters: unknown[]): R;
    visitNamedModelDefinitionNode(node: NamedModelDefinitionNode, ...parameters: unknown[]): R;
    visitNonNullDefinitionNode(node: NonNullDefinitionNode, ...parameters: unknown[]): R;
    visitObjectDefinitionNode(node: ObjectDefinitionNode, ...parameters: unknown[]): R;
    visitPrimitiveTypeNameNode(node: PrimitiveTypeNameNode, ...parameters: unknown[]): R;
    visitProfileDocumentNode(node: ProfileDocumentNode, ...parameters: unknown[]): R;
    visitProfileHeaderNode(node: ProfileHeaderNode, ...parameters: unknown[]): R;
    visitUnionDefinitionNode(node: UnionDefinitionNode, ...parameters: unknown[]): R;
    visitUseCaseDefinitionNode(node: UseCaseDefinitionNode, ...parameters: unknown[]): R;
    visitUseCaseExampleNode(node: UseCaseExampleNode, ...parameters: unknown[]): R;
    visitComlinkNoneLiteralNode(node: ComlinkNoneLiteralNode, ...parameters: unknown[]): R;
    visitComlinkPrimitiveLiteralNode(node: ComlinkPrimitiveLiteralNode, ...parameters: unknown[]): R;
    visitComlinkObjectLiteralNode(node: ComlinkObjectLiteralNode, ...parameters: unknown[]): R;
    visitComlinkListLiteralNode(node: ComlinkListLiteralNode, ...parameters: unknown[]): R;
    visitComlinkAssignmentNode(node: ComlinkAssignmentNode, ...parameters: unknown[]): R;
}
