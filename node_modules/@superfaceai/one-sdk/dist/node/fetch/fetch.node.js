"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeFetch = void 0;
var abort_controller_1 = require("abort-controller");
var form_data_1 = __importDefault(require("form-data"));
var node_fetch_1 = __importStar(require("node-fetch"));
var url_1 = require("url");
var core_1 = require("../../core");
var events_1 = require("../../core/events/events");
var lib_1 = require("../../lib");
var NodeFetch = /** @class */ (function () {
    function NodeFetch(timers) {
        this.timers = timers;
        this.digest = new lib_1.SuperCache();
    }
    NodeFetch.multimapToHeaders = function (map) {
        var e_1, _a, e_2, _b;
        var headers = new node_fetch_1.Headers();
        if (map === undefined) {
            return headers;
        }
        try {
            // Header values are folded as fetch uses message.headers
            //   https://github.com/node-fetch/node-fetch/blob/2.x/src/index.js#L163
            //   https://nodejs.org/dist/latest-v19.x/docs/api/http.html#messageheaders
            for (var _c = __values(Object.entries(map)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var _e = __read(_d.value, 2), key = _e[0], value = _e[1];
                var valueArray = value;
                if (!Array.isArray(value)) {
                    valueArray = [value];
                }
                try {
                    for (var valueArray_1 = (e_2 = void 0, __values(valueArray)), valueArray_1_1 = valueArray_1.next(); !valueArray_1_1.done; valueArray_1_1 = valueArray_1.next()) {
                        var element = valueArray_1_1.value;
                        headers.append(key, element);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (valueArray_1_1 && !valueArray_1_1.done && (_b = valueArray_1.return)) _b.call(valueArray_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return headers;
    };
    NodeFetch.isJsonContentType = function (contentType, _accept) {
        if (contentType !== undefined &&
            contentType.some(function (v) { return v.includes(core_1.JSON_CONTENT) || v.includes(core_1.JSON_PROBLEM_CONTENT); })) {
            return true;
        }
        return false;
    };
    NodeFetch.isBinaryContentType = function (contentType, accept) {
        if (contentType !== undefined &&
            contentType.some(function (v) { return core_1.BINARY_CONTENT_REGEXP.test(v); })) {
            return true;
        }
        if (accept !== undefined &&
            accept.some(function (v) { return core_1.BINARY_CONTENT_REGEXP.test(v); })) {
            return true;
        }
        return false;
    };
    NodeFetch.prototype.fetch = function (url, parameters) {
        return __awaiter(this, void 0, void 0, function () {
            var requestHeaders, request, response, headers, _a, _b, _c, key, value, body, contentType, accept;
            var e_3, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        requestHeaders = NodeFetch.multimapToHeaders(parameters.headers);
                        request = {
                            headers: requestHeaders,
                            method: parameters.method,
                            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                            // @ts-ignore https://github.com/form-data/form-data/issues/513
                            body: this.body(parameters.body),
                        };
                        return [4 /*yield*/, this.fetchWithTimeout(url + this.queryParameters(parameters.queryParameters), request, parameters.timeout)];
                    case 1:
                        response = _e.sent();
                        headers = {};
                        try {
                            // headers.raw() returns an object with prototype set to null for some reason, so we need to rewrap the values
                            for (_a = __values(Object.entries(response.headers.raw())), _b = _a.next(); !_b.done; _b = _a.next()) {
                                _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                                if (value.length > 1) {
                                    headers[key] = value;
                                }
                                else if (value.length === 1) {
                                    headers[key] = value[0];
                                }
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                        contentType = core_1.getHeaderMulti(headers, 'content-type');
                        accept = core_1.getHeaderMulti(requestHeaders.raw(), 'accept');
                        if (!(response.status === 204)) return [3 /*break*/, 2];
                        body = undefined;
                        return [3 /*break*/, 8];
                    case 2:
                        if (!NodeFetch.isJsonContentType(contentType, accept)) return [3 /*break*/, 4];
                        return [4 /*yield*/, response.json()];
                    case 3:
                        body = _e.sent();
                        return [3 /*break*/, 8];
                    case 4:
                        if (!NodeFetch.isBinaryContentType(contentType, accept)) return [3 /*break*/, 6];
                        return [4 /*yield*/, response.arrayBuffer()];
                    case 5:
                        body = _e.sent(); // TODO: BinaryData.fromStream(response.body)
                        return [3 /*break*/, 8];
                    case 6: return [4 /*yield*/, response.text()];
                    case 7:
                        body = _e.sent();
                        _e.label = 8;
                    case 8: return [2 /*return*/, {
                            status: response.status,
                            statusText: response.statusText,
                            headers: headers,
                            body: body,
                        }];
                }
            });
        });
    };
    NodeFetch.prototype.fetchWithTimeout = function (url, options, timeout) {
        return __awaiter(this, void 0, void 0, function () {
            var abort, timeoutHandle, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        abort = new abort_controller_1.AbortController();
                        timeoutHandle = undefined;
                        if (timeout !== undefined) {
                            timeoutHandle = this.timers.setTimeout(function () { return abort.abort(); }, timeout);
                        }
                        options.signal = abort.signal;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, node_fetch_1.default(url, options)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        err_1 = _a.sent();
                        throw NodeFetch.normalizeError(err_1);
                    case 4:
                        if (timeoutHandle !== undefined) {
                            this.timers.clearTimeout(timeoutHandle);
                        }
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    NodeFetch.normalizeError = function (err) {
        if (typeof err !== 'object' || err === null) {
            throw err;
        }
        if (!('type' in err)) {
            throw err;
        }
        var error = err;
        if (error.type === 'aborted') {
            return new core_1.NetworkFetchError('timeout');
        }
        if (error.type === 'system') {
            var systemError = error;
            if (systemError.code === 'ENOTFOUND' ||
                systemError.code === 'EAI_AGAIN') {
                return new core_1.NetworkFetchError('dns');
            }
            // TODO: unsigned ssl?
            return new core_1.NetworkFetchError('reject');
        }
        // TODO: Match other errors here
        return new core_1.RequestFetchError('abort');
    };
    NodeFetch.prototype.queryParameters = function (parameters) {
        var e_4, _a;
        if (parameters === undefined || Object.keys(parameters).length === 0) {
            return '';
        }
        var params = new url_1.URLSearchParams();
        var _loop_1 = function (key, param) {
            if (typeof param === 'string') {
                params.append(key, param);
            }
            else {
                param.forEach(function (v) { return params.append(key, v); });
            }
        };
        try {
            for (var _b = __values(Object.entries(parameters)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), key = _d[0], param = _d[1];
                _loop_1(key, param);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return '?' + params.toString();
    };
    NodeFetch.prototype.body = function (body) {
        if (body) {
            if (core_1.isStringBody(body) || core_1.isBinaryBody(body)) {
                if (core_1.isBinaryData(body.data)) {
                    return body.data.toStream();
                }
                return body.data;
            }
            if (core_1.isFormDataBody(body)) {
                return this.formData(body.data);
            }
            if (core_1.isUrlSearchParamsBody(body)) {
                return this.urlSearchParams(body.data);
            }
        }
        return undefined;
    };
    NodeFetch.prototype.formData = function (data) {
        var formData = new form_data_1.default();
        if (data) {
            Object.entries(data).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                if (value === undefined || value === null) {
                    return;
                }
                else if (Array.isArray(value)) {
                    value.forEach(function (item) { return formData.append(key, item); });
                }
                else if (core_1.isBinaryData(value)) {
                    if (core_1.isBinaryDataMeta(value)) {
                        formData.append(key, value.toStream(), {
                            contentType: value.mimetype,
                            filename: value.name,
                        });
                    }
                    else {
                        formData.append(key, value.toStream());
                    }
                }
                else {
                    formData.append(key, value);
                }
            });
        }
        return formData;
    };
    NodeFetch.prototype.urlSearchParams = function (data) {
        return new url_1.URLSearchParams(data);
    };
    __decorate([
        events_1.eventInterceptor({
            eventName: 'fetch',
            placement: 'around',
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object]),
        __metadata("design:returntype", Promise)
    ], NodeFetch.prototype, "fetch", null);
    return NodeFetch;
}());
exports.NodeFetch = NodeFetch;
//# sourceMappingURL=fetch.node.js.map